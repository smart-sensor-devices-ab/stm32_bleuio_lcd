
stm32_bleuio_lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eac4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  0800ed64  0800ed64  0001ed64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800efb8  0800efb8  0001efb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800efc0  0800efc0  0001efc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800efc4  0800efc4  0001efc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  24000000  0800efc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000094  0800f05c  00020094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000f4  0800f0bc  000200f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fcc  24000154  0800f11c  00020154  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001120  0800f11c  00021120  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038064  00000000  00000000  00020182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005257  00000000  00000000  000581e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001658  00000000  00000000  0005d440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d0  00000000  00000000  0005ea98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ad34  00000000  00000000  0005ff68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000208c7  00000000  00000000  0009ac9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00164a38  00000000  00000000  000bb563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0021ff9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006260  00000000  00000000  0021fff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000154 	.word	0x24000154
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ed4c 	.word	0x0800ed4c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000158 	.word	0x24000158
 80002dc:	0800ed4c 	.word	0x0800ed4c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068c:	f001 f900 	bl	8001890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000690:	f000 f892 	bl	80007b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000694:	f000 f9e8 	bl	8000a68 <MX_GPIO_Init>
  MX_ETH_Init();
 8000698:	f000 f90e 	bl	80008b8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800069c:	f000 f998 	bl	80009d0 <MX_USART3_UART_Init>
  MX_USB_HOST_Init();
 80006a0:	f00d fb32 	bl	800dd08 <MX_USB_HOST_Init>
  MX_I2C2_Init();
 80006a4:	f000 f954 	bl	8000950 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  isBleuIOReady = false;
 80006a8:	4b35      	ldr	r3, [pc, #212]	; (8000780 <main+0xf8>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
  isAdvertising= false;
 80006ae:	4b35      	ldr	r3, [pc, #212]	; (8000784 <main+0xfc>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
  isLightBulbOn= false;
 80006b4:	4b34      	ldr	r3, [pc, #208]	; (8000788 <main+0x100>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
  isConnected= false;
 80006ba:	4b34      	ldr	r3, [pc, #208]	; (800078c <main+0x104>)
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
  uartStatus = UART_RX_NONE;
 80006c0:	4b33      	ldr	r3, [pc, #204]	; (8000790 <main+0x108>)
 80006c2:	22ff      	movs	r2, #255	; 0xff
 80006c4:	701a      	strb	r2, [r3, #0]



  // Starts uart recieve interrupt mode
  HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, RXBUFFERSIZE);
 80006c6:	2201      	movs	r2, #1
 80006c8:	4932      	ldr	r1, [pc, #200]	; (8000794 <main+0x10c>)
 80006ca:	4833      	ldr	r0, [pc, #204]	; (8000798 <main+0x110>)
 80006cc:	f008 f912 	bl	80088f4 <HAL_UART_Receive_IT>

  // Turns on all LEDs on start up
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2101      	movs	r1, #1
 80006d4:	4831      	ldr	r0, [pc, #196]	; (800079c <main+0x114>)
 80006d6:	f002 fdf7 	bl	80032c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	2102      	movs	r1, #2
 80006de:	4830      	ldr	r0, [pc, #192]	; (80007a0 <main+0x118>)
 80006e0:	f002 fdf2 	bl	80032c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ea:	482c      	ldr	r0, [pc, #176]	; (800079c <main+0x114>)
 80006ec:	f002 fdec 	bl	80032c8 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80006f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f4:	f001 f95e 	bl	80019b4 <HAL_Delay>

  // Turns off all LEDs except Red
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2101      	movs	r1, #1
 80006fc:	4827      	ldr	r0, [pc, #156]	; (800079c <main+0x114>)
 80006fe:	f002 fde3 	bl	80032c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	2102      	movs	r1, #2
 8000706:	4826      	ldr	r0, [pc, #152]	; (80007a0 <main+0x118>)
 8000708:	f002 fdde 	bl	80032c8 <HAL_GPIO_WritePin>


  // Sends welcome message to uart
  uart_buf_len = sprintf(uart_tx_buf, "LCD DISPLAY\r\nWelcome to this Tutorial on STM32 BleuIO Example!\r\n  Please Press 0 to run the ATI command\r\nPress 1 to start advertising\r\nPress 2 to stop advertising\r\nPress 3 to Clear Screen\r\n\r\n");
 800070c:	4925      	ldr	r1, [pc, #148]	; (80007a4 <main+0x11c>)
 800070e:	4826      	ldr	r0, [pc, #152]	; (80007a8 <main+0x120>)
 8000710:	f00d ff88 	bl	800e624 <siprintf>
 8000714:	4603      	mov	r3, r0
 8000716:	4a25      	ldr	r2, [pc, #148]	; (80007ac <main+0x124>)
 8000718:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 800071a:	4b24      	ldr	r3, [pc, #144]	; (80007ac <main+0x124>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	b29a      	uxth	r2, r3
 8000720:	f04f 33ff 	mov.w	r3, #4294967295
 8000724:	4920      	ldr	r1, [pc, #128]	; (80007a8 <main+0x120>)
 8000726:	481c      	ldr	r0, [pc, #112]	; (8000798 <main+0x110>)
 8000728:	f008 f84e 	bl	80087c8 <HAL_UART_Transmit>

  init_lcd();
 800072c:	f000 fc70 	bl	8001010 <init_lcd>

  lcd_wellcome_msg();
 8000730:	f000 fd56 	bl	80011e0 <lcd_wellcome_msg>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000734:	f00d fb0e 	bl	800dd54 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    // Simple handler for uart input
    handleUartInput(uartStatus);
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <main+0x108>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fad5 	bl	8000cec <handleUartInput>

    // Inteprets the dongle data
    dongle_interpreter(dongle_response);
 8000742:	481b      	ldr	r0, [pc, #108]	; (80007b0 <main+0x128>)
 8000744:	f000 fbce 	bl	8000ee4 <dongle_interpreter>

	// Starts advertising as soon as the Dongle is ready.
	if(!isAdvertising && !isConnected && isBleuIOReady)
 8000748:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <main+0xfc>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	f083 0301 	eor.w	r3, r3, #1
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	d0ee      	beq.n	8000734 <main+0xac>
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <main+0x104>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	f083 0301 	eor.w	r3, r3, #1
 800075e:	b2db      	uxtb	r3, r3
 8000760:	2b00      	cmp	r3, #0
 8000762:	d0e7      	beq.n	8000734 <main+0xac>
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <main+0xf8>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d0e3      	beq.n	8000734 <main+0xac>
	{
		HAL_Delay(200);
 800076c:	20c8      	movs	r0, #200	; 0xc8
 800076e:	f001 f921 	bl	80019b4 <HAL_Delay>
		writeToDongle((uint8_t*)DONGLE_CMD_AT_ADVSTART);
 8000772:	4810      	ldr	r0, [pc, #64]	; (80007b4 <main+0x12c>)
 8000774:	f00d fab4 	bl	800dce0 <writeToDongle>
		isAdvertising = true;
 8000778:	4b02      	ldr	r3, [pc, #8]	; (8000784 <main+0xfc>)
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
    MX_USB_HOST_Process();
 800077e:	e7d9      	b.n	8000734 <main+0xac>
 8000780:	24000424 	.word	0x24000424
 8000784:	2400056d 	.word	0x2400056d
 8000788:	2400056c 	.word	0x2400056c
 800078c:	24000474 	.word	0x24000474
 8000790:	2400026a 	.word	0x2400026a
 8000794:	2400026c 	.word	0x2400026c
 8000798:	24000390 	.word	0x24000390
 800079c:	58020400 	.word	0x58020400
 80007a0:	58021000 	.word	0x58021000
 80007a4:	0800ed64 	.word	0x0800ed64
 80007a8:	24000170 	.word	0x24000170
 80007ac:	24000420 	.word	0x24000420
 80007b0:	2400029c 	.word	0x2400029c
 80007b4:	0800ee24 	.word	0x0800ee24

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b09c      	sub	sp, #112	; 0x70
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c2:	224c      	movs	r2, #76	; 0x4c
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f00d fe6a 	bl	800e4a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2220      	movs	r2, #32
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f00d fe64 	bl	800e4a0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007d8:	2002      	movs	r0, #2
 80007da:	f005 fc41 	bl	8006060 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	4b33      	ldr	r3, [pc, #204]	; (80008b0 <SystemClock_Config+0xf8>)
 80007e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e6:	4a32      	ldr	r2, [pc, #200]	; (80008b0 <SystemClock_Config+0xf8>)
 80007e8:	f023 0301 	bic.w	r3, r3, #1
 80007ec:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007ee:	4b30      	ldr	r3, [pc, #192]	; (80008b0 <SystemClock_Config+0xf8>)
 80007f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	4b2e      	ldr	r3, [pc, #184]	; (80008b4 <SystemClock_Config+0xfc>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000800:	4a2c      	ldr	r2, [pc, #176]	; (80008b4 <SystemClock_Config+0xfc>)
 8000802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000806:	6193      	str	r3, [r2, #24]
 8000808:	4b2a      	ldr	r3, [pc, #168]	; (80008b4 <SystemClock_Config+0xfc>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000814:	bf00      	nop
 8000816:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <SystemClock_Config+0xfc>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800081e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000822:	d1f8      	bne.n	8000816 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000824:	2303      	movs	r3, #3
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000828:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800082e:	2301      	movs	r3, #1
 8000830:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000832:	2340      	movs	r3, #64	; 0x40
 8000834:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000836:	2302      	movs	r3, #2
 8000838:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083a:	2302      	movs	r3, #2
 800083c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800083e:	2301      	movs	r3, #1
 8000840:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000842:	2318      	movs	r3, #24
 8000844:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000846:	2302      	movs	r3, #2
 8000848:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800084a:	2304      	movs	r3, #4
 800084c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800084e:	2302      	movs	r3, #2
 8000850:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000852:	230c      	movs	r3, #12
 8000854:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000856:	2300      	movs	r3, #0
 8000858:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	4618      	mov	r0, r3
 8000864:	f005 fc46 	bl	80060f4 <HAL_RCC_OscConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800086e:	f000 fced 	bl	800124c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000872:	233f      	movs	r3, #63	; 0x3f
 8000874:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2101      	movs	r1, #1
 8000896:	4618      	mov	r0, r3
 8000898:	f006 f858 	bl	800694c <HAL_RCC_ClockConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80008a2:	f000 fcd3 	bl	800124c <Error_Handler>
  }
}
 80008a6:	bf00      	nop
 80008a8:	3770      	adds	r7, #112	; 0x70
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	58000400 	.word	0x58000400
 80008b4:	58024800 	.word	0x58024800

080008b8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008bc:	4b1e      	ldr	r3, [pc, #120]	; (8000938 <MX_ETH_Init+0x80>)
 80008be:	4a1f      	ldr	r2, [pc, #124]	; (800093c <MX_ETH_Init+0x84>)
 80008c0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008c2:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <MX_ETH_Init+0x88>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008c8:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <MX_ETH_Init+0x88>)
 80008ca:	2280      	movs	r2, #128	; 0x80
 80008cc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <MX_ETH_Init+0x88>)
 80008d0:	22e1      	movs	r2, #225	; 0xe1
 80008d2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008d4:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_ETH_Init+0x88>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008da:	4b19      	ldr	r3, [pc, #100]	; (8000940 <MX_ETH_Init+0x88>)
 80008dc:	2200      	movs	r2, #0
 80008de:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008e0:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_ETH_Init+0x88>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_ETH_Init+0x80>)
 80008e8:	4a15      	ldr	r2, [pc, #84]	; (8000940 <MX_ETH_Init+0x88>)
 80008ea:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_ETH_Init+0x80>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_ETH_Init+0x80>)
 80008f4:	4a13      	ldr	r2, [pc, #76]	; (8000944 <MX_ETH_Init+0x8c>)
 80008f6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_ETH_Init+0x80>)
 80008fa:	4a13      	ldr	r2, [pc, #76]	; (8000948 <MX_ETH_Init+0x90>)
 80008fc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_ETH_Init+0x80>)
 8000900:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000904:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000906:	480c      	ldr	r0, [pc, #48]	; (8000938 <MX_ETH_Init+0x80>)
 8000908:	f001 ff18 	bl	800273c <HAL_ETH_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000912:	f000 fc9b 	bl	800124c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000916:	2234      	movs	r2, #52	; 0x34
 8000918:	2100      	movs	r1, #0
 800091a:	480c      	ldr	r0, [pc, #48]	; (800094c <MX_ETH_Init+0x94>)
 800091c:	f00d fdc0 	bl	800e4a0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <MX_ETH_Init+0x94>)
 8000922:	2221      	movs	r2, #33	; 0x21
 8000924:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_ETH_Init+0x94>)
 8000928:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800092c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <MX_ETH_Init+0x94>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	24000570 	.word	0x24000570
 800093c:	40028000 	.word	0x40028000
 8000940:	24000280 	.word	0x24000280
 8000944:	240000f4 	.word	0x240000f4
 8000948:	24000094 	.word	0x24000094
 800094c:	240005f8 	.word	0x240005f8

08000950 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <MX_I2C2_Init+0x74>)
 8000956:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <MX_I2C2_Init+0x78>)
 8000958:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x403032CA;
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_I2C2_Init+0x74>)
 800095c:	4a1b      	ldr	r2, [pc, #108]	; (80009cc <MX_I2C2_Init+0x7c>)
 800095e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_I2C2_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <MX_I2C2_Init+0x74>)
 8000968:	2201      	movs	r2, #1
 800096a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_I2C2_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_I2C2_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_I2C2_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_I2C2_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_I2C2_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800098a:	480e      	ldr	r0, [pc, #56]	; (80009c4 <MX_I2C2_Init+0x74>)
 800098c:	f004 f8ec 	bl	8004b68 <HAL_I2C_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000996:	f000 fc59 	bl	800124c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800099a:	2100      	movs	r1, #0
 800099c:	4809      	ldr	r0, [pc, #36]	; (80009c4 <MX_I2C2_Init+0x74>)
 800099e:	f005 fac7 	bl	8005f30 <HAL_I2CEx_ConfigAnalogFilter>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009a8:	f000 fc50 	bl	800124c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009ac:	2100      	movs	r1, #0
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_I2C2_Init+0x74>)
 80009b0:	f005 fb09 	bl	8005fc6 <HAL_I2CEx_ConfigDigitalFilter>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009ba:	f000 fc47 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	24000428 	.word	0x24000428
 80009c8:	40005800 	.word	0x40005800
 80009cc:	403032ca 	.word	0x403032ca

080009d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009d4:	4b22      	ldr	r3, [pc, #136]	; (8000a60 <MX_USART3_UART_Init+0x90>)
 80009d6:	4a23      	ldr	r2, [pc, #140]	; (8000a64 <MX_USART3_UART_Init+0x94>)
 80009d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009da:	4b21      	ldr	r3, [pc, #132]	; (8000a60 <MX_USART3_UART_Init+0x90>)
 80009dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009e2:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <MX_USART3_UART_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009e8:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <MX_USART3_UART_Init+0x90>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009ee:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <MX_USART3_UART_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009f4:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <MX_USART3_UART_Init+0x90>)
 80009f6:	220c      	movs	r2, #12
 80009f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fa:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <MX_USART3_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a00:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <MX_USART3_UART_Init+0x90>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a06:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <MX_USART3_UART_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a0c:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <MX_USART3_UART_Init+0x90>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a12:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <MX_USART3_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a18:	4811      	ldr	r0, [pc, #68]	; (8000a60 <MX_USART3_UART_Init+0x90>)
 8000a1a:	f007 fe85 	bl	8008728 <HAL_UART_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a24:	f000 fc12 	bl	800124c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a28:	2100      	movs	r1, #0
 8000a2a:	480d      	ldr	r0, [pc, #52]	; (8000a60 <MX_USART3_UART_Init+0x90>)
 8000a2c:	f00a f911 	bl	800ac52 <HAL_UARTEx_SetTxFifoThreshold>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a36:	f000 fc09 	bl	800124c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4808      	ldr	r0, [pc, #32]	; (8000a60 <MX_USART3_UART_Init+0x90>)
 8000a3e:	f00a f946 	bl	800acce <HAL_UARTEx_SetRxFifoThreshold>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a48:	f000 fc00 	bl	800124c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a4c:	4804      	ldr	r0, [pc, #16]	; (8000a60 <MX_USART3_UART_Init+0x90>)
 8000a4e:	f00a f8c7 	bl	800abe0 <HAL_UARTEx_DisableFifoMode>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a58:	f000 fbf8 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	24000390 	.word	0x24000390
 8000a64:	40004800 	.word	0x40004800

08000a68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08e      	sub	sp, #56	; 0x38
 8000a6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7e:	4b69      	ldr	r3, [pc, #420]	; (8000c24 <MX_GPIO_Init+0x1bc>)
 8000a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a84:	4a67      	ldr	r2, [pc, #412]	; (8000c24 <MX_GPIO_Init+0x1bc>)
 8000a86:	f043 0304 	orr.w	r3, r3, #4
 8000a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a8e:	4b65      	ldr	r3, [pc, #404]	; (8000c24 <MX_GPIO_Init+0x1bc>)
 8000a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a94:	f003 0304 	and.w	r3, r3, #4
 8000a98:	623b      	str	r3, [r7, #32]
 8000a9a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a9c:	4b61      	ldr	r3, [pc, #388]	; (8000c24 <MX_GPIO_Init+0x1bc>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a60      	ldr	r2, [pc, #384]	; (8000c24 <MX_GPIO_Init+0x1bc>)
 8000aa4:	f043 0320 	orr.w	r3, r3, #32
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b5d      	ldr	r3, [pc, #372]	; (8000c24 <MX_GPIO_Init+0x1bc>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 0320 	and.w	r3, r3, #32
 8000ab6:	61fb      	str	r3, [r7, #28]
 8000ab8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aba:	4b5a      	ldr	r3, [pc, #360]	; (8000c24 <MX_GPIO_Init+0x1bc>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a58      	ldr	r2, [pc, #352]	; (8000c24 <MX_GPIO_Init+0x1bc>)
 8000ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b56      	ldr	r3, [pc, #344]	; (8000c24 <MX_GPIO_Init+0x1bc>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad4:	61bb      	str	r3, [r7, #24]
 8000ad6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad8:	4b52      	ldr	r3, [pc, #328]	; (8000c24 <MX_GPIO_Init+0x1bc>)
 8000ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ade:	4a51      	ldr	r2, [pc, #324]	; (8000c24 <MX_GPIO_Init+0x1bc>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae8:	4b4e      	ldr	r3, [pc, #312]	; (8000c24 <MX_GPIO_Init+0x1bc>)
 8000aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af6:	4b4b      	ldr	r3, [pc, #300]	; (8000c24 <MX_GPIO_Init+0x1bc>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afc:	4a49      	ldr	r2, [pc, #292]	; (8000c24 <MX_GPIO_Init+0x1bc>)
 8000afe:	f043 0302 	orr.w	r3, r3, #2
 8000b02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b06:	4b47      	ldr	r3, [pc, #284]	; (8000c24 <MX_GPIO_Init+0x1bc>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0c:	f003 0302 	and.w	r3, r3, #2
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b14:	4b43      	ldr	r3, [pc, #268]	; (8000c24 <MX_GPIO_Init+0x1bc>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1a:	4a42      	ldr	r2, [pc, #264]	; (8000c24 <MX_GPIO_Init+0x1bc>)
 8000b1c:	f043 0308 	orr.w	r3, r3, #8
 8000b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b24:	4b3f      	ldr	r3, [pc, #252]	; (8000c24 <MX_GPIO_Init+0x1bc>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2a:	f003 0308 	and.w	r3, r3, #8
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b32:	4b3c      	ldr	r3, [pc, #240]	; (8000c24 <MX_GPIO_Init+0x1bc>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b38:	4a3a      	ldr	r2, [pc, #232]	; (8000c24 <MX_GPIO_Init+0x1bc>)
 8000b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b42:	4b38      	ldr	r3, [pc, #224]	; (8000c24 <MX_GPIO_Init+0x1bc>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b50:	4b34      	ldr	r3, [pc, #208]	; (8000c24 <MX_GPIO_Init+0x1bc>)
 8000b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b56:	4a33      	ldr	r2, [pc, #204]	; (8000c24 <MX_GPIO_Init+0x1bc>)
 8000b58:	f043 0310 	orr.w	r3, r3, #16
 8000b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b60:	4b30      	ldr	r3, [pc, #192]	; (8000c24 <MX_GPIO_Init+0x1bc>)
 8000b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b66:	f003 0310 	and.w	r3, r3, #16
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b74:	482c      	ldr	r0, [pc, #176]	; (8000c28 <MX_GPIO_Init+0x1c0>)
 8000b76:	f002 fba7 	bl	80032c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b80:	482a      	ldr	r0, [pc, #168]	; (8000c2c <MX_GPIO_Init+0x1c4>)
 8000b82:	f002 fba1 	bl	80032c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2102      	movs	r1, #2
 8000b8a:	4829      	ldr	r0, [pc, #164]	; (8000c30 <MX_GPIO_Init+0x1c8>)
 8000b8c:	f002 fb9c 	bl	80032c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4823      	ldr	r0, [pc, #140]	; (8000c34 <MX_GPIO_Init+0x1cc>)
 8000ba6:	f002 f9df 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000baa:	f244 0301 	movw	r3, #16385	; 0x4001
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4819      	ldr	r0, [pc, #100]	; (8000c28 <MX_GPIO_Init+0x1c0>)
 8000bc4:	f002 f9d0 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bde:	4619      	mov	r1, r3
 8000be0:	4812      	ldr	r0, [pc, #72]	; (8000c2c <MX_GPIO_Init+0x1c4>)
 8000be2:	f002 f9c1 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480f      	ldr	r0, [pc, #60]	; (8000c38 <MX_GPIO_Init+0x1d0>)
 8000bfc:	f002 f9b4 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c00:	2302      	movs	r3, #2
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c14:	4619      	mov	r1, r3
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <MX_GPIO_Init+0x1c8>)
 8000c18:	f002 f9a6 	bl	8002f68 <HAL_GPIO_Init>

}
 8000c1c:	bf00      	nop
 8000c1e:	3738      	adds	r7, #56	; 0x38
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	58024400 	.word	0x58024400
 8000c28:	58020400 	.word	0x58020400
 8000c2c:	58020c00 	.word	0x58020c00
 8000c30:	58021000 	.word	0x58021000
 8000c34:	58020800 	.word	0x58020800
 8000c38:	58021800 	.word	0x58021800

08000c3c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	if(UartHandle == &huart3)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a25      	ldr	r2, [pc, #148]	; (8000cdc <HAL_UART_RxCpltCallback+0xa0>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d142      	bne.n	8000cd2 <HAL_UART_RxCpltCallback+0x96>
	{
		RX_value = (int)aRxBuffer[0];
 8000c4c:	4b24      	ldr	r3, [pc, #144]	; (8000ce0 <HAL_UART_RxCpltCallback+0xa4>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b24      	ldr	r3, [pc, #144]	; (8000ce4 <HAL_UART_RxCpltCallback+0xa8>)
 8000c54:	601a      	str	r2, [r3, #0]
		uartStatus = UART_RX_NONE;
 8000c56:	4b24      	ldr	r3, [pc, #144]	; (8000ce8 <HAL_UART_RxCpltCallback+0xac>)
 8000c58:	22ff      	movs	r2, #255	; 0xff
 8000c5a:	701a      	strb	r2, [r3, #0]

		switch(RX_value)
 8000c5c:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <HAL_UART_RxCpltCallback+0xa8>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	3b30      	subs	r3, #48	; 0x30
 8000c62:	2b06      	cmp	r3, #6
 8000c64:	d82c      	bhi.n	8000cc0 <HAL_UART_RxCpltCallback+0x84>
 8000c66:	a201      	add	r2, pc, #4	; (adr r2, 8000c6c <HAL_UART_RxCpltCallback+0x30>)
 8000c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c6c:	08000c89 	.word	0x08000c89
 8000c70:	08000c91 	.word	0x08000c91
 8000c74:	08000c99 	.word	0x08000c99
 8000c78:	08000ca1 	.word	0x08000ca1
 8000c7c:	08000ca9 	.word	0x08000ca9
 8000c80:	08000cb1 	.word	0x08000cb1
 8000c84:	08000cb9 	.word	0x08000cb9
		{
			case UART_RX_0:
			{
				uartStatus = UART_RX_0;
 8000c88:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <HAL_UART_RxCpltCallback+0xac>)
 8000c8a:	2230      	movs	r2, #48	; 0x30
 8000c8c:	701a      	strb	r2, [r3, #0]
				break;
 8000c8e:	e01b      	b.n	8000cc8 <HAL_UART_RxCpltCallback+0x8c>
			}
			case UART_RX_1:
			{
				uartStatus = UART_RX_1;
 8000c90:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <HAL_UART_RxCpltCallback+0xac>)
 8000c92:	2231      	movs	r2, #49	; 0x31
 8000c94:	701a      	strb	r2, [r3, #0]
				break;
 8000c96:	e017      	b.n	8000cc8 <HAL_UART_RxCpltCallback+0x8c>
			}
			case UART_RX_2:
			{
				uartStatus = UART_RX_2;
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <HAL_UART_RxCpltCallback+0xac>)
 8000c9a:	2232      	movs	r2, #50	; 0x32
 8000c9c:	701a      	strb	r2, [r3, #0]
				break;
 8000c9e:	e013      	b.n	8000cc8 <HAL_UART_RxCpltCallback+0x8c>
			}

			case UART_RX_3:
			{
				uartStatus = UART_RX_3;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <HAL_UART_RxCpltCallback+0xac>)
 8000ca2:	2233      	movs	r2, #51	; 0x33
 8000ca4:	701a      	strb	r2, [r3, #0]
				break;
 8000ca6:	e00f      	b.n	8000cc8 <HAL_UART_RxCpltCallback+0x8c>
			}

			case UART_RX_4:
			{
				uartStatus = UART_RX_4;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <HAL_UART_RxCpltCallback+0xac>)
 8000caa:	2234      	movs	r2, #52	; 0x34
 8000cac:	701a      	strb	r2, [r3, #0]
				break;
 8000cae:	e00b      	b.n	8000cc8 <HAL_UART_RxCpltCallback+0x8c>
			}

			case UART_RX_5:
			{
				uartStatus = UART_RX_5;
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <HAL_UART_RxCpltCallback+0xac>)
 8000cb2:	2235      	movs	r2, #53	; 0x35
 8000cb4:	701a      	strb	r2, [r3, #0]
				break;
 8000cb6:	e007      	b.n	8000cc8 <HAL_UART_RxCpltCallback+0x8c>
			}

			case UART_RX_6:
			{
				uartStatus = UART_RX_6;
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <HAL_UART_RxCpltCallback+0xac>)
 8000cba:	2236      	movs	r2, #54	; 0x36
 8000cbc:	701a      	strb	r2, [r3, #0]
				break;
 8000cbe:	e003      	b.n	8000cc8 <HAL_UART_RxCpltCallback+0x8c>
			}

			default:
			{
				uartStatus = UART_RX_NONE;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <HAL_UART_RxCpltCallback+0xac>)
 8000cc2:	22ff      	movs	r2, #255	; 0xff
 8000cc4:	701a      	strb	r2, [r3, #0]
				break;
 8000cc6:	bf00      	nop
			}
		}
		// Resets uart recieve interrupt mode
		HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, RXBUFFERSIZE);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4905      	ldr	r1, [pc, #20]	; (8000ce0 <HAL_UART_RxCpltCallback+0xa4>)
 8000ccc:	4803      	ldr	r0, [pc, #12]	; (8000cdc <HAL_UART_RxCpltCallback+0xa0>)
 8000cce:	f007 fe11 	bl	80088f4 <HAL_UART_Receive_IT>
	}
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	24000390 	.word	0x24000390
 8000ce0:	2400026c 	.word	0x2400026c
 8000ce4:	24000270 	.word	0x24000270
 8000ce8:	2400026a 	.word	0x2400026a

08000cec <handleUartInput>:
/**
  * @brief Simple uart input handler
  * @retval None
  */
void handleUartInput(UARTCommandTypeDef cmd)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af02      	add	r7, sp, #8
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
	switch(cmd)
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	2b36      	cmp	r3, #54	; 0x36
 8000cfa:	dc17      	bgt.n	8000d2c <handleUartInput+0x40>
 8000cfc:	2b30      	cmp	r3, #48	; 0x30
 8000cfe:	f2c0 80ca 	blt.w	8000e96 <handleUartInput+0x1aa>
 8000d02:	3b30      	subs	r3, #48	; 0x30
 8000d04:	2b06      	cmp	r3, #6
 8000d06:	f200 80c6 	bhi.w	8000e96 <handleUartInput+0x1aa>
 8000d0a:	a201      	add	r2, pc, #4	; (adr r2, 8000d10 <handleUartInput+0x24>)
 8000d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d10:	08000d35 	.word	0x08000d35
 8000d14:	08000d8d 	.word	0x08000d8d
 8000d18:	08000de5 	.word	0x08000de5
 8000d1c:	08000e3d 	.word	0x08000e3d
 8000d20:	08000e4f 	.word	0x08000e4f
 8000d24:	08000e85 	.word	0x08000e85
 8000d28:	08000e91 	.word	0x08000e91
 8000d2c:	2bff      	cmp	r3, #255	; 0xff
 8000d2e:	f000 80b6 	beq.w	8000e9e <handleUartInput+0x1b2>
 8000d32:	e0b0      	b.n	8000e96 <handleUartInput+0x1aa>
	{
		case UART_RX_0:
		{
			// 0
			uart_buf_len = sprintf(uart_tx_buf, "\r\n(0 pressed)\r\n");
 8000d34:	495c      	ldr	r1, [pc, #368]	; (8000ea8 <handleUartInput+0x1bc>)
 8000d36:	485d      	ldr	r0, [pc, #372]	; (8000eac <handleUartInput+0x1c0>)
 8000d38:	f00d fc74 	bl	800e624 <siprintf>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	4a5c      	ldr	r2, [pc, #368]	; (8000eb0 <handleUartInput+0x1c4>)
 8000d40:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000d42:	4b5b      	ldr	r3, [pc, #364]	; (8000eb0 <handleUartInput+0x1c4>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4c:	4957      	ldr	r1, [pc, #348]	; (8000eac <handleUartInput+0x1c0>)
 8000d4e:	4859      	ldr	r0, [pc, #356]	; (8000eb4 <handleUartInput+0x1c8>)
 8000d50:	f007 fd3a 	bl	80087c8 <HAL_UART_Transmit>
			if(isBleuIOReady)
 8000d54:	4b58      	ldr	r3, [pc, #352]	; (8000eb8 <handleUartInput+0x1cc>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d003      	beq.n	8000d64 <handleUartInput+0x78>
			{
				writeToDongle((uint8_t*)DONGLE_CMD_ATI);
 8000d5c:	4857      	ldr	r0, [pc, #348]	; (8000ebc <handleUartInput+0x1d0>)
 8000d5e:	f00c ffbf 	bl	800dce0 <writeToDongle>
 8000d62:	e00f      	b.n	8000d84 <handleUartInput+0x98>
			} else
			{
				uart_buf_len = sprintf(uart_tx_buf, BLEUIO_NOT_READY_MSG);
 8000d64:	4956      	ldr	r1, [pc, #344]	; (8000ec0 <handleUartInput+0x1d4>)
 8000d66:	4851      	ldr	r0, [pc, #324]	; (8000eac <handleUartInput+0x1c0>)
 8000d68:	f00d fc5c 	bl	800e624 <siprintf>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	4a50      	ldr	r2, [pc, #320]	; (8000eb0 <handleUartInput+0x1c4>)
 8000d70:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000d72:	4b4f      	ldr	r3, [pc, #316]	; (8000eb0 <handleUartInput+0x1c4>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7c:	494b      	ldr	r1, [pc, #300]	; (8000eac <handleUartInput+0x1c0>)
 8000d7e:	484d      	ldr	r0, [pc, #308]	; (8000eb4 <handleUartInput+0x1c8>)
 8000d80:	f007 fd22 	bl	80087c8 <HAL_UART_Transmit>
			}
			uartStatus = UART_RX_NONE;
 8000d84:	4b4f      	ldr	r3, [pc, #316]	; (8000ec4 <handleUartInput+0x1d8>)
 8000d86:	22ff      	movs	r2, #255	; 0xff
 8000d88:	701a      	strb	r2, [r3, #0]
			break;
 8000d8a:	e089      	b.n	8000ea0 <handleUartInput+0x1b4>
		}

		case UART_RX_1:
		{
			// 1
			uart_buf_len = sprintf(uart_tx_buf, "\r\n(1 pressed)\r\n");
 8000d8c:	494e      	ldr	r1, [pc, #312]	; (8000ec8 <handleUartInput+0x1dc>)
 8000d8e:	4847      	ldr	r0, [pc, #284]	; (8000eac <handleUartInput+0x1c0>)
 8000d90:	f00d fc48 	bl	800e624 <siprintf>
 8000d94:	4603      	mov	r3, r0
 8000d96:	4a46      	ldr	r2, [pc, #280]	; (8000eb0 <handleUartInput+0x1c4>)
 8000d98:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000d9a:	4b45      	ldr	r3, [pc, #276]	; (8000eb0 <handleUartInput+0x1c4>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	f04f 33ff 	mov.w	r3, #4294967295
 8000da4:	4941      	ldr	r1, [pc, #260]	; (8000eac <handleUartInput+0x1c0>)
 8000da6:	4843      	ldr	r0, [pc, #268]	; (8000eb4 <handleUartInput+0x1c8>)
 8000da8:	f007 fd0e 	bl	80087c8 <HAL_UART_Transmit>
			if(isBleuIOReady)
 8000dac:	4b42      	ldr	r3, [pc, #264]	; (8000eb8 <handleUartInput+0x1cc>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <handleUartInput+0xd0>
			{
				writeToDongle((uint8_t*)DONGLE_CMD_AT_ADVSTART);
 8000db4:	4845      	ldr	r0, [pc, #276]	; (8000ecc <handleUartInput+0x1e0>)
 8000db6:	f00c ff93 	bl	800dce0 <writeToDongle>
 8000dba:	e00f      	b.n	8000ddc <handleUartInput+0xf0>
			} else
			{
				uart_buf_len = sprintf(uart_tx_buf, BLEUIO_NOT_READY_MSG);
 8000dbc:	4940      	ldr	r1, [pc, #256]	; (8000ec0 <handleUartInput+0x1d4>)
 8000dbe:	483b      	ldr	r0, [pc, #236]	; (8000eac <handleUartInput+0x1c0>)
 8000dc0:	f00d fc30 	bl	800e624 <siprintf>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	4a3a      	ldr	r2, [pc, #232]	; (8000eb0 <handleUartInput+0x1c4>)
 8000dc8:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000dca:	4b39      	ldr	r3, [pc, #228]	; (8000eb0 <handleUartInput+0x1c4>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd4:	4935      	ldr	r1, [pc, #212]	; (8000eac <handleUartInput+0x1c0>)
 8000dd6:	4837      	ldr	r0, [pc, #220]	; (8000eb4 <handleUartInput+0x1c8>)
 8000dd8:	f007 fcf6 	bl	80087c8 <HAL_UART_Transmit>
			}
			uartStatus = UART_RX_NONE;
 8000ddc:	4b39      	ldr	r3, [pc, #228]	; (8000ec4 <handleUartInput+0x1d8>)
 8000dde:	22ff      	movs	r2, #255	; 0xff
 8000de0:	701a      	strb	r2, [r3, #0]
			break;
 8000de2:	e05d      	b.n	8000ea0 <handleUartInput+0x1b4>
		}

		case UART_RX_2:
		{
			// 2
			uart_buf_len = sprintf(uart_tx_buf, "\r\n(2 pressed)\r\n");
 8000de4:	493a      	ldr	r1, [pc, #232]	; (8000ed0 <handleUartInput+0x1e4>)
 8000de6:	4831      	ldr	r0, [pc, #196]	; (8000eac <handleUartInput+0x1c0>)
 8000de8:	f00d fc1c 	bl	800e624 <siprintf>
 8000dec:	4603      	mov	r3, r0
 8000dee:	4a30      	ldr	r2, [pc, #192]	; (8000eb0 <handleUartInput+0x1c4>)
 8000df0:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000df2:	4b2f      	ldr	r3, [pc, #188]	; (8000eb0 <handleUartInput+0x1c4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfc:	492b      	ldr	r1, [pc, #172]	; (8000eac <handleUartInput+0x1c0>)
 8000dfe:	482d      	ldr	r0, [pc, #180]	; (8000eb4 <handleUartInput+0x1c8>)
 8000e00:	f007 fce2 	bl	80087c8 <HAL_UART_Transmit>
			if(isBleuIOReady)
 8000e04:	4b2c      	ldr	r3, [pc, #176]	; (8000eb8 <handleUartInput+0x1cc>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d003      	beq.n	8000e14 <handleUartInput+0x128>
			{
				writeToDongle((uint8_t*)DONGLE_CMD_AT_ADVSTOP);
 8000e0c:	4831      	ldr	r0, [pc, #196]	; (8000ed4 <handleUartInput+0x1e8>)
 8000e0e:	f00c ff67 	bl	800dce0 <writeToDongle>
 8000e12:	e00f      	b.n	8000e34 <handleUartInput+0x148>
			} else
			{
				uart_buf_len = sprintf(uart_tx_buf, BLEUIO_NOT_READY_MSG);
 8000e14:	492a      	ldr	r1, [pc, #168]	; (8000ec0 <handleUartInput+0x1d4>)
 8000e16:	4825      	ldr	r0, [pc, #148]	; (8000eac <handleUartInput+0x1c0>)
 8000e18:	f00d fc04 	bl	800e624 <siprintf>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	4a24      	ldr	r2, [pc, #144]	; (8000eb0 <handleUartInput+0x1c4>)
 8000e20:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000e22:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <handleUartInput+0x1c4>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2c:	491f      	ldr	r1, [pc, #124]	; (8000eac <handleUartInput+0x1c0>)
 8000e2e:	4821      	ldr	r0, [pc, #132]	; (8000eb4 <handleUartInput+0x1c8>)
 8000e30:	f007 fcca 	bl	80087c8 <HAL_UART_Transmit>
			}
			uartStatus = UART_RX_NONE;
 8000e34:	4b23      	ldr	r3, [pc, #140]	; (8000ec4 <handleUartInput+0x1d8>)
 8000e36:	22ff      	movs	r2, #255	; 0xff
 8000e38:	701a      	strb	r2, [r3, #0]
			break;
 8000e3a:	e031      	b.n	8000ea0 <handleUartInput+0x1b4>
		}

		case UART_RX_3:
		{
			lcd_clear();
 8000e3c:	f000 f96e 	bl	800111c <lcd_clear>
			HAL_Delay(100); // in ms
 8000e40:	2064      	movs	r0, #100	; 0x64
 8000e42:	f000 fdb7 	bl	80019b4 <HAL_Delay>
			uartStatus = UART_RX_NONE;
 8000e46:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <handleUartInput+0x1d8>)
 8000e48:	22ff      	movs	r2, #255	; 0xff
 8000e4a:	701a      	strb	r2, [r3, #0]
			break;
 8000e4c:	e028      	b.n	8000ea0 <handleUartInput+0x1b4>
	    }

		case UART_RX_4:
		{
			sendbuff[1]=(uint8_t)(0x4B);
 8000e4e:	4b22      	ldr	r3, [pc, #136]	; (8000ed8 <handleUartInput+0x1ec>)
 8000e50:	224b      	movs	r2, #75	; 0x4b
 8000e52:	705a      	strb	r2, [r3, #1]
			sendbuff[0]=(uint8_t)(0xFE);
 8000e54:	4b20      	ldr	r3, [pc, #128]	; (8000ed8 <handleUartInput+0x1ec>)
 8000e56:	22fe      	movs	r2, #254	; 0xfe
 8000e58:	701a      	strb	r2, [r3, #0]
			err0r=HAL_I2C_Master_Transmit(&hi2c2,(uint16_t)(I2C_ADDR),sendbuff,2,HAL_MAX_DELAY);
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	2302      	movs	r3, #2
 8000e62:	4a1d      	ldr	r2, [pc, #116]	; (8000ed8 <handleUartInput+0x1ec>)
 8000e64:	2150      	movs	r1, #80	; 0x50
 8000e66:	481d      	ldr	r0, [pc, #116]	; (8000edc <handleUartInput+0x1f0>)
 8000e68:	f003 ff0e 	bl	8004c88 <HAL_I2C_Master_Transmit>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	461a      	mov	r2, r3
 8000e70:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <handleUartInput+0x1f4>)
 8000e72:	701a      	strb	r2, [r3, #0]

			HAL_Delay(500); // in ms
 8000e74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e78:	f000 fd9c 	bl	80019b4 <HAL_Delay>
			uartStatus = UART_RX_NONE;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <handleUartInput+0x1d8>)
 8000e7e:	22ff      	movs	r2, #255	; 0xff
 8000e80:	701a      	strb	r2, [r3, #0]
		    break;
 8000e82:	e00d      	b.n	8000ea0 <handleUartInput+0x1b4>
		}

		case UART_RX_5:
		{
			lcd_wellcome_msg();
 8000e84:	f000 f9ac 	bl	80011e0 <lcd_wellcome_msg>
			uartStatus = UART_RX_NONE;
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <handleUartInput+0x1d8>)
 8000e8a:	22ff      	movs	r2, #255	; 0xff
 8000e8c:	701a      	strb	r2, [r3, #0]
			break;
 8000e8e:	e007      	b.n	8000ea0 <handleUartInput+0x1b4>
		}

		case UART_RX_6:
		{
			lcd_off();
 8000e90:	f000 f924 	bl	80010dc <lcd_off>
			break;
 8000e94:	e004      	b.n	8000ea0 <handleUartInput+0x1b4>
			break;
		}

		default:
		{
			uartStatus = UART_RX_NONE;
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <handleUartInput+0x1d8>)
 8000e98:	22ff      	movs	r2, #255	; 0xff
 8000e9a:	701a      	strb	r2, [r3, #0]
			break;
 8000e9c:	e000      	b.n	8000ea0 <handleUartInput+0x1b4>
			break;
 8000e9e:	bf00      	nop
		}
	}
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	0800ee34 	.word	0x0800ee34
 8000eac:	24000170 	.word	0x24000170
 8000eb0:	24000420 	.word	0x24000420
 8000eb4:	24000390 	.word	0x24000390
 8000eb8:	24000424 	.word	0x24000424
 8000ebc:	0800ee44 	.word	0x0800ee44
 8000ec0:	0800ee4c 	.word	0x0800ee4c
 8000ec4:	2400026a 	.word	0x2400026a
 8000ec8:	0800ee68 	.word	0x0800ee68
 8000ecc:	0800ee24 	.word	0x0800ee24
 8000ed0:	0800ee78 	.word	0x0800ee78
 8000ed4:	0800ee88 	.word	0x0800ee88
 8000ed8:	24000274 	.word	0x24000274
 8000edc:	24000428 	.word	0x24000428
 8000ee0:	2400062c 	.word	0x2400062c

08000ee4 <dongle_interpreter>:
/**
  * @brief Simple dongle interpreter
  * @retval None
  */
void dongle_interpreter(uint8_t * input)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]

	if(strlen((char *)input) != 0)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d062      	beq.n	8000fba <dongle_interpreter+0xd6>
	{
		if(strstr((char *)input, "\r\nADVERTISING...") != NULL)
 8000ef4:	4935      	ldr	r1, [pc, #212]	; (8000fcc <dongle_interpreter+0xe8>)
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f00d fbbc 	bl	800e674 <strstr>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d002      	beq.n	8000f08 <dongle_interpreter+0x24>
		{
			isAdvertising = true;
 8000f02:	4b33      	ldr	r3, [pc, #204]	; (8000fd0 <dongle_interpreter+0xec>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	701a      	strb	r2, [r3, #0]
		}
		if(strstr((char *)input, "\r\nADVERTISING STOPPED") != NULL)
 8000f08:	4932      	ldr	r1, [pc, #200]	; (8000fd4 <dongle_interpreter+0xf0>)
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f00d fbb2 	bl	800e674 <strstr>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d002      	beq.n	8000f1c <dongle_interpreter+0x38>
		{
			isAdvertising = false;
 8000f16:	4b2e      	ldr	r3, [pc, #184]	; (8000fd0 <dongle_interpreter+0xec>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
		}
		if(strstr((char *)input, "\r\nCONNECTED") != NULL)
 8000f1c:	492e      	ldr	r1, [pc, #184]	; (8000fd8 <dongle_interpreter+0xf4>)
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f00d fba8 	bl	800e674 <strstr>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d007      	beq.n	8000f3a <dongle_interpreter+0x56>
		{
			isConnected = true;
 8000f2a:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <dongle_interpreter+0xf8>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	2102      	movs	r1, #2
 8000f34:	482a      	ldr	r0, [pc, #168]	; (8000fe0 <dongle_interpreter+0xfc>)
 8000f36:	f002 f9c7 	bl	80032c8 <HAL_GPIO_WritePin>
		}
		if(strstr((char *)input, "\r\nDISCONNECTED") != NULL)
 8000f3a:	492a      	ldr	r1, [pc, #168]	; (8000fe4 <dongle_interpreter+0x100>)
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f00d fb99 	bl	800e674 <strstr>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d007      	beq.n	8000f58 <dongle_interpreter+0x74>
		{
			isConnected = false;
 8000f48:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <dongle_interpreter+0xf8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2102      	movs	r1, #2
 8000f52:	4823      	ldr	r0, [pc, #140]	; (8000fe0 <dongle_interpreter+0xfc>)
 8000f54:	f002 f9b8 	bl	80032c8 <HAL_GPIO_WritePin>
		}


		if(strstr((char *)input, "L=0") != NULL)
 8000f58:	4923      	ldr	r1, [pc, #140]	; (8000fe8 <dongle_interpreter+0x104>)
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f00d fb8a 	bl	800e674 <strstr>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d017      	beq.n	8000f96 <dongle_interpreter+0xb2>
		{

			isLightBulbOn = false;
 8000f66:	4b21      	ldr	r3, [pc, #132]	; (8000fec <dongle_interpreter+0x108>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
			//HAL_GPIO_WritePin(Lightbulb_GPIO_Port, Lightbulb_Pin, GPIO_PIN_RESET);
			lcd_clear();
 8000f6c:	f000 f8d6 	bl	800111c <lcd_clear>

			writeToDongle((uint8_t*)DONGLE_SEND_LIGHT_OFF);
 8000f70:	481f      	ldr	r0, [pc, #124]	; (8000ff0 <dongle_interpreter+0x10c>)
 8000f72:	f00c feb5 	bl	800dce0 <writeToDongle>

			uart_buf_len = sprintf(uart_tx_buf, "\r\nClear screen\r\n");
 8000f76:	491f      	ldr	r1, [pc, #124]	; (8000ff4 <dongle_interpreter+0x110>)
 8000f78:	481f      	ldr	r0, [pc, #124]	; (8000ff8 <dongle_interpreter+0x114>)
 8000f7a:	f00d fb53 	bl	800e624 <siprintf>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4a1e      	ldr	r2, [pc, #120]	; (8000ffc <dongle_interpreter+0x118>)
 8000f82:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000f84:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <dongle_interpreter+0x118>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8e:	491a      	ldr	r1, [pc, #104]	; (8000ff8 <dongle_interpreter+0x114>)
 8000f90:	481b      	ldr	r0, [pc, #108]	; (8001000 <dongle_interpreter+0x11c>)
 8000f92:	f007 fc19 	bl	80087c8 <HAL_UART_Transmit>
		}

		if(strstr((char *)input, "L=1") != NULL)
 8000f96:	491b      	ldr	r1, [pc, #108]	; (8001004 <dongle_interpreter+0x120>)
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f00d fb6b 	bl	800e674 <strstr>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d00a      	beq.n	8000fba <dongle_interpreter+0xd6>
		{
				isLightBulbOn = true;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <dongle_interpreter+0x108>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	701a      	strb	r2, [r3, #0]
				writeToDongle((uint8_t*)DONGLE_SEND_LIGHT_ON);
 8000faa:	4817      	ldr	r0, [pc, #92]	; (8001008 <dongle_interpreter+0x124>)
 8000fac:	f00c fe98 	bl	800dce0 <writeToDongle>


				lcd_clear();
 8000fb0:	f000 f8b4 	bl	800111c <lcd_clear>

				lcd_write(input);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f000 f8d3 	bl	8001160 <lcd_write>

		}

	}
	memset(&dongle_response, 0, RSP_SIZE);
 8000fba:	22f4      	movs	r2, #244	; 0xf4
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4813      	ldr	r0, [pc, #76]	; (800100c <dongle_interpreter+0x128>)
 8000fc0:	f00d fa6e 	bl	800e4a0 <memset>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	0800ee98 	.word	0x0800ee98
 8000fd0:	2400056d 	.word	0x2400056d
 8000fd4:	0800eeac 	.word	0x0800eeac
 8000fd8:	0800eec4 	.word	0x0800eec4
 8000fdc:	24000474 	.word	0x24000474
 8000fe0:	58021000 	.word	0x58021000
 8000fe4:	0800eed0 	.word	0x0800eed0
 8000fe8:	0800eee0 	.word	0x0800eee0
 8000fec:	2400056c 	.word	0x2400056c
 8000ff0:	0800eee4 	.word	0x0800eee4
 8000ff4:	0800eefc 	.word	0x0800eefc
 8000ff8:	24000170 	.word	0x24000170
 8000ffc:	24000420 	.word	0x24000420
 8001000:	24000390 	.word	0x24000390
 8001004:	0800ef10 	.word	0x0800ef10
 8001008:	0800ef14 	.word	0x0800ef14
 800100c:	2400029c 	.word	0x2400029c

08001010 <init_lcd>:


/********************************************************************
 init lcd
********************************************************************/
void init_lcd(void){
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af02      	add	r7, sp, #8

	lcd_on();
 8001016:	f000 f841 	bl	800109c <lcd_on>

	HAL_Delay(500); // in ms
 800101a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800101e:	f000 fcc9 	bl	80019b4 <HAL_Delay>

	// Set Backlight Level
    sendbuff[2] = 8;    // backlight 1 - 15
 8001022:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <init_lcd+0x80>)
 8001024:	2208      	movs	r2, #8
 8001026:	709a      	strb	r2, [r3, #2]
	sendbuff[1] = 0x53;
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <init_lcd+0x80>)
 800102a:	2253      	movs	r2, #83	; 0x53
 800102c:	705a      	strb	r2, [r3, #1]
	sendbuff[0] = 0xFE;
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <init_lcd+0x80>)
 8001030:	22fe      	movs	r2, #254	; 0xfe
 8001032:	701a      	strb	r2, [r3, #0]

	err0r=HAL_I2C_Master_Transmit(&hi2c2,(uint16_t)(I2C_ADDR),sendbuff,3,HAL_MAX_DELAY);
 8001034:	f04f 33ff 	mov.w	r3, #4294967295
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	2303      	movs	r3, #3
 800103c:	4a14      	ldr	r2, [pc, #80]	; (8001090 <init_lcd+0x80>)
 800103e:	2150      	movs	r1, #80	; 0x50
 8001040:	4814      	ldr	r0, [pc, #80]	; (8001094 <init_lcd+0x84>)
 8001042:	f003 fe21 	bl	8004c88 <HAL_I2C_Master_Transmit>
 8001046:	4603      	mov	r3, r0
 8001048:	461a      	mov	r2, r3
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <init_lcd+0x88>)
 800104c:	701a      	strb	r2, [r3, #0]

	HAL_Delay(500); // in ms
 800104e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001052:	f000 fcaf 	bl	80019b4 <HAL_Delay>

	// Set Contrast
	sendbuff[2] = 40;    // contrast 1 - 50
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <init_lcd+0x80>)
 8001058:	2228      	movs	r2, #40	; 0x28
 800105a:	709a      	strb	r2, [r3, #2]
	sendbuff[1] = 0x52;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <init_lcd+0x80>)
 800105e:	2252      	movs	r2, #82	; 0x52
 8001060:	705a      	strb	r2, [r3, #1]
	sendbuff[0] = 0xFE;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <init_lcd+0x80>)
 8001064:	22fe      	movs	r2, #254	; 0xfe
 8001066:	701a      	strb	r2, [r3, #0]
	err0r=HAL_I2C_Master_Transmit(&hi2c2,(uint16_t)(I2C_ADDR),sendbuff,3,HAL_MAX_DELAY);
 8001068:	f04f 33ff 	mov.w	r3, #4294967295
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2303      	movs	r3, #3
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <init_lcd+0x80>)
 8001072:	2150      	movs	r1, #80	; 0x50
 8001074:	4807      	ldr	r0, [pc, #28]	; (8001094 <init_lcd+0x84>)
 8001076:	f003 fe07 	bl	8004c88 <HAL_I2C_Master_Transmit>
 800107a:	4603      	mov	r3, r0
 800107c:	461a      	mov	r2, r3
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <init_lcd+0x88>)
 8001080:	701a      	strb	r2, [r3, #0]

	HAL_Delay(500); // in ms
 8001082:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001086:	f000 fc95 	bl	80019b4 <HAL_Delay>

}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	24000274 	.word	0x24000274
 8001094:	24000428 	.word	0x24000428
 8001098:	2400062c 	.word	0x2400062c

0800109c <lcd_on>:

/********************************************************************
 lcd on
********************************************************************/

void lcd_on(void){
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af02      	add	r7, sp, #8
	// set display on
	sendbuff[1]=(uint8_t)(0x41);
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <lcd_on+0x34>)
 80010a4:	2241      	movs	r2, #65	; 0x41
 80010a6:	705a      	strb	r2, [r3, #1]
	sendbuff[0]=(uint8_t)(0xFE);
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <lcd_on+0x34>)
 80010aa:	22fe      	movs	r2, #254	; 0xfe
 80010ac:	701a      	strb	r2, [r3, #0]
	err0r=HAL_I2C_Master_Transmit(&hi2c2,(uint16_t)(I2C_ADDR),sendbuff,2,HAL_MAX_DELAY);
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2302      	movs	r3, #2
 80010b6:	4a06      	ldr	r2, [pc, #24]	; (80010d0 <lcd_on+0x34>)
 80010b8:	2150      	movs	r1, #80	; 0x50
 80010ba:	4806      	ldr	r0, [pc, #24]	; (80010d4 <lcd_on+0x38>)
 80010bc:	f003 fde4 	bl	8004c88 <HAL_I2C_Master_Transmit>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <lcd_on+0x3c>)
 80010c6:	701a      	strb	r2, [r3, #0]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	24000274 	.word	0x24000274
 80010d4:	24000428 	.word	0x24000428
 80010d8:	2400062c 	.word	0x2400062c

080010dc <lcd_off>:


/********************************************************************
 lcd off
********************************************************************/
void lcd_off(void){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af02      	add	r7, sp, #8
	// set display on
	sendbuff[1]=(uint8_t)(0x42);
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <lcd_off+0x34>)
 80010e4:	2242      	movs	r2, #66	; 0x42
 80010e6:	705a      	strb	r2, [r3, #1]
	sendbuff[0]=(uint8_t)(0xFE);
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <lcd_off+0x34>)
 80010ea:	22fe      	movs	r2, #254	; 0xfe
 80010ec:	701a      	strb	r2, [r3, #0]
	err0r=HAL_I2C_Master_Transmit(&hi2c2,(uint16_t)(I2C_ADDR),sendbuff,2,HAL_MAX_DELAY);
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2302      	movs	r3, #2
 80010f6:	4a06      	ldr	r2, [pc, #24]	; (8001110 <lcd_off+0x34>)
 80010f8:	2150      	movs	r1, #80	; 0x50
 80010fa:	4806      	ldr	r0, [pc, #24]	; (8001114 <lcd_off+0x38>)
 80010fc:	f003 fdc4 	bl	8004c88 <HAL_I2C_Master_Transmit>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <lcd_off+0x3c>)
 8001106:	701a      	strb	r2, [r3, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	24000274 	.word	0x24000274
 8001114:	24000428 	.word	0x24000428
 8001118:	2400062c 	.word	0x2400062c

0800111c <lcd_clear>:

/********************************************************************
 lcd clear
********************************************************************/
void lcd_clear(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af02      	add	r7, sp, #8

	sendbuff[1]=(uint8_t)(0x51);
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <lcd_clear+0x38>)
 8001124:	2251      	movs	r2, #81	; 0x51
 8001126:	705a      	strb	r2, [r3, #1]
	sendbuff[0]=(uint8_t)(0xFE);
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <lcd_clear+0x38>)
 800112a:	22fe      	movs	r2, #254	; 0xfe
 800112c:	701a      	strb	r2, [r3, #0]
	err0r=HAL_I2C_Master_Transmit(&hi2c2,(uint16_t)(I2C_ADDR),sendbuff,2,HAL_MAX_DELAY);
 800112e:	f04f 33ff 	mov.w	r3, #4294967295
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2302      	movs	r3, #2
 8001136:	4a07      	ldr	r2, [pc, #28]	; (8001154 <lcd_clear+0x38>)
 8001138:	2150      	movs	r1, #80	; 0x50
 800113a:	4807      	ldr	r0, [pc, #28]	; (8001158 <lcd_clear+0x3c>)
 800113c:	f003 fda4 	bl	8004c88 <HAL_I2C_Master_Transmit>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <lcd_clear+0x40>)
 8001146:	701a      	strb	r2, [r3, #0]

	HAL_Delay(100); // in ms
 8001148:	2064      	movs	r0, #100	; 0x64
 800114a:	f000 fc33 	bl	80019b4 <HAL_Delay>
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	24000274 	.word	0x24000274
 8001158:	24000428 	.word	0x24000428
 800115c:	2400062c 	.word	0x2400062c

08001160 <lcd_write>:

/********************************************************************
 lcd write
********************************************************************/
void lcd_write(uint8_t * input)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af02      	add	r7, sp, #8
 8001166:	6078      	str	r0, [r7, #4]
	int str_len;

	str_len = strlen((char *)input);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff f8b9 	bl	80002e0 <strlen>
 800116e:	4603      	mov	r3, r0
 8001170:	60fb      	str	r3, [r7, #12]
    // copy without "L=1" command
	for (int i = 3, j=0; i < str_len; i++, j++) {	//"Serial LCD Demo"
 8001172:	2303      	movs	r3, #3
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	e00e      	b.n	800119a <lcd_write+0x3a>

		asciibuff[j] = input[i];
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	7819      	ldrb	r1, [r3, #0]
 8001184:	4a13      	ldr	r2, [pc, #76]	; (80011d4 <lcd_write+0x74>)
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4413      	add	r3, r2
 800118a:	460a      	mov	r2, r1
 800118c:	701a      	strb	r2, [r3, #0]
	for (int i = 3, j=0; i < str_len; i++, j++) {	//"Serial LCD Demo"
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	3301      	adds	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	3301      	adds	r3, #1
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	429a      	cmp	r2, r3
 80011a0:	dbec      	blt.n	800117c <lcd_write+0x1c>
	}

	err0r=HAL_I2C_Master_Transmit(&hi2c2,(uint16_t)(I2C_ADDR),asciibuff,str_len-3,HAL_MAX_DELAY);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	3b03      	subs	r3, #3
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	f04f 32ff 	mov.w	r2, #4294967295
 80011ae:	9200      	str	r2, [sp, #0]
 80011b0:	4a08      	ldr	r2, [pc, #32]	; (80011d4 <lcd_write+0x74>)
 80011b2:	2150      	movs	r1, #80	; 0x50
 80011b4:	4808      	ldr	r0, [pc, #32]	; (80011d8 <lcd_write+0x78>)
 80011b6:	f003 fd67 	bl	8004c88 <HAL_I2C_Master_Transmit>
 80011ba:	4603      	mov	r3, r0
 80011bc:	461a      	mov	r2, r3
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <lcd_write+0x7c>)
 80011c0:	701a      	strb	r2, [r3, #0]

	HAL_Delay(500); // in ms
 80011c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011c6:	f000 fbf5 	bl	80019b4 <HAL_Delay>

}
 80011ca:	bf00      	nop
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	24000278 	.word	0x24000278
 80011d8:	24000428 	.word	0x24000428
 80011dc:	2400062c 	.word	0x2400062c

080011e0 <lcd_wellcome_msg>:

/********************************************************************
 lcd wellcome message
********************************************************************/
void lcd_wellcome_msg(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af02      	add	r7, sp, #8
	asciibuff[0]=(uint8_t)(0x57);
 80011e6:	4b16      	ldr	r3, [pc, #88]	; (8001240 <lcd_wellcome_msg+0x60>)
 80011e8:	2257      	movs	r2, #87	; 0x57
 80011ea:	701a      	strb	r2, [r3, #0]
	asciibuff[1]=(uint8_t)(0x45);
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <lcd_wellcome_msg+0x60>)
 80011ee:	2245      	movs	r2, #69	; 0x45
 80011f0:	705a      	strb	r2, [r3, #1]
	asciibuff[2]=(uint8_t)(0x4C);
 80011f2:	4b13      	ldr	r3, [pc, #76]	; (8001240 <lcd_wellcome_msg+0x60>)
 80011f4:	224c      	movs	r2, #76	; 0x4c
 80011f6:	709a      	strb	r2, [r3, #2]
	asciibuff[3]=(uint8_t)(0x4C);
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <lcd_wellcome_msg+0x60>)
 80011fa:	224c      	movs	r2, #76	; 0x4c
 80011fc:	70da      	strb	r2, [r3, #3]
	asciibuff[4]=(uint8_t)(0x43);
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <lcd_wellcome_msg+0x60>)
 8001200:	2243      	movs	r2, #67	; 0x43
 8001202:	711a      	strb	r2, [r3, #4]
	asciibuff[5]=(uint8_t)(0x4F);
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <lcd_wellcome_msg+0x60>)
 8001206:	224f      	movs	r2, #79	; 0x4f
 8001208:	715a      	strb	r2, [r3, #5]
	asciibuff[6]=(uint8_t)(0x4D);
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <lcd_wellcome_msg+0x60>)
 800120c:	224d      	movs	r2, #77	; 0x4d
 800120e:	719a      	strb	r2, [r3, #6]
	asciibuff[7]=(uint8_t)(0x45);
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <lcd_wellcome_msg+0x60>)
 8001212:	2245      	movs	r2, #69	; 0x45
 8001214:	71da      	strb	r2, [r3, #7]
	err0r=HAL_I2C_Master_Transmit(&hi2c2,(uint16_t)(I2C_ADDR),asciibuff,8,HAL_MAX_DELAY);
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2308      	movs	r3, #8
 800121e:	4a08      	ldr	r2, [pc, #32]	; (8001240 <lcd_wellcome_msg+0x60>)
 8001220:	2150      	movs	r1, #80	; 0x50
 8001222:	4808      	ldr	r0, [pc, #32]	; (8001244 <lcd_wellcome_msg+0x64>)
 8001224:	f003 fd30 	bl	8004c88 <HAL_I2C_Master_Transmit>
 8001228:	4603      	mov	r3, r0
 800122a:	461a      	mov	r2, r3
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <lcd_wellcome_msg+0x68>)
 800122e:	701a      	strb	r2, [r3, #0]

	HAL_Delay(500); // in ms
 8001230:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001234:	f000 fbbe 	bl	80019b4 <HAL_Delay>
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	24000278 	.word	0x24000278
 8001244:	24000428 	.word	0x24000428
 8001248:	2400062c 	.word	0x2400062c

0800124c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
}
 8001252:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001254:	e7fe      	b.n	8001254 <Error_Handler+0x8>
	...

08001258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_MspInit+0x30>)
 8001260:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001264:	4a08      	ldr	r2, [pc, #32]	; (8001288 <HAL_MspInit+0x30>)
 8001266:	f043 0302 	orr.w	r3, r3, #2
 800126a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_MspInit+0x30>)
 8001270:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	58024400 	.word	0x58024400

0800128c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08e      	sub	sp, #56	; 0x38
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a59      	ldr	r2, [pc, #356]	; (8001410 <HAL_ETH_MspInit+0x184>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	f040 80ab 	bne.w	8001406 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80012b0:	4b58      	ldr	r3, [pc, #352]	; (8001414 <HAL_ETH_MspInit+0x188>)
 80012b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012b6:	4a57      	ldr	r2, [pc, #348]	; (8001414 <HAL_ETH_MspInit+0x188>)
 80012b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012bc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012c0:	4b54      	ldr	r3, [pc, #336]	; (8001414 <HAL_ETH_MspInit+0x188>)
 80012c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012ca:	623b      	str	r3, [r7, #32]
 80012cc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80012ce:	4b51      	ldr	r3, [pc, #324]	; (8001414 <HAL_ETH_MspInit+0x188>)
 80012d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012d4:	4a4f      	ldr	r2, [pc, #316]	; (8001414 <HAL_ETH_MspInit+0x188>)
 80012d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012da:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012de:	4b4d      	ldr	r3, [pc, #308]	; (8001414 <HAL_ETH_MspInit+0x188>)
 80012e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e8:	61fb      	str	r3, [r7, #28]
 80012ea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80012ec:	4b49      	ldr	r3, [pc, #292]	; (8001414 <HAL_ETH_MspInit+0x188>)
 80012ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012f2:	4a48      	ldr	r2, [pc, #288]	; (8001414 <HAL_ETH_MspInit+0x188>)
 80012f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012fc:	4b45      	ldr	r3, [pc, #276]	; (8001414 <HAL_ETH_MspInit+0x188>)
 80012fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800130a:	4b42      	ldr	r3, [pc, #264]	; (8001414 <HAL_ETH_MspInit+0x188>)
 800130c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001310:	4a40      	ldr	r2, [pc, #256]	; (8001414 <HAL_ETH_MspInit+0x188>)
 8001312:	f043 0304 	orr.w	r3, r3, #4
 8001316:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800131a:	4b3e      	ldr	r3, [pc, #248]	; (8001414 <HAL_ETH_MspInit+0x188>)
 800131c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001328:	4b3a      	ldr	r3, [pc, #232]	; (8001414 <HAL_ETH_MspInit+0x188>)
 800132a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132e:	4a39      	ldr	r2, [pc, #228]	; (8001414 <HAL_ETH_MspInit+0x188>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001338:	4b36      	ldr	r3, [pc, #216]	; (8001414 <HAL_ETH_MspInit+0x188>)
 800133a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	4b33      	ldr	r3, [pc, #204]	; (8001414 <HAL_ETH_MspInit+0x188>)
 8001348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134c:	4a31      	ldr	r2, [pc, #196]	; (8001414 <HAL_ETH_MspInit+0x188>)
 800134e:	f043 0302 	orr.w	r3, r3, #2
 8001352:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001356:	4b2f      	ldr	r3, [pc, #188]	; (8001414 <HAL_ETH_MspInit+0x188>)
 8001358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001364:	4b2b      	ldr	r3, [pc, #172]	; (8001414 <HAL_ETH_MspInit+0x188>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136a:	4a2a      	ldr	r2, [pc, #168]	; (8001414 <HAL_ETH_MspInit+0x188>)
 800136c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001370:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001374:	4b27      	ldr	r3, [pc, #156]	; (8001414 <HAL_ETH_MspInit+0x188>)
 8001376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001382:	2332      	movs	r3, #50	; 0x32
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001392:	230b      	movs	r3, #11
 8001394:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139a:	4619      	mov	r1, r3
 800139c:	481e      	ldr	r0, [pc, #120]	; (8001418 <HAL_ETH_MspInit+0x18c>)
 800139e:	f001 fde3 	bl	8002f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80013a2:	2386      	movs	r3, #134	; 0x86
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013b2:	230b      	movs	r3, #11
 80013b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	4619      	mov	r1, r3
 80013bc:	4817      	ldr	r0, [pc, #92]	; (800141c <HAL_ETH_MspInit+0x190>)
 80013be:	f001 fdd3 	bl	8002f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013d4:	230b      	movs	r3, #11
 80013d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013dc:	4619      	mov	r1, r3
 80013de:	4810      	ldr	r0, [pc, #64]	; (8001420 <HAL_ETH_MspInit+0x194>)
 80013e0:	f001 fdc2 	bl	8002f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80013e4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013f6:	230b      	movs	r3, #11
 80013f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fe:	4619      	mov	r1, r3
 8001400:	4808      	ldr	r0, [pc, #32]	; (8001424 <HAL_ETH_MspInit+0x198>)
 8001402:	f001 fdb1 	bl	8002f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001406:	bf00      	nop
 8001408:	3738      	adds	r7, #56	; 0x38
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40028000 	.word	0x40028000
 8001414:	58024400 	.word	0x58024400
 8001418:	58020800 	.word	0x58020800
 800141c:	58020000 	.word	0x58020000
 8001420:	58020400 	.word	0x58020400
 8001424:	58021800 	.word	0x58021800

08001428 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b0b8      	sub	sp, #224	; 0xe0
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	22bc      	movs	r2, #188	; 0xbc
 8001446:	2100      	movs	r1, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f00d f829 	bl	800e4a0 <memset>
  if(hi2c->Instance==I2C2)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a2c      	ldr	r2, [pc, #176]	; (8001504 <HAL_I2C_MspInit+0xdc>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d151      	bne.n	80014fc <HAL_I2C_MspInit+0xd4>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001458:	2308      	movs	r3, #8
 800145a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001462:	f107 0310 	add.w	r3, r7, #16
 8001466:	4618      	mov	r0, r3
 8001468:	f005 fdfc 	bl	8007064 <HAL_RCCEx_PeriphCLKConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001472:	f7ff feeb 	bl	800124c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001476:	4b24      	ldr	r3, [pc, #144]	; (8001508 <HAL_I2C_MspInit+0xe0>)
 8001478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147c:	4a22      	ldr	r2, [pc, #136]	; (8001508 <HAL_I2C_MspInit+0xe0>)
 800147e:	f043 0320 	orr.w	r3, r3, #32
 8001482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001486:	4b20      	ldr	r3, [pc, #128]	; (8001508 <HAL_I2C_MspInit+0xe0>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148c:	f003 0320 	and.w	r3, r3, #32
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001494:	2303      	movs	r3, #3
 8001496:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800149a:	2312      	movs	r3, #18
 800149c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014ac:	2304      	movs	r3, #4
 80014ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014b2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014b6:	4619      	mov	r1, r3
 80014b8:	4814      	ldr	r0, [pc, #80]	; (800150c <HAL_I2C_MspInit+0xe4>)
 80014ba:	f001 fd55 	bl	8002f68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_I2C_MspInit+0xe0>)
 80014c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014c4:	4a10      	ldr	r2, [pc, #64]	; (8001508 <HAL_I2C_MspInit+0xe0>)
 80014c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <HAL_I2C_MspInit+0xe0>)
 80014d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	2100      	movs	r1, #0
 80014e0:	2021      	movs	r0, #33	; 0x21
 80014e2:	f000 fb86 	bl	8001bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80014e6:	2021      	movs	r0, #33	; 0x21
 80014e8:	f000 fb9d 	bl	8001c26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2100      	movs	r1, #0
 80014f0:	2022      	movs	r0, #34	; 0x22
 80014f2:	f000 fb7e 	bl	8001bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80014f6:	2022      	movs	r0, #34	; 0x22
 80014f8:	f000 fb95 	bl	8001c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014fc:	bf00      	nop
 80014fe:	37e0      	adds	r7, #224	; 0xe0
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40005800 	.word	0x40005800
 8001508:	58024400 	.word	0x58024400
 800150c:	58021400 	.word	0x58021400

08001510 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b0b8      	sub	sp, #224	; 0xe0
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001528:	f107 0310 	add.w	r3, r7, #16
 800152c:	22bc      	movs	r2, #188	; 0xbc
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f00c ffb5 	bl	800e4a0 <memset>
  if(huart->Instance==USART3)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a29      	ldr	r2, [pc, #164]	; (80015e0 <HAL_UART_MspInit+0xd0>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d14a      	bne.n	80015d6 <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001540:	2302      	movs	r3, #2
 8001542:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001544:	2300      	movs	r3, #0
 8001546:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800154a:	f107 0310 	add.w	r3, r7, #16
 800154e:	4618      	mov	r0, r3
 8001550:	f005 fd88 	bl	8007064 <HAL_RCCEx_PeriphCLKConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800155a:	f7ff fe77 	bl	800124c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800155e:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <HAL_UART_MspInit+0xd4>)
 8001560:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001564:	4a1f      	ldr	r2, [pc, #124]	; (80015e4 <HAL_UART_MspInit+0xd4>)
 8001566:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800156a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800156e:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <HAL_UART_MspInit+0xd4>)
 8001570:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001574:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <HAL_UART_MspInit+0xd4>)
 800157e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001582:	4a18      	ldr	r2, [pc, #96]	; (80015e4 <HAL_UART_MspInit+0xd4>)
 8001584:	f043 0308 	orr.w	r3, r3, #8
 8001588:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800158c:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_UART_MspInit+0xd4>)
 800158e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800159a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800159e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015b4:	2307      	movs	r3, #7
 80015b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015be:	4619      	mov	r1, r3
 80015c0:	4809      	ldr	r0, [pc, #36]	; (80015e8 <HAL_UART_MspInit+0xd8>)
 80015c2:	f001 fcd1 	bl	8002f68 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	2027      	movs	r0, #39	; 0x27
 80015cc:	f000 fb11 	bl	8001bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015d0:	2027      	movs	r0, #39	; 0x27
 80015d2:	f000 fb28 	bl	8001c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015d6:	bf00      	nop
 80015d8:	37e0      	adds	r7, #224	; 0xe0
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40004800 	.word	0x40004800
 80015e4:	58024400 	.word	0x58024400
 80015e8:	58020c00 	.word	0x58020c00

080015ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <NMI_Handler+0x4>

080015f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <HardFault_Handler+0x4>

080015f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <MemManage_Handler+0x4>

080015fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <BusFault_Handler+0x4>

08001604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <UsageFault_Handler+0x4>

0800160a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001638:	f000 f99c 	bl	8001974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}

08001640 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <I2C2_EV_IRQHandler+0x10>)
 8001646:	f003 fc13 	bl	8004e70 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	24000428 	.word	0x24000428

08001654 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <I2C2_ER_IRQHandler+0x10>)
 800165a:	f003 fc23 	bl	8004ea4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	24000428 	.word	0x24000428

08001668 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <USART3_IRQHandler+0x10>)
 800166e:	f007 f997 	bl	80089a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	24000390 	.word	0x24000390

0800167c <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8001682:	f002 f8a5 	bl	80037d0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	24000e0c 	.word	0x24000e0c

08001690 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001694:	4802      	ldr	r0, [pc, #8]	; (80016a0 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 8001696:	f002 f89b 	bl	80037d0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	24000e0c 	.word	0x24000e0c

080016a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <OTG_FS_IRQHandler+0x10>)
 80016aa:	f002 f891 	bl	80037d0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	24000e0c 	.word	0x24000e0c

080016b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c0:	4a14      	ldr	r2, [pc, #80]	; (8001714 <_sbrk+0x5c>)
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <_sbrk+0x60>)
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <_sbrk+0x64>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d102      	bne.n	80016da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <_sbrk+0x64>)
 80016d6:	4a12      	ldr	r2, [pc, #72]	; (8001720 <_sbrk+0x68>)
 80016d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <_sbrk+0x64>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d207      	bcs.n	80016f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e8:	f00c fea0 	bl	800e42c <__errno>
 80016ec:	4603      	mov	r3, r0
 80016ee:	220c      	movs	r2, #12
 80016f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
 80016f6:	e009      	b.n	800170c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <_sbrk+0x64>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	4a05      	ldr	r2, [pc, #20]	; (800171c <_sbrk+0x64>)
 8001708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170a:	68fb      	ldr	r3, [r7, #12]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	24080000 	.word	0x24080000
 8001718:	00000400 	.word	0x00000400
 800171c:	24000288 	.word	0x24000288
 8001720:	24001120 	.word	0x24001120

08001724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001728:	4b39      	ldr	r3, [pc, #228]	; (8001810 <SystemInit+0xec>)
 800172a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800172e:	4a38      	ldr	r2, [pc, #224]	; (8001810 <SystemInit+0xec>)
 8001730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001738:	4b36      	ldr	r3, [pc, #216]	; (8001814 <SystemInit+0xf0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 030f 	and.w	r3, r3, #15
 8001740:	2b06      	cmp	r3, #6
 8001742:	d807      	bhi.n	8001754 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001744:	4b33      	ldr	r3, [pc, #204]	; (8001814 <SystemInit+0xf0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f023 030f 	bic.w	r3, r3, #15
 800174c:	4a31      	ldr	r2, [pc, #196]	; (8001814 <SystemInit+0xf0>)
 800174e:	f043 0307 	orr.w	r3, r3, #7
 8001752:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001754:	4b30      	ldr	r3, [pc, #192]	; (8001818 <SystemInit+0xf4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a2f      	ldr	r2, [pc, #188]	; (8001818 <SystemInit+0xf4>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001760:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <SystemInit+0xf4>)
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001766:	4b2c      	ldr	r3, [pc, #176]	; (8001818 <SystemInit+0xf4>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	492b      	ldr	r1, [pc, #172]	; (8001818 <SystemInit+0xf4>)
 800176c:	4b2b      	ldr	r3, [pc, #172]	; (800181c <SystemInit+0xf8>)
 800176e:	4013      	ands	r3, r2
 8001770:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001772:	4b28      	ldr	r3, [pc, #160]	; (8001814 <SystemInit+0xf0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0308 	and.w	r3, r3, #8
 800177a:	2b00      	cmp	r3, #0
 800177c:	d007      	beq.n	800178e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800177e:	4b25      	ldr	r3, [pc, #148]	; (8001814 <SystemInit+0xf0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f023 030f 	bic.w	r3, r3, #15
 8001786:	4a23      	ldr	r2, [pc, #140]	; (8001814 <SystemInit+0xf0>)
 8001788:	f043 0307 	orr.w	r3, r3, #7
 800178c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800178e:	4b22      	ldr	r3, [pc, #136]	; (8001818 <SystemInit+0xf4>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001794:	4b20      	ldr	r3, [pc, #128]	; (8001818 <SystemInit+0xf4>)
 8001796:	2200      	movs	r2, #0
 8001798:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800179a:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <SystemInit+0xf4>)
 800179c:	2200      	movs	r2, #0
 800179e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80017a0:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <SystemInit+0xf4>)
 80017a2:	4a1f      	ldr	r2, [pc, #124]	; (8001820 <SystemInit+0xfc>)
 80017a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80017a6:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <SystemInit+0xf4>)
 80017a8:	4a1e      	ldr	r2, [pc, #120]	; (8001824 <SystemInit+0x100>)
 80017aa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80017ac:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <SystemInit+0xf4>)
 80017ae:	4a1e      	ldr	r2, [pc, #120]	; (8001828 <SystemInit+0x104>)
 80017b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80017b2:	4b19      	ldr	r3, [pc, #100]	; (8001818 <SystemInit+0xf4>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80017b8:	4b17      	ldr	r3, [pc, #92]	; (8001818 <SystemInit+0xf4>)
 80017ba:	4a1b      	ldr	r2, [pc, #108]	; (8001828 <SystemInit+0x104>)
 80017bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80017be:	4b16      	ldr	r3, [pc, #88]	; (8001818 <SystemInit+0xf4>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80017c4:	4b14      	ldr	r3, [pc, #80]	; (8001818 <SystemInit+0xf4>)
 80017c6:	4a18      	ldr	r2, [pc, #96]	; (8001828 <SystemInit+0x104>)
 80017c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <SystemInit+0xf4>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <SystemInit+0xf4>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a10      	ldr	r2, [pc, #64]	; (8001818 <SystemInit+0xf4>)
 80017d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017dc:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <SystemInit+0xf4>)
 80017de:	2200      	movs	r2, #0
 80017e0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <SystemInit+0x108>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	4b12      	ldr	r3, [pc, #72]	; (8001830 <SystemInit+0x10c>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017ee:	d202      	bcs.n	80017f6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80017f0:	4b10      	ldr	r3, [pc, #64]	; (8001834 <SystemInit+0x110>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <SystemInit+0x114>)
 80017f8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80017fc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <SystemInit+0xec>)
 8001800:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001804:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000ed00 	.word	0xe000ed00
 8001814:	52002000 	.word	0x52002000
 8001818:	58024400 	.word	0x58024400
 800181c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001820:	02020200 	.word	0x02020200
 8001824:	01ff0000 	.word	0x01ff0000
 8001828:	01010280 	.word	0x01010280
 800182c:	5c001000 	.word	0x5c001000
 8001830:	ffff0000 	.word	0xffff0000
 8001834:	51008108 	.word	0x51008108
 8001838:	52004000 	.word	0x52004000

0800183c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800183c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001874 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001840:	f7ff ff70 	bl	8001724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001844:	480c      	ldr	r0, [pc, #48]	; (8001878 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001846:	490d      	ldr	r1, [pc, #52]	; (800187c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001848:	4a0d      	ldr	r2, [pc, #52]	; (8001880 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800184c:	e002      	b.n	8001854 <LoopCopyDataInit>

0800184e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001852:	3304      	adds	r3, #4

08001854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001858:	d3f9      	bcc.n	800184e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800185c:	4c0a      	ldr	r4, [pc, #40]	; (8001888 <LoopFillZerobss+0x22>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001860:	e001      	b.n	8001866 <LoopFillZerobss>

08001862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001864:	3204      	adds	r2, #4

08001866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001868:	d3fb      	bcc.n	8001862 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800186a:	f00c fde5 	bl	800e438 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800186e:	f7fe ff0b 	bl	8000688 <main>
  bx  lr
 8001872:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001874:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001878:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800187c:	24000094 	.word	0x24000094
  ldr r2, =_sidata
 8001880:	0800efc8 	.word	0x0800efc8
  ldr r2, =_sbss
 8001884:	24000154 	.word	0x24000154
  ldr r4, =_ebss
 8001888:	24001120 	.word	0x24001120

0800188c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800188c:	e7fe      	b.n	800188c <ADC3_IRQHandler>
	...

08001890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001896:	2003      	movs	r0, #3
 8001898:	f000 f9a0 	bl	8001bdc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800189c:	f005 fa0c 	bl	8006cb8 <HAL_RCC_GetSysClockFreq>
 80018a0:	4602      	mov	r2, r0
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <HAL_Init+0x68>)
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	0a1b      	lsrs	r3, r3, #8
 80018a8:	f003 030f 	and.w	r3, r3, #15
 80018ac:	4913      	ldr	r1, [pc, #76]	; (80018fc <HAL_Init+0x6c>)
 80018ae:	5ccb      	ldrb	r3, [r1, r3]
 80018b0:	f003 031f 	and.w	r3, r3, #31
 80018b4:	fa22 f303 	lsr.w	r3, r2, r3
 80018b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018ba:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <HAL_Init+0x68>)
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	4a0e      	ldr	r2, [pc, #56]	; (80018fc <HAL_Init+0x6c>)
 80018c4:	5cd3      	ldrb	r3, [r2, r3]
 80018c6:	f003 031f 	and.w	r3, r3, #31
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	fa22 f303 	lsr.w	r3, r2, r3
 80018d0:	4a0b      	ldr	r2, [pc, #44]	; (8001900 <HAL_Init+0x70>)
 80018d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018d4:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <HAL_Init+0x74>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018da:	2000      	movs	r0, #0
 80018dc:	f000 f814 	bl	8001908 <HAL_InitTick>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e002      	b.n	80018f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018ea:	f7ff fcb5 	bl	8001258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	58024400 	.word	0x58024400
 80018fc:	0800ef4c 	.word	0x0800ef4c
 8001900:	24000004 	.word	0x24000004
 8001904:	24000000 	.word	0x24000000

08001908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_InitTick+0x60>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e021      	b.n	8001960 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <HAL_InitTick+0x64>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <HAL_InitTick+0x60>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4619      	mov	r1, r3
 8001926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192a:	fbb3 f3f1 	udiv	r3, r3, r1
 800192e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001932:	4618      	mov	r0, r3
 8001934:	f000 f985 	bl	8001c42 <HAL_SYSTICK_Config>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e00e      	b.n	8001960 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b0f      	cmp	r3, #15
 8001946:	d80a      	bhi.n	800195e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001948:	2200      	movs	r2, #0
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	f04f 30ff 	mov.w	r0, #4294967295
 8001950:	f000 f94f 	bl	8001bf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001954:	4a06      	ldr	r2, [pc, #24]	; (8001970 <HAL_InitTick+0x68>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	e000      	b.n	8001960 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
}
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	2400000c 	.word	0x2400000c
 800196c:	24000000 	.word	0x24000000
 8001970:	24000008 	.word	0x24000008

08001974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_IncTick+0x20>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_IncTick+0x24>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4413      	add	r3, r2
 8001984:	4a04      	ldr	r2, [pc, #16]	; (8001998 <HAL_IncTick+0x24>)
 8001986:	6013      	str	r3, [r2, #0]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	2400000c 	.word	0x2400000c
 8001998:	24000630 	.word	0x24000630

0800199c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return uwTick;
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <HAL_GetTick+0x14>)
 80019a2:	681b      	ldr	r3, [r3, #0]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	24000630 	.word	0x24000630

080019b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019bc:	f7ff ffee 	bl	800199c <HAL_GetTick>
 80019c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019cc:	d005      	beq.n	80019da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ce:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <HAL_Delay+0x44>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4413      	add	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019da:	bf00      	nop
 80019dc:	f7ff ffde 	bl	800199c <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d8f7      	bhi.n	80019dc <HAL_Delay+0x28>
  {
  }
}
 80019ec:	bf00      	nop
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	2400000c 	.word	0x2400000c

080019fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a00:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <HAL_GetREVID+0x14>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	0c1b      	lsrs	r3, r3, #16
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	5c001000 	.word	0x5c001000

08001a14 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001a24:	4904      	ldr	r1, [pc, #16]	; (8001a38 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	604b      	str	r3, [r1, #4]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	58000400 	.word	0x58000400

08001a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <__NVIC_SetPriorityGrouping+0x40>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6a:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <__NVIC_SetPriorityGrouping+0x40>)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	60d3      	str	r3, [r2, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000ed00 	.word	0xe000ed00
 8001a80:	05fa0000 	.word	0x05fa0000

08001a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a88:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <__NVIC_GetPriorityGrouping+0x18>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	0a1b      	lsrs	r3, r3, #8
 8001a8e:	f003 0307 	and.w	r3, r3, #7
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	db0b      	blt.n	8001aca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	f003 021f 	and.w	r2, r3, #31
 8001ab8:	4907      	ldr	r1, [pc, #28]	; (8001ad8 <__NVIC_EnableIRQ+0x38>)
 8001aba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000e100 	.word	0xe000e100

08001adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	6039      	str	r1, [r7, #0]
 8001ae6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ae8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	db0a      	blt.n	8001b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	490c      	ldr	r1, [pc, #48]	; (8001b28 <__NVIC_SetPriority+0x4c>)
 8001af6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001afa:	0112      	lsls	r2, r2, #4
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	440b      	add	r3, r1
 8001b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b04:	e00a      	b.n	8001b1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4908      	ldr	r1, [pc, #32]	; (8001b2c <__NVIC_SetPriority+0x50>)
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	3b04      	subs	r3, #4
 8001b14:	0112      	lsls	r2, r2, #4
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	440b      	add	r3, r1
 8001b1a:	761a      	strb	r2, [r3, #24]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000e100 	.word	0xe000e100
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b089      	sub	sp, #36	; 0x24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f1c3 0307 	rsb	r3, r3, #7
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	bf28      	it	cs
 8001b4e:	2304      	movcs	r3, #4
 8001b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3304      	adds	r3, #4
 8001b56:	2b06      	cmp	r3, #6
 8001b58:	d902      	bls.n	8001b60 <NVIC_EncodePriority+0x30>
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3b03      	subs	r3, #3
 8001b5e:	e000      	b.n	8001b62 <NVIC_EncodePriority+0x32>
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b64:	f04f 32ff 	mov.w	r2, #4294967295
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	401a      	ands	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b78:	f04f 31ff 	mov.w	r1, #4294967295
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	43d9      	mvns	r1, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	4313      	orrs	r3, r2
         );
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3724      	adds	r7, #36	; 0x24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ba8:	d301      	bcc.n	8001bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001baa:	2301      	movs	r3, #1
 8001bac:	e00f      	b.n	8001bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bae:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <SysTick_Config+0x40>)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bb6:	210f      	movs	r1, #15
 8001bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bbc:	f7ff ff8e 	bl	8001adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <SysTick_Config+0x40>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc6:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <SysTick_Config+0x40>)
 8001bc8:	2207      	movs	r2, #7
 8001bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	e000e010 	.word	0xe000e010

08001bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ff29 	bl	8001a3c <__NVIC_SetPriorityGrouping>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c00:	f7ff ff40 	bl	8001a84 <__NVIC_GetPriorityGrouping>
 8001c04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	6978      	ldr	r0, [r7, #20]
 8001c0c:	f7ff ff90 	bl	8001b30 <NVIC_EncodePriority>
 8001c10:	4602      	mov	r2, r0
 8001c12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c16:	4611      	mov	r1, r2
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff5f 	bl	8001adc <__NVIC_SetPriority>
}
 8001c1e:	bf00      	nop
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff33 	bl	8001aa0 <__NVIC_EnableIRQ>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff ffa4 	bl	8001b98 <SysTick_Config>
 8001c50:	4603      	mov	r3, r0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001c64:	f7ff fe9a 	bl	800199c <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e2dc      	b.n	800222e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d008      	beq.n	8001c92 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2280      	movs	r2, #128	; 0x80
 8001c84:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e2cd      	b.n	800222e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a76      	ldr	r2, [pc, #472]	; (8001e70 <HAL_DMA_Abort+0x214>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d04a      	beq.n	8001d32 <HAL_DMA_Abort+0xd6>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a74      	ldr	r2, [pc, #464]	; (8001e74 <HAL_DMA_Abort+0x218>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d045      	beq.n	8001d32 <HAL_DMA_Abort+0xd6>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a73      	ldr	r2, [pc, #460]	; (8001e78 <HAL_DMA_Abort+0x21c>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d040      	beq.n	8001d32 <HAL_DMA_Abort+0xd6>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a71      	ldr	r2, [pc, #452]	; (8001e7c <HAL_DMA_Abort+0x220>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d03b      	beq.n	8001d32 <HAL_DMA_Abort+0xd6>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a70      	ldr	r2, [pc, #448]	; (8001e80 <HAL_DMA_Abort+0x224>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d036      	beq.n	8001d32 <HAL_DMA_Abort+0xd6>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a6e      	ldr	r2, [pc, #440]	; (8001e84 <HAL_DMA_Abort+0x228>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d031      	beq.n	8001d32 <HAL_DMA_Abort+0xd6>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a6d      	ldr	r2, [pc, #436]	; (8001e88 <HAL_DMA_Abort+0x22c>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d02c      	beq.n	8001d32 <HAL_DMA_Abort+0xd6>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a6b      	ldr	r2, [pc, #428]	; (8001e8c <HAL_DMA_Abort+0x230>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d027      	beq.n	8001d32 <HAL_DMA_Abort+0xd6>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a6a      	ldr	r2, [pc, #424]	; (8001e90 <HAL_DMA_Abort+0x234>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d022      	beq.n	8001d32 <HAL_DMA_Abort+0xd6>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a68      	ldr	r2, [pc, #416]	; (8001e94 <HAL_DMA_Abort+0x238>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d01d      	beq.n	8001d32 <HAL_DMA_Abort+0xd6>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a67      	ldr	r2, [pc, #412]	; (8001e98 <HAL_DMA_Abort+0x23c>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d018      	beq.n	8001d32 <HAL_DMA_Abort+0xd6>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a65      	ldr	r2, [pc, #404]	; (8001e9c <HAL_DMA_Abort+0x240>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d013      	beq.n	8001d32 <HAL_DMA_Abort+0xd6>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a64      	ldr	r2, [pc, #400]	; (8001ea0 <HAL_DMA_Abort+0x244>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d00e      	beq.n	8001d32 <HAL_DMA_Abort+0xd6>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a62      	ldr	r2, [pc, #392]	; (8001ea4 <HAL_DMA_Abort+0x248>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d009      	beq.n	8001d32 <HAL_DMA_Abort+0xd6>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a61      	ldr	r2, [pc, #388]	; (8001ea8 <HAL_DMA_Abort+0x24c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d004      	beq.n	8001d32 <HAL_DMA_Abort+0xd6>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a5f      	ldr	r2, [pc, #380]	; (8001eac <HAL_DMA_Abort+0x250>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d101      	bne.n	8001d36 <HAL_DMA_Abort+0xda>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <HAL_DMA_Abort+0xdc>
 8001d36:	2300      	movs	r3, #0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d013      	beq.n	8001d64 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 021e 	bic.w	r2, r2, #30
 8001d4a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	695a      	ldr	r2, [r3, #20]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d5a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	e00a      	b.n	8001d7a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 020e 	bic.w	r2, r2, #14
 8001d72:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a3c      	ldr	r2, [pc, #240]	; (8001e70 <HAL_DMA_Abort+0x214>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d072      	beq.n	8001e6a <HAL_DMA_Abort+0x20e>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a3a      	ldr	r2, [pc, #232]	; (8001e74 <HAL_DMA_Abort+0x218>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d06d      	beq.n	8001e6a <HAL_DMA_Abort+0x20e>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a39      	ldr	r2, [pc, #228]	; (8001e78 <HAL_DMA_Abort+0x21c>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d068      	beq.n	8001e6a <HAL_DMA_Abort+0x20e>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a37      	ldr	r2, [pc, #220]	; (8001e7c <HAL_DMA_Abort+0x220>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d063      	beq.n	8001e6a <HAL_DMA_Abort+0x20e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a36      	ldr	r2, [pc, #216]	; (8001e80 <HAL_DMA_Abort+0x224>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d05e      	beq.n	8001e6a <HAL_DMA_Abort+0x20e>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a34      	ldr	r2, [pc, #208]	; (8001e84 <HAL_DMA_Abort+0x228>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d059      	beq.n	8001e6a <HAL_DMA_Abort+0x20e>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a33      	ldr	r2, [pc, #204]	; (8001e88 <HAL_DMA_Abort+0x22c>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d054      	beq.n	8001e6a <HAL_DMA_Abort+0x20e>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a31      	ldr	r2, [pc, #196]	; (8001e8c <HAL_DMA_Abort+0x230>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d04f      	beq.n	8001e6a <HAL_DMA_Abort+0x20e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a30      	ldr	r2, [pc, #192]	; (8001e90 <HAL_DMA_Abort+0x234>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d04a      	beq.n	8001e6a <HAL_DMA_Abort+0x20e>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a2e      	ldr	r2, [pc, #184]	; (8001e94 <HAL_DMA_Abort+0x238>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d045      	beq.n	8001e6a <HAL_DMA_Abort+0x20e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a2d      	ldr	r2, [pc, #180]	; (8001e98 <HAL_DMA_Abort+0x23c>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d040      	beq.n	8001e6a <HAL_DMA_Abort+0x20e>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a2b      	ldr	r2, [pc, #172]	; (8001e9c <HAL_DMA_Abort+0x240>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d03b      	beq.n	8001e6a <HAL_DMA_Abort+0x20e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a2a      	ldr	r2, [pc, #168]	; (8001ea0 <HAL_DMA_Abort+0x244>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d036      	beq.n	8001e6a <HAL_DMA_Abort+0x20e>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a28      	ldr	r2, [pc, #160]	; (8001ea4 <HAL_DMA_Abort+0x248>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d031      	beq.n	8001e6a <HAL_DMA_Abort+0x20e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a27      	ldr	r2, [pc, #156]	; (8001ea8 <HAL_DMA_Abort+0x24c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d02c      	beq.n	8001e6a <HAL_DMA_Abort+0x20e>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a25      	ldr	r2, [pc, #148]	; (8001eac <HAL_DMA_Abort+0x250>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d027      	beq.n	8001e6a <HAL_DMA_Abort+0x20e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a24      	ldr	r2, [pc, #144]	; (8001eb0 <HAL_DMA_Abort+0x254>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d022      	beq.n	8001e6a <HAL_DMA_Abort+0x20e>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a22      	ldr	r2, [pc, #136]	; (8001eb4 <HAL_DMA_Abort+0x258>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d01d      	beq.n	8001e6a <HAL_DMA_Abort+0x20e>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a21      	ldr	r2, [pc, #132]	; (8001eb8 <HAL_DMA_Abort+0x25c>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d018      	beq.n	8001e6a <HAL_DMA_Abort+0x20e>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a1f      	ldr	r2, [pc, #124]	; (8001ebc <HAL_DMA_Abort+0x260>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d013      	beq.n	8001e6a <HAL_DMA_Abort+0x20e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a1e      	ldr	r2, [pc, #120]	; (8001ec0 <HAL_DMA_Abort+0x264>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d00e      	beq.n	8001e6a <HAL_DMA_Abort+0x20e>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a1c      	ldr	r2, [pc, #112]	; (8001ec4 <HAL_DMA_Abort+0x268>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d009      	beq.n	8001e6a <HAL_DMA_Abort+0x20e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a1b      	ldr	r2, [pc, #108]	; (8001ec8 <HAL_DMA_Abort+0x26c>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d004      	beq.n	8001e6a <HAL_DMA_Abort+0x20e>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a19      	ldr	r2, [pc, #100]	; (8001ecc <HAL_DMA_Abort+0x270>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d132      	bne.n	8001ed0 <HAL_DMA_Abort+0x274>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e031      	b.n	8001ed2 <HAL_DMA_Abort+0x276>
 8001e6e:	bf00      	nop
 8001e70:	40020010 	.word	0x40020010
 8001e74:	40020028 	.word	0x40020028
 8001e78:	40020040 	.word	0x40020040
 8001e7c:	40020058 	.word	0x40020058
 8001e80:	40020070 	.word	0x40020070
 8001e84:	40020088 	.word	0x40020088
 8001e88:	400200a0 	.word	0x400200a0
 8001e8c:	400200b8 	.word	0x400200b8
 8001e90:	40020410 	.word	0x40020410
 8001e94:	40020428 	.word	0x40020428
 8001e98:	40020440 	.word	0x40020440
 8001e9c:	40020458 	.word	0x40020458
 8001ea0:	40020470 	.word	0x40020470
 8001ea4:	40020488 	.word	0x40020488
 8001ea8:	400204a0 	.word	0x400204a0
 8001eac:	400204b8 	.word	0x400204b8
 8001eb0:	58025408 	.word	0x58025408
 8001eb4:	5802541c 	.word	0x5802541c
 8001eb8:	58025430 	.word	0x58025430
 8001ebc:	58025444 	.word	0x58025444
 8001ec0:	58025458 	.word	0x58025458
 8001ec4:	5802546c 	.word	0x5802546c
 8001ec8:	58025480 	.word	0x58025480
 8001ecc:	58025494 	.word	0x58025494
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d007      	beq.n	8001ee6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ee4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a6d      	ldr	r2, [pc, #436]	; (80020a0 <HAL_DMA_Abort+0x444>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d04a      	beq.n	8001f86 <HAL_DMA_Abort+0x32a>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a6b      	ldr	r2, [pc, #428]	; (80020a4 <HAL_DMA_Abort+0x448>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d045      	beq.n	8001f86 <HAL_DMA_Abort+0x32a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a6a      	ldr	r2, [pc, #424]	; (80020a8 <HAL_DMA_Abort+0x44c>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d040      	beq.n	8001f86 <HAL_DMA_Abort+0x32a>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a68      	ldr	r2, [pc, #416]	; (80020ac <HAL_DMA_Abort+0x450>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d03b      	beq.n	8001f86 <HAL_DMA_Abort+0x32a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a67      	ldr	r2, [pc, #412]	; (80020b0 <HAL_DMA_Abort+0x454>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d036      	beq.n	8001f86 <HAL_DMA_Abort+0x32a>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a65      	ldr	r2, [pc, #404]	; (80020b4 <HAL_DMA_Abort+0x458>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d031      	beq.n	8001f86 <HAL_DMA_Abort+0x32a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a64      	ldr	r2, [pc, #400]	; (80020b8 <HAL_DMA_Abort+0x45c>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d02c      	beq.n	8001f86 <HAL_DMA_Abort+0x32a>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a62      	ldr	r2, [pc, #392]	; (80020bc <HAL_DMA_Abort+0x460>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d027      	beq.n	8001f86 <HAL_DMA_Abort+0x32a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a61      	ldr	r2, [pc, #388]	; (80020c0 <HAL_DMA_Abort+0x464>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d022      	beq.n	8001f86 <HAL_DMA_Abort+0x32a>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a5f      	ldr	r2, [pc, #380]	; (80020c4 <HAL_DMA_Abort+0x468>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d01d      	beq.n	8001f86 <HAL_DMA_Abort+0x32a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a5e      	ldr	r2, [pc, #376]	; (80020c8 <HAL_DMA_Abort+0x46c>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d018      	beq.n	8001f86 <HAL_DMA_Abort+0x32a>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a5c      	ldr	r2, [pc, #368]	; (80020cc <HAL_DMA_Abort+0x470>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d013      	beq.n	8001f86 <HAL_DMA_Abort+0x32a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a5b      	ldr	r2, [pc, #364]	; (80020d0 <HAL_DMA_Abort+0x474>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00e      	beq.n	8001f86 <HAL_DMA_Abort+0x32a>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a59      	ldr	r2, [pc, #356]	; (80020d4 <HAL_DMA_Abort+0x478>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d009      	beq.n	8001f86 <HAL_DMA_Abort+0x32a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a58      	ldr	r2, [pc, #352]	; (80020d8 <HAL_DMA_Abort+0x47c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d004      	beq.n	8001f86 <HAL_DMA_Abort+0x32a>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a56      	ldr	r2, [pc, #344]	; (80020dc <HAL_DMA_Abort+0x480>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d108      	bne.n	8001f98 <HAL_DMA_Abort+0x33c>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0201 	bic.w	r2, r2, #1
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	e007      	b.n	8001fa8 <HAL_DMA_Abort+0x34c>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0201 	bic.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001fa8:	e013      	b.n	8001fd2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001faa:	f7ff fcf7 	bl	800199c <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b05      	cmp	r3, #5
 8001fb6:	d90c      	bls.n	8001fd2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e12d      	b.n	800222e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1e5      	bne.n	8001faa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a2f      	ldr	r2, [pc, #188]	; (80020a0 <HAL_DMA_Abort+0x444>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d04a      	beq.n	800207e <HAL_DMA_Abort+0x422>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a2d      	ldr	r2, [pc, #180]	; (80020a4 <HAL_DMA_Abort+0x448>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d045      	beq.n	800207e <HAL_DMA_Abort+0x422>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a2c      	ldr	r2, [pc, #176]	; (80020a8 <HAL_DMA_Abort+0x44c>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d040      	beq.n	800207e <HAL_DMA_Abort+0x422>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a2a      	ldr	r2, [pc, #168]	; (80020ac <HAL_DMA_Abort+0x450>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d03b      	beq.n	800207e <HAL_DMA_Abort+0x422>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a29      	ldr	r2, [pc, #164]	; (80020b0 <HAL_DMA_Abort+0x454>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d036      	beq.n	800207e <HAL_DMA_Abort+0x422>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a27      	ldr	r2, [pc, #156]	; (80020b4 <HAL_DMA_Abort+0x458>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d031      	beq.n	800207e <HAL_DMA_Abort+0x422>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a26      	ldr	r2, [pc, #152]	; (80020b8 <HAL_DMA_Abort+0x45c>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d02c      	beq.n	800207e <HAL_DMA_Abort+0x422>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a24      	ldr	r2, [pc, #144]	; (80020bc <HAL_DMA_Abort+0x460>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d027      	beq.n	800207e <HAL_DMA_Abort+0x422>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a23      	ldr	r2, [pc, #140]	; (80020c0 <HAL_DMA_Abort+0x464>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d022      	beq.n	800207e <HAL_DMA_Abort+0x422>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a21      	ldr	r2, [pc, #132]	; (80020c4 <HAL_DMA_Abort+0x468>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d01d      	beq.n	800207e <HAL_DMA_Abort+0x422>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a20      	ldr	r2, [pc, #128]	; (80020c8 <HAL_DMA_Abort+0x46c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d018      	beq.n	800207e <HAL_DMA_Abort+0x422>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a1e      	ldr	r2, [pc, #120]	; (80020cc <HAL_DMA_Abort+0x470>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d013      	beq.n	800207e <HAL_DMA_Abort+0x422>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a1d      	ldr	r2, [pc, #116]	; (80020d0 <HAL_DMA_Abort+0x474>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d00e      	beq.n	800207e <HAL_DMA_Abort+0x422>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a1b      	ldr	r2, [pc, #108]	; (80020d4 <HAL_DMA_Abort+0x478>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d009      	beq.n	800207e <HAL_DMA_Abort+0x422>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a1a      	ldr	r2, [pc, #104]	; (80020d8 <HAL_DMA_Abort+0x47c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d004      	beq.n	800207e <HAL_DMA_Abort+0x422>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a18      	ldr	r2, [pc, #96]	; (80020dc <HAL_DMA_Abort+0x480>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d101      	bne.n	8002082 <HAL_DMA_Abort+0x426>
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <HAL_DMA_Abort+0x428>
 8002082:	2300      	movs	r3, #0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d02b      	beq.n	80020e0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	223f      	movs	r2, #63	; 0x3f
 8002098:	409a      	lsls	r2, r3
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	e02a      	b.n	80020f6 <HAL_DMA_Abort+0x49a>
 80020a0:	40020010 	.word	0x40020010
 80020a4:	40020028 	.word	0x40020028
 80020a8:	40020040 	.word	0x40020040
 80020ac:	40020058 	.word	0x40020058
 80020b0:	40020070 	.word	0x40020070
 80020b4:	40020088 	.word	0x40020088
 80020b8:	400200a0 	.word	0x400200a0
 80020bc:	400200b8 	.word	0x400200b8
 80020c0:	40020410 	.word	0x40020410
 80020c4:	40020428 	.word	0x40020428
 80020c8:	40020440 	.word	0x40020440
 80020cc:	40020458 	.word	0x40020458
 80020d0:	40020470 	.word	0x40020470
 80020d4:	40020488 	.word	0x40020488
 80020d8:	400204a0 	.word	0x400204a0
 80020dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ea:	f003 031f 	and.w	r3, r3, #31
 80020ee:	2201      	movs	r2, #1
 80020f0:	409a      	lsls	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a4f      	ldr	r2, [pc, #316]	; (8002238 <HAL_DMA_Abort+0x5dc>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d072      	beq.n	80021e6 <HAL_DMA_Abort+0x58a>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a4d      	ldr	r2, [pc, #308]	; (800223c <HAL_DMA_Abort+0x5e0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d06d      	beq.n	80021e6 <HAL_DMA_Abort+0x58a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a4c      	ldr	r2, [pc, #304]	; (8002240 <HAL_DMA_Abort+0x5e4>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d068      	beq.n	80021e6 <HAL_DMA_Abort+0x58a>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a4a      	ldr	r2, [pc, #296]	; (8002244 <HAL_DMA_Abort+0x5e8>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d063      	beq.n	80021e6 <HAL_DMA_Abort+0x58a>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a49      	ldr	r2, [pc, #292]	; (8002248 <HAL_DMA_Abort+0x5ec>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d05e      	beq.n	80021e6 <HAL_DMA_Abort+0x58a>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a47      	ldr	r2, [pc, #284]	; (800224c <HAL_DMA_Abort+0x5f0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d059      	beq.n	80021e6 <HAL_DMA_Abort+0x58a>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a46      	ldr	r2, [pc, #280]	; (8002250 <HAL_DMA_Abort+0x5f4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d054      	beq.n	80021e6 <HAL_DMA_Abort+0x58a>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a44      	ldr	r2, [pc, #272]	; (8002254 <HAL_DMA_Abort+0x5f8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d04f      	beq.n	80021e6 <HAL_DMA_Abort+0x58a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a43      	ldr	r2, [pc, #268]	; (8002258 <HAL_DMA_Abort+0x5fc>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d04a      	beq.n	80021e6 <HAL_DMA_Abort+0x58a>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a41      	ldr	r2, [pc, #260]	; (800225c <HAL_DMA_Abort+0x600>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d045      	beq.n	80021e6 <HAL_DMA_Abort+0x58a>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a40      	ldr	r2, [pc, #256]	; (8002260 <HAL_DMA_Abort+0x604>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d040      	beq.n	80021e6 <HAL_DMA_Abort+0x58a>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a3e      	ldr	r2, [pc, #248]	; (8002264 <HAL_DMA_Abort+0x608>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d03b      	beq.n	80021e6 <HAL_DMA_Abort+0x58a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a3d      	ldr	r2, [pc, #244]	; (8002268 <HAL_DMA_Abort+0x60c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d036      	beq.n	80021e6 <HAL_DMA_Abort+0x58a>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a3b      	ldr	r2, [pc, #236]	; (800226c <HAL_DMA_Abort+0x610>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d031      	beq.n	80021e6 <HAL_DMA_Abort+0x58a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a3a      	ldr	r2, [pc, #232]	; (8002270 <HAL_DMA_Abort+0x614>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d02c      	beq.n	80021e6 <HAL_DMA_Abort+0x58a>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a38      	ldr	r2, [pc, #224]	; (8002274 <HAL_DMA_Abort+0x618>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d027      	beq.n	80021e6 <HAL_DMA_Abort+0x58a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a37      	ldr	r2, [pc, #220]	; (8002278 <HAL_DMA_Abort+0x61c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d022      	beq.n	80021e6 <HAL_DMA_Abort+0x58a>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a35      	ldr	r2, [pc, #212]	; (800227c <HAL_DMA_Abort+0x620>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d01d      	beq.n	80021e6 <HAL_DMA_Abort+0x58a>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a34      	ldr	r2, [pc, #208]	; (8002280 <HAL_DMA_Abort+0x624>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d018      	beq.n	80021e6 <HAL_DMA_Abort+0x58a>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a32      	ldr	r2, [pc, #200]	; (8002284 <HAL_DMA_Abort+0x628>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <HAL_DMA_Abort+0x58a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a31      	ldr	r2, [pc, #196]	; (8002288 <HAL_DMA_Abort+0x62c>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d00e      	beq.n	80021e6 <HAL_DMA_Abort+0x58a>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a2f      	ldr	r2, [pc, #188]	; (800228c <HAL_DMA_Abort+0x630>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d009      	beq.n	80021e6 <HAL_DMA_Abort+0x58a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a2e      	ldr	r2, [pc, #184]	; (8002290 <HAL_DMA_Abort+0x634>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d004      	beq.n	80021e6 <HAL_DMA_Abort+0x58a>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a2c      	ldr	r2, [pc, #176]	; (8002294 <HAL_DMA_Abort+0x638>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d101      	bne.n	80021ea <HAL_DMA_Abort+0x58e>
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <HAL_DMA_Abort+0x590>
 80021ea:	2300      	movs	r3, #0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d015      	beq.n	800221c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80021f8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00c      	beq.n	800221c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800220c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002210:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800221a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40020010 	.word	0x40020010
 800223c:	40020028 	.word	0x40020028
 8002240:	40020040 	.word	0x40020040
 8002244:	40020058 	.word	0x40020058
 8002248:	40020070 	.word	0x40020070
 800224c:	40020088 	.word	0x40020088
 8002250:	400200a0 	.word	0x400200a0
 8002254:	400200b8 	.word	0x400200b8
 8002258:	40020410 	.word	0x40020410
 800225c:	40020428 	.word	0x40020428
 8002260:	40020440 	.word	0x40020440
 8002264:	40020458 	.word	0x40020458
 8002268:	40020470 	.word	0x40020470
 800226c:	40020488 	.word	0x40020488
 8002270:	400204a0 	.word	0x400204a0
 8002274:	400204b8 	.word	0x400204b8
 8002278:	58025408 	.word	0x58025408
 800227c:	5802541c 	.word	0x5802541c
 8002280:	58025430 	.word	0x58025430
 8002284:	58025444 	.word	0x58025444
 8002288:	58025458 	.word	0x58025458
 800228c:	5802546c 	.word	0x5802546c
 8002290:	58025480 	.word	0x58025480
 8002294:	58025494 	.word	0x58025494

08002298 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e205      	b.n	80026b6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d004      	beq.n	80022c0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2280      	movs	r2, #128	; 0x80
 80022ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e1fa      	b.n	80026b6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a8c      	ldr	r2, [pc, #560]	; (80024f8 <HAL_DMA_Abort_IT+0x260>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d04a      	beq.n	8002360 <HAL_DMA_Abort_IT+0xc8>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a8b      	ldr	r2, [pc, #556]	; (80024fc <HAL_DMA_Abort_IT+0x264>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d045      	beq.n	8002360 <HAL_DMA_Abort_IT+0xc8>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a89      	ldr	r2, [pc, #548]	; (8002500 <HAL_DMA_Abort_IT+0x268>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d040      	beq.n	8002360 <HAL_DMA_Abort_IT+0xc8>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a88      	ldr	r2, [pc, #544]	; (8002504 <HAL_DMA_Abort_IT+0x26c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d03b      	beq.n	8002360 <HAL_DMA_Abort_IT+0xc8>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a86      	ldr	r2, [pc, #536]	; (8002508 <HAL_DMA_Abort_IT+0x270>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d036      	beq.n	8002360 <HAL_DMA_Abort_IT+0xc8>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a85      	ldr	r2, [pc, #532]	; (800250c <HAL_DMA_Abort_IT+0x274>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d031      	beq.n	8002360 <HAL_DMA_Abort_IT+0xc8>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a83      	ldr	r2, [pc, #524]	; (8002510 <HAL_DMA_Abort_IT+0x278>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d02c      	beq.n	8002360 <HAL_DMA_Abort_IT+0xc8>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a82      	ldr	r2, [pc, #520]	; (8002514 <HAL_DMA_Abort_IT+0x27c>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d027      	beq.n	8002360 <HAL_DMA_Abort_IT+0xc8>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a80      	ldr	r2, [pc, #512]	; (8002518 <HAL_DMA_Abort_IT+0x280>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d022      	beq.n	8002360 <HAL_DMA_Abort_IT+0xc8>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a7f      	ldr	r2, [pc, #508]	; (800251c <HAL_DMA_Abort_IT+0x284>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d01d      	beq.n	8002360 <HAL_DMA_Abort_IT+0xc8>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a7d      	ldr	r2, [pc, #500]	; (8002520 <HAL_DMA_Abort_IT+0x288>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d018      	beq.n	8002360 <HAL_DMA_Abort_IT+0xc8>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a7c      	ldr	r2, [pc, #496]	; (8002524 <HAL_DMA_Abort_IT+0x28c>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d013      	beq.n	8002360 <HAL_DMA_Abort_IT+0xc8>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a7a      	ldr	r2, [pc, #488]	; (8002528 <HAL_DMA_Abort_IT+0x290>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d00e      	beq.n	8002360 <HAL_DMA_Abort_IT+0xc8>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a79      	ldr	r2, [pc, #484]	; (800252c <HAL_DMA_Abort_IT+0x294>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d009      	beq.n	8002360 <HAL_DMA_Abort_IT+0xc8>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a77      	ldr	r2, [pc, #476]	; (8002530 <HAL_DMA_Abort_IT+0x298>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d004      	beq.n	8002360 <HAL_DMA_Abort_IT+0xc8>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a76      	ldr	r2, [pc, #472]	; (8002534 <HAL_DMA_Abort_IT+0x29c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d101      	bne.n	8002364 <HAL_DMA_Abort_IT+0xcc>
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <HAL_DMA_Abort_IT+0xce>
 8002364:	2300      	movs	r3, #0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d065      	beq.n	8002436 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2204      	movs	r2, #4
 800236e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a60      	ldr	r2, [pc, #384]	; (80024f8 <HAL_DMA_Abort_IT+0x260>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d04a      	beq.n	8002412 <HAL_DMA_Abort_IT+0x17a>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a5e      	ldr	r2, [pc, #376]	; (80024fc <HAL_DMA_Abort_IT+0x264>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d045      	beq.n	8002412 <HAL_DMA_Abort_IT+0x17a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a5d      	ldr	r2, [pc, #372]	; (8002500 <HAL_DMA_Abort_IT+0x268>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d040      	beq.n	8002412 <HAL_DMA_Abort_IT+0x17a>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a5b      	ldr	r2, [pc, #364]	; (8002504 <HAL_DMA_Abort_IT+0x26c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d03b      	beq.n	8002412 <HAL_DMA_Abort_IT+0x17a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a5a      	ldr	r2, [pc, #360]	; (8002508 <HAL_DMA_Abort_IT+0x270>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d036      	beq.n	8002412 <HAL_DMA_Abort_IT+0x17a>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a58      	ldr	r2, [pc, #352]	; (800250c <HAL_DMA_Abort_IT+0x274>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d031      	beq.n	8002412 <HAL_DMA_Abort_IT+0x17a>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a57      	ldr	r2, [pc, #348]	; (8002510 <HAL_DMA_Abort_IT+0x278>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d02c      	beq.n	8002412 <HAL_DMA_Abort_IT+0x17a>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a55      	ldr	r2, [pc, #340]	; (8002514 <HAL_DMA_Abort_IT+0x27c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d027      	beq.n	8002412 <HAL_DMA_Abort_IT+0x17a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a54      	ldr	r2, [pc, #336]	; (8002518 <HAL_DMA_Abort_IT+0x280>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d022      	beq.n	8002412 <HAL_DMA_Abort_IT+0x17a>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a52      	ldr	r2, [pc, #328]	; (800251c <HAL_DMA_Abort_IT+0x284>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d01d      	beq.n	8002412 <HAL_DMA_Abort_IT+0x17a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a51      	ldr	r2, [pc, #324]	; (8002520 <HAL_DMA_Abort_IT+0x288>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d018      	beq.n	8002412 <HAL_DMA_Abort_IT+0x17a>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a4f      	ldr	r2, [pc, #316]	; (8002524 <HAL_DMA_Abort_IT+0x28c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d013      	beq.n	8002412 <HAL_DMA_Abort_IT+0x17a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a4e      	ldr	r2, [pc, #312]	; (8002528 <HAL_DMA_Abort_IT+0x290>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d00e      	beq.n	8002412 <HAL_DMA_Abort_IT+0x17a>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a4c      	ldr	r2, [pc, #304]	; (800252c <HAL_DMA_Abort_IT+0x294>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d009      	beq.n	8002412 <HAL_DMA_Abort_IT+0x17a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a4b      	ldr	r2, [pc, #300]	; (8002530 <HAL_DMA_Abort_IT+0x298>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d004      	beq.n	8002412 <HAL_DMA_Abort_IT+0x17a>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a49      	ldr	r2, [pc, #292]	; (8002534 <HAL_DMA_Abort_IT+0x29c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d108      	bne.n	8002424 <HAL_DMA_Abort_IT+0x18c>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0201 	bic.w	r2, r2, #1
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	e147      	b.n	80026b4 <HAL_DMA_Abort_IT+0x41c>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0201 	bic.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	e13e      	b.n	80026b4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 020e 	bic.w	r2, r2, #14
 8002444:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a2b      	ldr	r2, [pc, #172]	; (80024f8 <HAL_DMA_Abort_IT+0x260>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d04a      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x24e>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a29      	ldr	r2, [pc, #164]	; (80024fc <HAL_DMA_Abort_IT+0x264>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d045      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x24e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a28      	ldr	r2, [pc, #160]	; (8002500 <HAL_DMA_Abort_IT+0x268>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d040      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x24e>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a26      	ldr	r2, [pc, #152]	; (8002504 <HAL_DMA_Abort_IT+0x26c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d03b      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x24e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a25      	ldr	r2, [pc, #148]	; (8002508 <HAL_DMA_Abort_IT+0x270>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d036      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x24e>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a23      	ldr	r2, [pc, #140]	; (800250c <HAL_DMA_Abort_IT+0x274>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d031      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x24e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a22      	ldr	r2, [pc, #136]	; (8002510 <HAL_DMA_Abort_IT+0x278>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d02c      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x24e>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a20      	ldr	r2, [pc, #128]	; (8002514 <HAL_DMA_Abort_IT+0x27c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d027      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x24e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1f      	ldr	r2, [pc, #124]	; (8002518 <HAL_DMA_Abort_IT+0x280>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d022      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x24e>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a1d      	ldr	r2, [pc, #116]	; (800251c <HAL_DMA_Abort_IT+0x284>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d01d      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x24e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a1c      	ldr	r2, [pc, #112]	; (8002520 <HAL_DMA_Abort_IT+0x288>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d018      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x24e>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a1a      	ldr	r2, [pc, #104]	; (8002524 <HAL_DMA_Abort_IT+0x28c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d013      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x24e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a19      	ldr	r2, [pc, #100]	; (8002528 <HAL_DMA_Abort_IT+0x290>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d00e      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x24e>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a17      	ldr	r2, [pc, #92]	; (800252c <HAL_DMA_Abort_IT+0x294>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d009      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x24e>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a16      	ldr	r2, [pc, #88]	; (8002530 <HAL_DMA_Abort_IT+0x298>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d004      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x24e>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a14      	ldr	r2, [pc, #80]	; (8002534 <HAL_DMA_Abort_IT+0x29c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d128      	bne.n	8002538 <HAL_DMA_Abort_IT+0x2a0>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0201 	bic.w	r2, r2, #1
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	e027      	b.n	8002548 <HAL_DMA_Abort_IT+0x2b0>
 80024f8:	40020010 	.word	0x40020010
 80024fc:	40020028 	.word	0x40020028
 8002500:	40020040 	.word	0x40020040
 8002504:	40020058 	.word	0x40020058
 8002508:	40020070 	.word	0x40020070
 800250c:	40020088 	.word	0x40020088
 8002510:	400200a0 	.word	0x400200a0
 8002514:	400200b8 	.word	0x400200b8
 8002518:	40020410 	.word	0x40020410
 800251c:	40020428 	.word	0x40020428
 8002520:	40020440 	.word	0x40020440
 8002524:	40020458 	.word	0x40020458
 8002528:	40020470 	.word	0x40020470
 800252c:	40020488 	.word	0x40020488
 8002530:	400204a0 	.word	0x400204a0
 8002534:	400204b8 	.word	0x400204b8
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0201 	bic.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a5c      	ldr	r2, [pc, #368]	; (80026c0 <HAL_DMA_Abort_IT+0x428>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d072      	beq.n	8002638 <HAL_DMA_Abort_IT+0x3a0>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a5b      	ldr	r2, [pc, #364]	; (80026c4 <HAL_DMA_Abort_IT+0x42c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d06d      	beq.n	8002638 <HAL_DMA_Abort_IT+0x3a0>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a59      	ldr	r2, [pc, #356]	; (80026c8 <HAL_DMA_Abort_IT+0x430>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d068      	beq.n	8002638 <HAL_DMA_Abort_IT+0x3a0>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a58      	ldr	r2, [pc, #352]	; (80026cc <HAL_DMA_Abort_IT+0x434>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d063      	beq.n	8002638 <HAL_DMA_Abort_IT+0x3a0>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a56      	ldr	r2, [pc, #344]	; (80026d0 <HAL_DMA_Abort_IT+0x438>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d05e      	beq.n	8002638 <HAL_DMA_Abort_IT+0x3a0>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a55      	ldr	r2, [pc, #340]	; (80026d4 <HAL_DMA_Abort_IT+0x43c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d059      	beq.n	8002638 <HAL_DMA_Abort_IT+0x3a0>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a53      	ldr	r2, [pc, #332]	; (80026d8 <HAL_DMA_Abort_IT+0x440>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d054      	beq.n	8002638 <HAL_DMA_Abort_IT+0x3a0>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a52      	ldr	r2, [pc, #328]	; (80026dc <HAL_DMA_Abort_IT+0x444>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d04f      	beq.n	8002638 <HAL_DMA_Abort_IT+0x3a0>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a50      	ldr	r2, [pc, #320]	; (80026e0 <HAL_DMA_Abort_IT+0x448>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d04a      	beq.n	8002638 <HAL_DMA_Abort_IT+0x3a0>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a4f      	ldr	r2, [pc, #316]	; (80026e4 <HAL_DMA_Abort_IT+0x44c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d045      	beq.n	8002638 <HAL_DMA_Abort_IT+0x3a0>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a4d      	ldr	r2, [pc, #308]	; (80026e8 <HAL_DMA_Abort_IT+0x450>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d040      	beq.n	8002638 <HAL_DMA_Abort_IT+0x3a0>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a4c      	ldr	r2, [pc, #304]	; (80026ec <HAL_DMA_Abort_IT+0x454>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d03b      	beq.n	8002638 <HAL_DMA_Abort_IT+0x3a0>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a4a      	ldr	r2, [pc, #296]	; (80026f0 <HAL_DMA_Abort_IT+0x458>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d036      	beq.n	8002638 <HAL_DMA_Abort_IT+0x3a0>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a49      	ldr	r2, [pc, #292]	; (80026f4 <HAL_DMA_Abort_IT+0x45c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d031      	beq.n	8002638 <HAL_DMA_Abort_IT+0x3a0>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a47      	ldr	r2, [pc, #284]	; (80026f8 <HAL_DMA_Abort_IT+0x460>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d02c      	beq.n	8002638 <HAL_DMA_Abort_IT+0x3a0>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a46      	ldr	r2, [pc, #280]	; (80026fc <HAL_DMA_Abort_IT+0x464>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d027      	beq.n	8002638 <HAL_DMA_Abort_IT+0x3a0>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a44      	ldr	r2, [pc, #272]	; (8002700 <HAL_DMA_Abort_IT+0x468>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d022      	beq.n	8002638 <HAL_DMA_Abort_IT+0x3a0>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a43      	ldr	r2, [pc, #268]	; (8002704 <HAL_DMA_Abort_IT+0x46c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d01d      	beq.n	8002638 <HAL_DMA_Abort_IT+0x3a0>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a41      	ldr	r2, [pc, #260]	; (8002708 <HAL_DMA_Abort_IT+0x470>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d018      	beq.n	8002638 <HAL_DMA_Abort_IT+0x3a0>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a40      	ldr	r2, [pc, #256]	; (800270c <HAL_DMA_Abort_IT+0x474>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d013      	beq.n	8002638 <HAL_DMA_Abort_IT+0x3a0>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a3e      	ldr	r2, [pc, #248]	; (8002710 <HAL_DMA_Abort_IT+0x478>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00e      	beq.n	8002638 <HAL_DMA_Abort_IT+0x3a0>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a3d      	ldr	r2, [pc, #244]	; (8002714 <HAL_DMA_Abort_IT+0x47c>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d009      	beq.n	8002638 <HAL_DMA_Abort_IT+0x3a0>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a3b      	ldr	r2, [pc, #236]	; (8002718 <HAL_DMA_Abort_IT+0x480>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d004      	beq.n	8002638 <HAL_DMA_Abort_IT+0x3a0>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a3a      	ldr	r2, [pc, #232]	; (800271c <HAL_DMA_Abort_IT+0x484>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d101      	bne.n	800263c <HAL_DMA_Abort_IT+0x3a4>
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <HAL_DMA_Abort_IT+0x3a6>
 800263c:	2300      	movs	r3, #0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d028      	beq.n	8002694 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800264c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002650:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002656:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265c:	f003 031f 	and.w	r3, r3, #31
 8002660:	2201      	movs	r2, #1
 8002662:	409a      	lsls	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002670:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00c      	beq.n	8002694 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002684:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002688:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002692:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40020010 	.word	0x40020010
 80026c4:	40020028 	.word	0x40020028
 80026c8:	40020040 	.word	0x40020040
 80026cc:	40020058 	.word	0x40020058
 80026d0:	40020070 	.word	0x40020070
 80026d4:	40020088 	.word	0x40020088
 80026d8:	400200a0 	.word	0x400200a0
 80026dc:	400200b8 	.word	0x400200b8
 80026e0:	40020410 	.word	0x40020410
 80026e4:	40020428 	.word	0x40020428
 80026e8:	40020440 	.word	0x40020440
 80026ec:	40020458 	.word	0x40020458
 80026f0:	40020470 	.word	0x40020470
 80026f4:	40020488 	.word	0x40020488
 80026f8:	400204a0 	.word	0x400204a0
 80026fc:	400204b8 	.word	0x400204b8
 8002700:	58025408 	.word	0x58025408
 8002704:	5802541c 	.word	0x5802541c
 8002708:	58025430 	.word	0x58025430
 800270c:	58025444 	.word	0x58025444
 8002710:	58025458 	.word	0x58025458
 8002714:	5802546c 	.word	0x5802546c
 8002718:	58025480 	.word	0x58025480
 800271c:	58025494 	.word	0x58025494

08002720 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800272e:	b2db      	uxtb	r3, r3
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e0c6      	b.n	80028dc <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002752:	2b00      	cmp	r3, #0
 8002754:	d102      	bne.n	800275c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7fe fd98 	bl	800128c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2223      	movs	r2, #35	; 0x23
 8002760:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002762:	4b60      	ldr	r3, [pc, #384]	; (80028e4 <HAL_ETH_Init+0x1a8>)
 8002764:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002768:	4a5e      	ldr	r2, [pc, #376]	; (80028e4 <HAL_ETH_Init+0x1a8>)
 800276a:	f043 0302 	orr.w	r3, r3, #2
 800276e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002772:	4b5c      	ldr	r3, [pc, #368]	; (80028e4 <HAL_ETH_Init+0x1a8>)
 8002774:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	7a1b      	ldrb	r3, [r3, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d103      	bne.n	8002790 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002788:	2000      	movs	r0, #0
 800278a:	f7ff f943 	bl	8001a14 <HAL_SYSCFG_ETHInterfaceSelect>
 800278e:	e003      	b.n	8002798 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002790:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002794:	f7ff f93e 	bl	8001a14 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027b0:	f7ff f8f4 	bl	800199c <HAL_GetTick>
 80027b4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80027b6:	e00f      	b.n	80027d8 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80027b8:	f7ff f8f0 	bl	800199c <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80027c6:	d907      	bls.n	80027d8 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2204      	movs	r2, #4
 80027cc:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	22e0      	movs	r2, #224	; 0xe0
 80027d2:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e081      	b.n	80028dc <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1e6      	bne.n	80027b8 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 fac0 	bl	8002d70 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80027f0:	f004 fbdc 	bl	8006fac <HAL_RCC_GetHCLKFreq>
 80027f4:	4603      	mov	r3, r0
 80027f6:	4a3c      	ldr	r2, [pc, #240]	; (80028e8 <HAL_ETH_Init+0x1ac>)
 80027f8:	fba2 2303 	umull	r2, r3, r2, r3
 80027fc:	0c9a      	lsrs	r2, r3, #18
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	3a01      	subs	r2, #1
 8002804:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 fa13 	bl	8002c34 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002824:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002828:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d007      	beq.n	8002846 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	22e0      	movs	r2, #224	; 0xe0
 8002840:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e04a      	b.n	80028dc <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	f241 1308 	movw	r3, #4360	; 0x1108
 800284e:	4413      	add	r3, r2
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	4b26      	ldr	r3, [pc, #152]	; (80028ec <HAL_ETH_Init+0x1b0>)
 8002854:	4013      	ands	r3, r2
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6952      	ldr	r2, [r2, #20]
 800285a:	0052      	lsls	r2, r2, #1
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	6809      	ldr	r1, [r1, #0]
 8002860:	431a      	orrs	r2, r3
 8002862:	f241 1308 	movw	r3, #4360	; 0x1108
 8002866:	440b      	add	r3, r1
 8002868:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 fad8 	bl	8002e20 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 fb1c 	bl	8002eae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	3305      	adds	r3, #5
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	021a      	lsls	r2, r3, #8
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	3304      	adds	r3, #4
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	4619      	mov	r1, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	3303      	adds	r3, #3
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	061a      	lsls	r2, r3, #24
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	3302      	adds	r3, #2
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	041b      	lsls	r3, r3, #16
 80028a8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	3301      	adds	r3, #1
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80028b4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80028c2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80028c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2210      	movs	r2, #16
 80028d2:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2210      	movs	r2, #16
 80028d8:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	58024400 	.word	0x58024400
 80028e8:	431bde83 	.word	0x431bde83
 80028ec:	ffff8001 	.word	0xffff8001

080028f0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002902:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	791b      	ldrb	r3, [r3, #4]
 8002908:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800290a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	7b1b      	ldrb	r3, [r3, #12]
 8002910:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002912:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	7b5b      	ldrb	r3, [r3, #13]
 8002918:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800291a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	7b9b      	ldrb	r3, [r3, #14]
 8002920:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002922:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	7bdb      	ldrb	r3, [r3, #15]
 8002928:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800292a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	7c12      	ldrb	r2, [r2, #16]
 8002930:	2a00      	cmp	r2, #0
 8002932:	d102      	bne.n	800293a <ETH_SetMACConfig+0x4a>
 8002934:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002938:	e000      	b.n	800293c <ETH_SetMACConfig+0x4c>
 800293a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800293c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	7c52      	ldrb	r2, [r2, #17]
 8002942:	2a00      	cmp	r2, #0
 8002944:	d102      	bne.n	800294c <ETH_SetMACConfig+0x5c>
 8002946:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800294a:	e000      	b.n	800294e <ETH_SetMACConfig+0x5e>
 800294c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800294e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	7c9b      	ldrb	r3, [r3, #18]
 8002954:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002956:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800295c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002962:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	7f1b      	ldrb	r3, [r3, #28]
 8002968:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800296a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	7f5b      	ldrb	r3, [r3, #29]
 8002970:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002972:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	7f92      	ldrb	r2, [r2, #30]
 8002978:	2a00      	cmp	r2, #0
 800297a:	d102      	bne.n	8002982 <ETH_SetMACConfig+0x92>
 800297c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002980:	e000      	b.n	8002984 <ETH_SetMACConfig+0x94>
 8002982:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002984:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	7fdb      	ldrb	r3, [r3, #31]
 800298a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800298c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002994:	2a00      	cmp	r2, #0
 8002996:	d102      	bne.n	800299e <ETH_SetMACConfig+0xae>
 8002998:	f44f 7280 	mov.w	r2, #256	; 0x100
 800299c:	e000      	b.n	80029a0 <ETH_SetMACConfig+0xb0>
 800299e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80029a0:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80029a6:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029ae:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80029b0:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4b56      	ldr	r3, [pc, #344]	; (8002b1c <ETH_SetMACConfig+0x22c>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	68f9      	ldr	r1, [r7, #12]
 80029ca:	430b      	orrs	r3, r1
 80029cc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029da:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80029dc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029e4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80029e6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80029ee:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80029f0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80029f8:	2a00      	cmp	r2, #0
 80029fa:	d102      	bne.n	8002a02 <ETH_SetMACConfig+0x112>
 80029fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a00:	e000      	b.n	8002a04 <ETH_SetMACConfig+0x114>
 8002a02:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002a04:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	4b42      	ldr	r3, [pc, #264]	; (8002b20 <ETH_SetMACConfig+0x230>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	68f9      	ldr	r1, [r7, #12]
 8002a1e:	430b      	orrs	r3, r1
 8002a20:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a28:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	4b3a      	ldr	r3, [pc, #232]	; (8002b24 <ETH_SetMACConfig+0x234>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	68f9      	ldr	r1, [r7, #12]
 8002a42:	430b      	orrs	r3, r1
 8002a44:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002a4c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002a52:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002a5a:	2a00      	cmp	r2, #0
 8002a5c:	d101      	bne.n	8002a62 <ETH_SetMACConfig+0x172>
 8002a5e:	2280      	movs	r2, #128	; 0x80
 8002a60:	e000      	b.n	8002a64 <ETH_SetMACConfig+0x174>
 8002a62:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002a64:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a6a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a76:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6812      	ldr	r2, [r2, #0]
 8002a80:	68f9      	ldr	r1, [r7, #12]
 8002a82:	430b      	orrs	r3, r1
 8002a84:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002a8c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002a94:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa2:	f023 0103 	bic.w	r1, r3, #3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002aba:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002ad6:	2a00      	cmp	r2, #0
 8002ad8:	d101      	bne.n	8002ade <ETH_SetMACConfig+0x1ee>
 8002ada:	2240      	movs	r2, #64	; 0x40
 8002adc:	e000      	b.n	8002ae0 <ETH_SetMACConfig+0x1f0>
 8002ade:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002ae0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002ae8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002aea:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002af2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002b00:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	00048083 	.word	0x00048083
 8002b20:	c0f88000 	.word	0xc0f88000
 8002b24:	fffffef0 	.word	0xfffffef0

08002b28 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4b38      	ldr	r3, [pc, #224]	; (8002c20 <ETH_SetDMAConfig+0xf8>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	6809      	ldr	r1, [r1, #0]
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002b4e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	791b      	ldrb	r3, [r3, #4]
 8002b54:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002b5a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	7b1b      	ldrb	r3, [r3, #12]
 8002b60:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	f241 0304 	movw	r3, #4100	; 0x1004
 8002b6e:	4413      	add	r3, r2
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	4b2c      	ldr	r3, [pc, #176]	; (8002c24 <ETH_SetDMAConfig+0xfc>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6811      	ldr	r1, [r2, #0]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	f241 0304 	movw	r3, #4100	; 0x1004
 8002b82:	440b      	add	r3, r1
 8002b84:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	7b5b      	ldrb	r3, [r3, #13]
 8002b8a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002b90:	4313      	orrs	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	4b22      	ldr	r3, [pc, #136]	; (8002c28 <ETH_SetDMAConfig+0x100>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6811      	ldr	r1, [r2, #0]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002bae:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	7d1b      	ldrb	r3, [r3, #20]
 8002bb8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002bba:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	7f5b      	ldrb	r3, [r3, #29]
 8002bc0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	f241 1304 	movw	r3, #4356	; 0x1104
 8002bce:	4413      	add	r3, r2
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <ETH_SetDMAConfig+0x104>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6811      	ldr	r1, [r2, #0]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	f241 1304 	movw	r3, #4356	; 0x1104
 8002be2:	440b      	add	r3, r1
 8002be4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	7f1b      	ldrb	r3, [r3, #28]
 8002bea:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	f241 1308 	movw	r3, #4360	; 0x1108
 8002bfc:	4413      	add	r3, r2
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <ETH_SetDMAConfig+0x108>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6811      	ldr	r1, [r2, #0]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	f241 1308 	movw	r3, #4360	; 0x1108
 8002c10:	440b      	add	r3, r1
 8002c12:	601a      	str	r2, [r3, #0]
}
 8002c14:	bf00      	nop
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	ffff87fd 	.word	0xffff87fd
 8002c24:	ffff2ffe 	.word	0xffff2ffe
 8002c28:	fffec000 	.word	0xfffec000
 8002c2c:	ffc0efef 	.word	0xffc0efef
 8002c30:	7fc0ffff 	.word	0x7fc0ffff

08002c34 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b0a4      	sub	sp, #144	; 0x90
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002c42:	2300      	movs	r3, #0
 8002c44:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002c46:	2300      	movs	r3, #0
 8002c48:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002c52:	2301      	movs	r3, #1
 8002c54:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002c64:	2300      	movs	r3, #0
 8002c66:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002c70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c74:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002c76:	2300      	movs	r3, #0
 8002c78:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002c80:	2300      	movs	r3, #0
 8002c82:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002c8c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002c90:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002c92:	2300      	movs	r3, #0
 8002c94:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002ccc:	2320      	movs	r3, #32
 8002cce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002cde:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002ce4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ce8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002cea:	2300      	movs	r3, #0
 8002cec:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002d12:	2301      	movs	r3, #1
 8002d14:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002d18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff fde6 	bl	80028f0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002d24:	2301      	movs	r3, #1
 8002d26:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002d30:	2300      	movs	r3, #0
 8002d32:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002d36:	2300      	movs	r3, #0
 8002d38:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d3e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d42:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002d44:	2300      	movs	r3, #0
 8002d46:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002d48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d4c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002d54:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002d58:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002d5a:	f107 0308 	add.w	r3, r7, #8
 8002d5e:	4619      	mov	r1, r3
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff fee1 	bl	8002b28 <ETH_SetDMAConfig>
}
 8002d66:	bf00      	nop
 8002d68:	3790      	adds	r7, #144	; 0x90
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d80:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d88:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002d8a:	f004 f90f 	bl	8006fac <HAL_RCC_GetHCLKFreq>
 8002d8e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4a1e      	ldr	r2, [pc, #120]	; (8002e0c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d908      	bls.n	8002daa <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	4a1d      	ldr	r2, [pc, #116]	; (8002e10 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d804      	bhi.n	8002daa <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	e027      	b.n	8002dfa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	4a18      	ldr	r2, [pc, #96]	; (8002e10 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d908      	bls.n	8002dc4 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	4a17      	ldr	r2, [pc, #92]	; (8002e14 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d204      	bcs.n	8002dc4 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	e01a      	b.n	8002dfa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4a13      	ldr	r2, [pc, #76]	; (8002e14 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d303      	bcc.n	8002dd4 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4a12      	ldr	r2, [pc, #72]	; (8002e18 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d911      	bls.n	8002df8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4a10      	ldr	r2, [pc, #64]	; (8002e18 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d908      	bls.n	8002dee <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4a0f      	ldr	r2, [pc, #60]	; (8002e1c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d804      	bhi.n	8002dee <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	e005      	b.n	8002dfa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	e000      	b.n	8002dfa <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002df8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002e04:	bf00      	nop
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	01312cff 	.word	0x01312cff
 8002e10:	02160ebf 	.word	0x02160ebf
 8002e14:	03938700 	.word	0x03938700
 8002e18:	05f5e0ff 	.word	0x05f5e0ff
 8002e1c:	08f0d17f 	.word	0x08f0d17f

08002e20 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	e01d      	b.n	8002e6a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68d9      	ldr	r1, [r3, #12]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4613      	mov	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	440b      	add	r3, r1
 8002e3e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2200      	movs	r2, #0
 8002e56:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	3206      	adds	r2, #6
 8002e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	3301      	adds	r3, #1
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	d9de      	bls.n	8002e2e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	f241 132c 	movw	r3, #4396	; 0x112c
 8002e7e:	4413      	add	r3, r2
 8002e80:	2203      	movs	r2, #3
 8002e82:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68d9      	ldr	r1, [r3, #12]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	f241 1314 	movw	r3, #4372	; 0x1114
 8002e90:	4413      	add	r3, r2
 8002e92:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002ea0:	601a      	str	r2, [r3, #0]
}
 8002ea2:	bf00      	nop
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b085      	sub	sp, #20
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	e024      	b.n	8002f06 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6919      	ldr	r1, [r3, #16]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4413      	add	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	440b      	add	r3, r1
 8002ecc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2200      	movs	r2, #0
 8002ede:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3310      	adds	r3, #16
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	3301      	adds	r3, #1
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d9d7      	bls.n	8002ebc <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	f241 1330 	movw	r3, #4400	; 0x1130
 8002f32:	4413      	add	r3, r2
 8002f34:	2203      	movs	r2, #3
 8002f36:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6919      	ldr	r1, [r3, #16]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	f241 131c 	movw	r3, #4380	; 0x111c
 8002f44:	4413      	add	r3, r2
 8002f46:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	f241 1328 	movw	r3, #4392	; 0x1128
 8002f58:	4413      	add	r3, r2
 8002f5a:	6019      	str	r1, [r3, #0]
}
 8002f5c:	bf00      	nop
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b089      	sub	sp, #36	; 0x24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002f76:	4b89      	ldr	r3, [pc, #548]	; (800319c <HAL_GPIO_Init+0x234>)
 8002f78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f7a:	e194      	b.n	80032a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	2101      	movs	r1, #1
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	fa01 f303 	lsl.w	r3, r1, r3
 8002f88:	4013      	ands	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 8186 	beq.w	80032a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d005      	beq.n	8002fac <HAL_GPIO_Init+0x44>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d130      	bne.n	800300e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	f003 0201 	and.w	r2, r3, #1
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	2b03      	cmp	r3, #3
 8003018:	d017      	beq.n	800304a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	2203      	movs	r2, #3
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d123      	bne.n	800309e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	08da      	lsrs	r2, r3, #3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3208      	adds	r2, #8
 800305e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003062:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	220f      	movs	r2, #15
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	08da      	lsrs	r2, r3, #3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3208      	adds	r2, #8
 8003098:	69b9      	ldr	r1, [r7, #24]
 800309a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	2203      	movs	r2, #3
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f003 0203 	and.w	r2, r3, #3
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 80e0 	beq.w	80032a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e0:	4b2f      	ldr	r3, [pc, #188]	; (80031a0 <HAL_GPIO_Init+0x238>)
 80030e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80030e6:	4a2e      	ldr	r2, [pc, #184]	; (80031a0 <HAL_GPIO_Init+0x238>)
 80030e8:	f043 0302 	orr.w	r3, r3, #2
 80030ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80030f0:	4b2b      	ldr	r3, [pc, #172]	; (80031a0 <HAL_GPIO_Init+0x238>)
 80030f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030fe:	4a29      	ldr	r2, [pc, #164]	; (80031a4 <HAL_GPIO_Init+0x23c>)
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	089b      	lsrs	r3, r3, #2
 8003104:	3302      	adds	r3, #2
 8003106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800310a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	220f      	movs	r2, #15
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43db      	mvns	r3, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4013      	ands	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a20      	ldr	r2, [pc, #128]	; (80031a8 <HAL_GPIO_Init+0x240>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d052      	beq.n	80031d0 <HAL_GPIO_Init+0x268>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a1f      	ldr	r2, [pc, #124]	; (80031ac <HAL_GPIO_Init+0x244>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d031      	beq.n	8003196 <HAL_GPIO_Init+0x22e>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a1e      	ldr	r2, [pc, #120]	; (80031b0 <HAL_GPIO_Init+0x248>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d02b      	beq.n	8003192 <HAL_GPIO_Init+0x22a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a1d      	ldr	r2, [pc, #116]	; (80031b4 <HAL_GPIO_Init+0x24c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d025      	beq.n	800318e <HAL_GPIO_Init+0x226>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a1c      	ldr	r2, [pc, #112]	; (80031b8 <HAL_GPIO_Init+0x250>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d01f      	beq.n	800318a <HAL_GPIO_Init+0x222>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a1b      	ldr	r2, [pc, #108]	; (80031bc <HAL_GPIO_Init+0x254>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d019      	beq.n	8003186 <HAL_GPIO_Init+0x21e>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a1a      	ldr	r2, [pc, #104]	; (80031c0 <HAL_GPIO_Init+0x258>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d013      	beq.n	8003182 <HAL_GPIO_Init+0x21a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a19      	ldr	r2, [pc, #100]	; (80031c4 <HAL_GPIO_Init+0x25c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00d      	beq.n	800317e <HAL_GPIO_Init+0x216>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a18      	ldr	r2, [pc, #96]	; (80031c8 <HAL_GPIO_Init+0x260>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d007      	beq.n	800317a <HAL_GPIO_Init+0x212>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a17      	ldr	r2, [pc, #92]	; (80031cc <HAL_GPIO_Init+0x264>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d101      	bne.n	8003176 <HAL_GPIO_Init+0x20e>
 8003172:	2309      	movs	r3, #9
 8003174:	e02d      	b.n	80031d2 <HAL_GPIO_Init+0x26a>
 8003176:	230a      	movs	r3, #10
 8003178:	e02b      	b.n	80031d2 <HAL_GPIO_Init+0x26a>
 800317a:	2308      	movs	r3, #8
 800317c:	e029      	b.n	80031d2 <HAL_GPIO_Init+0x26a>
 800317e:	2307      	movs	r3, #7
 8003180:	e027      	b.n	80031d2 <HAL_GPIO_Init+0x26a>
 8003182:	2306      	movs	r3, #6
 8003184:	e025      	b.n	80031d2 <HAL_GPIO_Init+0x26a>
 8003186:	2305      	movs	r3, #5
 8003188:	e023      	b.n	80031d2 <HAL_GPIO_Init+0x26a>
 800318a:	2304      	movs	r3, #4
 800318c:	e021      	b.n	80031d2 <HAL_GPIO_Init+0x26a>
 800318e:	2303      	movs	r3, #3
 8003190:	e01f      	b.n	80031d2 <HAL_GPIO_Init+0x26a>
 8003192:	2302      	movs	r3, #2
 8003194:	e01d      	b.n	80031d2 <HAL_GPIO_Init+0x26a>
 8003196:	2301      	movs	r3, #1
 8003198:	e01b      	b.n	80031d2 <HAL_GPIO_Init+0x26a>
 800319a:	bf00      	nop
 800319c:	58000080 	.word	0x58000080
 80031a0:	58024400 	.word	0x58024400
 80031a4:	58000400 	.word	0x58000400
 80031a8:	58020000 	.word	0x58020000
 80031ac:	58020400 	.word	0x58020400
 80031b0:	58020800 	.word	0x58020800
 80031b4:	58020c00 	.word	0x58020c00
 80031b8:	58021000 	.word	0x58021000
 80031bc:	58021400 	.word	0x58021400
 80031c0:	58021800 	.word	0x58021800
 80031c4:	58021c00 	.word	0x58021c00
 80031c8:	58022000 	.word	0x58022000
 80031cc:	58022400 	.word	0x58022400
 80031d0:	2300      	movs	r3, #0
 80031d2:	69fa      	ldr	r2, [r7, #28]
 80031d4:	f002 0203 	and.w	r2, r2, #3
 80031d8:	0092      	lsls	r2, r2, #2
 80031da:	4093      	lsls	r3, r2
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	4313      	orrs	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031e2:	4938      	ldr	r1, [pc, #224]	; (80032c4 <HAL_GPIO_Init+0x35c>)
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	089b      	lsrs	r3, r3, #2
 80031e8:	3302      	adds	r3, #2
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	43db      	mvns	r3, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4013      	ands	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003216:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800321e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	43db      	mvns	r3, r3
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4013      	ands	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003244:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	43db      	mvns	r3, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4013      	ands	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	43db      	mvns	r3, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4013      	ands	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	3301      	adds	r3, #1
 80032a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	fa22 f303 	lsr.w	r3, r2, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f47f ae63 	bne.w	8002f7c <HAL_GPIO_Init+0x14>
  }
}
 80032b6:	bf00      	nop
 80032b8:	bf00      	nop
 80032ba:	3724      	adds	r7, #36	; 0x24
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	58000400 	.word	0x58000400

080032c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	807b      	strh	r3, [r7, #2]
 80032d4:	4613      	mov	r3, r2
 80032d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032d8:	787b      	ldrb	r3, [r7, #1]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032de:	887a      	ldrh	r2, [r7, #2]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80032e4:	e003      	b.n	80032ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80032e6:	887b      	ldrh	r3, [r7, #2]
 80032e8:	041a      	lsls	r2, r3, #16
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	619a      	str	r2, [r3, #24]
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80032fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032fc:	b08f      	sub	sp, #60	; 0x3c
 80032fe:	af0a      	add	r7, sp, #40	; 0x28
 8003300:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e054      	b.n	80033b6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d106      	bne.n	800332c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f00a fda6 	bl	800de78 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2203      	movs	r2, #3
 8003330:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333c:	2b00      	cmp	r3, #0
 800333e:	d102      	bne.n	8003346 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f007 fdcb 	bl	800aee6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	603b      	str	r3, [r7, #0]
 8003356:	687e      	ldr	r6, [r7, #4]
 8003358:	466d      	mov	r5, sp
 800335a:	f106 0410 	add.w	r4, r6, #16
 800335e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003362:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003364:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003366:	e894 0003 	ldmia.w	r4, {r0, r1}
 800336a:	e885 0003 	stmia.w	r5, {r0, r1}
 800336e:	1d33      	adds	r3, r6, #4
 8003370:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003372:	6838      	ldr	r0, [r7, #0]
 8003374:	f007 fd38 	bl	800ade8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2101      	movs	r1, #1
 800337e:	4618      	mov	r0, r3
 8003380:	f007 fdc2 	bl	800af08 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	603b      	str	r3, [r7, #0]
 800338a:	687e      	ldr	r6, [r7, #4]
 800338c:	466d      	mov	r5, sp
 800338e:	f106 0410 	add.w	r4, r6, #16
 8003392:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003394:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800339a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800339e:	e885 0003 	stmia.w	r5, {r0, r1}
 80033a2:	1d33      	adds	r3, r6, #4
 80033a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033a6:	6838      	ldr	r0, [r7, #0]
 80033a8:	f007 ff44 	bl	800b234 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033be <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80033be:	b590      	push	{r4, r7, lr}
 80033c0:	b089      	sub	sp, #36	; 0x24
 80033c2:	af04      	add	r7, sp, #16
 80033c4:	6078      	str	r0, [r7, #4]
 80033c6:	4608      	mov	r0, r1
 80033c8:	4611      	mov	r1, r2
 80033ca:	461a      	mov	r2, r3
 80033cc:	4603      	mov	r3, r0
 80033ce:	70fb      	strb	r3, [r7, #3]
 80033d0:	460b      	mov	r3, r1
 80033d2:	70bb      	strb	r3, [r7, #2]
 80033d4:	4613      	mov	r3, r2
 80033d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d101      	bne.n	80033e6 <HAL_HCD_HC_Init+0x28>
 80033e2:	2302      	movs	r3, #2
 80033e4:	e076      	b.n	80034d4 <HAL_HCD_HC_Init+0x116>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80033ee:	78fb      	ldrb	r3, [r7, #3]
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	212c      	movs	r1, #44	; 0x2c
 80033f4:	fb01 f303 	mul.w	r3, r1, r3
 80033f8:	4413      	add	r3, r2
 80033fa:	333d      	adds	r3, #61	; 0x3d
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003400:	78fb      	ldrb	r3, [r7, #3]
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	212c      	movs	r1, #44	; 0x2c
 8003406:	fb01 f303 	mul.w	r3, r1, r3
 800340a:	4413      	add	r3, r2
 800340c:	3338      	adds	r3, #56	; 0x38
 800340e:	787a      	ldrb	r2, [r7, #1]
 8003410:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003412:	78fb      	ldrb	r3, [r7, #3]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	212c      	movs	r1, #44	; 0x2c
 8003418:	fb01 f303 	mul.w	r3, r1, r3
 800341c:	4413      	add	r3, r2
 800341e:	3340      	adds	r3, #64	; 0x40
 8003420:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003422:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003424:	78fb      	ldrb	r3, [r7, #3]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	212c      	movs	r1, #44	; 0x2c
 800342a:	fb01 f303 	mul.w	r3, r1, r3
 800342e:	4413      	add	r3, r2
 8003430:	3339      	adds	r3, #57	; 0x39
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003436:	78fb      	ldrb	r3, [r7, #3]
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	212c      	movs	r1, #44	; 0x2c
 800343c:	fb01 f303 	mul.w	r3, r1, r3
 8003440:	4413      	add	r3, r2
 8003442:	333f      	adds	r3, #63	; 0x3f
 8003444:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003448:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800344a:	78fb      	ldrb	r3, [r7, #3]
 800344c:	78ba      	ldrb	r2, [r7, #2]
 800344e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003452:	b2d0      	uxtb	r0, r2
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	212c      	movs	r1, #44	; 0x2c
 8003458:	fb01 f303 	mul.w	r3, r1, r3
 800345c:	4413      	add	r3, r2
 800345e:	333a      	adds	r3, #58	; 0x3a
 8003460:	4602      	mov	r2, r0
 8003462:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003464:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003468:	2b00      	cmp	r3, #0
 800346a:	da09      	bge.n	8003480 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	212c      	movs	r1, #44	; 0x2c
 8003472:	fb01 f303 	mul.w	r3, r1, r3
 8003476:	4413      	add	r3, r2
 8003478:	333b      	adds	r3, #59	; 0x3b
 800347a:	2201      	movs	r2, #1
 800347c:	701a      	strb	r2, [r3, #0]
 800347e:	e008      	b.n	8003492 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	212c      	movs	r1, #44	; 0x2c
 8003486:	fb01 f303 	mul.w	r3, r1, r3
 800348a:	4413      	add	r3, r2
 800348c:	333b      	adds	r3, #59	; 0x3b
 800348e:	2200      	movs	r2, #0
 8003490:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003492:	78fb      	ldrb	r3, [r7, #3]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	212c      	movs	r1, #44	; 0x2c
 8003498:	fb01 f303 	mul.w	r3, r1, r3
 800349c:	4413      	add	r3, r2
 800349e:	333c      	adds	r3, #60	; 0x3c
 80034a0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80034a4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6818      	ldr	r0, [r3, #0]
 80034aa:	787c      	ldrb	r4, [r7, #1]
 80034ac:	78ba      	ldrb	r2, [r7, #2]
 80034ae:	78f9      	ldrb	r1, [r7, #3]
 80034b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80034b2:	9302      	str	r3, [sp, #8]
 80034b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80034b8:	9301      	str	r3, [sp, #4]
 80034ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	4623      	mov	r3, r4
 80034c2:	f008 f837 	bl	800b534 <USB_HC_Init>
 80034c6:	4603      	mov	r3, r0
 80034c8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd90      	pop	{r4, r7, pc}

080034dc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d101      	bne.n	80034fa <HAL_HCD_HC_Halt+0x1e>
 80034f6:	2302      	movs	r3, #2
 80034f8:	e00f      	b.n	800351a <HAL_HCD_HC_Halt+0x3e>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	78fa      	ldrb	r2, [r7, #3]
 8003508:	4611      	mov	r1, r2
 800350a:	4618      	mov	r0, r3
 800350c:	f008 fa83 	bl	800ba16 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003518:	7bfb      	ldrb	r3, [r7, #15]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
	...

08003524 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	4608      	mov	r0, r1
 800352e:	4611      	mov	r1, r2
 8003530:	461a      	mov	r2, r3
 8003532:	4603      	mov	r3, r0
 8003534:	70fb      	strb	r3, [r7, #3]
 8003536:	460b      	mov	r3, r1
 8003538:	70bb      	strb	r3, [r7, #2]
 800353a:	4613      	mov	r3, r2
 800353c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800353e:	78fb      	ldrb	r3, [r7, #3]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	212c      	movs	r1, #44	; 0x2c
 8003544:	fb01 f303 	mul.w	r3, r1, r3
 8003548:	4413      	add	r3, r2
 800354a:	333b      	adds	r3, #59	; 0x3b
 800354c:	78ba      	ldrb	r2, [r7, #2]
 800354e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	212c      	movs	r1, #44	; 0x2c
 8003556:	fb01 f303 	mul.w	r3, r1, r3
 800355a:	4413      	add	r3, r2
 800355c:	333f      	adds	r3, #63	; 0x3f
 800355e:	787a      	ldrb	r2, [r7, #1]
 8003560:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003562:	7c3b      	ldrb	r3, [r7, #16]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d112      	bne.n	800358e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003568:	78fb      	ldrb	r3, [r7, #3]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	212c      	movs	r1, #44	; 0x2c
 800356e:	fb01 f303 	mul.w	r3, r1, r3
 8003572:	4413      	add	r3, r2
 8003574:	3342      	adds	r3, #66	; 0x42
 8003576:	2203      	movs	r2, #3
 8003578:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800357a:	78fb      	ldrb	r3, [r7, #3]
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	212c      	movs	r1, #44	; 0x2c
 8003580:	fb01 f303 	mul.w	r3, r1, r3
 8003584:	4413      	add	r3, r2
 8003586:	333d      	adds	r3, #61	; 0x3d
 8003588:	7f3a      	ldrb	r2, [r7, #28]
 800358a:	701a      	strb	r2, [r3, #0]
 800358c:	e008      	b.n	80035a0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800358e:	78fb      	ldrb	r3, [r7, #3]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	212c      	movs	r1, #44	; 0x2c
 8003594:	fb01 f303 	mul.w	r3, r1, r3
 8003598:	4413      	add	r3, r2
 800359a:	3342      	adds	r3, #66	; 0x42
 800359c:	2202      	movs	r2, #2
 800359e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80035a0:	787b      	ldrb	r3, [r7, #1]
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	f200 80c6 	bhi.w	8003734 <HAL_HCD_HC_SubmitRequest+0x210>
 80035a8:	a201      	add	r2, pc, #4	; (adr r2, 80035b0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80035aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ae:	bf00      	nop
 80035b0:	080035c1 	.word	0x080035c1
 80035b4:	08003721 	.word	0x08003721
 80035b8:	08003625 	.word	0x08003625
 80035bc:	080036a3 	.word	0x080036a3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80035c0:	7c3b      	ldrb	r3, [r7, #16]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	f040 80b8 	bne.w	8003738 <HAL_HCD_HC_SubmitRequest+0x214>
 80035c8:	78bb      	ldrb	r3, [r7, #2]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f040 80b4 	bne.w	8003738 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80035d0:	8b3b      	ldrh	r3, [r7, #24]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d108      	bne.n	80035e8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80035d6:	78fb      	ldrb	r3, [r7, #3]
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	212c      	movs	r1, #44	; 0x2c
 80035dc:	fb01 f303 	mul.w	r3, r1, r3
 80035e0:	4413      	add	r3, r2
 80035e2:	3355      	adds	r3, #85	; 0x55
 80035e4:	2201      	movs	r2, #1
 80035e6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	212c      	movs	r1, #44	; 0x2c
 80035ee:	fb01 f303 	mul.w	r3, r1, r3
 80035f2:	4413      	add	r3, r2
 80035f4:	3355      	adds	r3, #85	; 0x55
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d109      	bne.n	8003610 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035fc:	78fb      	ldrb	r3, [r7, #3]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	212c      	movs	r1, #44	; 0x2c
 8003602:	fb01 f303 	mul.w	r3, r1, r3
 8003606:	4413      	add	r3, r2
 8003608:	3342      	adds	r3, #66	; 0x42
 800360a:	2200      	movs	r2, #0
 800360c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800360e:	e093      	b.n	8003738 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	212c      	movs	r1, #44	; 0x2c
 8003616:	fb01 f303 	mul.w	r3, r1, r3
 800361a:	4413      	add	r3, r2
 800361c:	3342      	adds	r3, #66	; 0x42
 800361e:	2202      	movs	r2, #2
 8003620:	701a      	strb	r2, [r3, #0]
      break;
 8003622:	e089      	b.n	8003738 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003624:	78bb      	ldrb	r3, [r7, #2]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d11d      	bne.n	8003666 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800362a:	78fb      	ldrb	r3, [r7, #3]
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	212c      	movs	r1, #44	; 0x2c
 8003630:	fb01 f303 	mul.w	r3, r1, r3
 8003634:	4413      	add	r3, r2
 8003636:	3355      	adds	r3, #85	; 0x55
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d109      	bne.n	8003652 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	212c      	movs	r1, #44	; 0x2c
 8003644:	fb01 f303 	mul.w	r3, r1, r3
 8003648:	4413      	add	r3, r2
 800364a:	3342      	adds	r3, #66	; 0x42
 800364c:	2200      	movs	r2, #0
 800364e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003650:	e073      	b.n	800373a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003652:	78fb      	ldrb	r3, [r7, #3]
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	212c      	movs	r1, #44	; 0x2c
 8003658:	fb01 f303 	mul.w	r3, r1, r3
 800365c:	4413      	add	r3, r2
 800365e:	3342      	adds	r3, #66	; 0x42
 8003660:	2202      	movs	r2, #2
 8003662:	701a      	strb	r2, [r3, #0]
      break;
 8003664:	e069      	b.n	800373a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003666:	78fb      	ldrb	r3, [r7, #3]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	212c      	movs	r1, #44	; 0x2c
 800366c:	fb01 f303 	mul.w	r3, r1, r3
 8003670:	4413      	add	r3, r2
 8003672:	3354      	adds	r3, #84	; 0x54
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d109      	bne.n	800368e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800367a:	78fb      	ldrb	r3, [r7, #3]
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	212c      	movs	r1, #44	; 0x2c
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	4413      	add	r3, r2
 8003686:	3342      	adds	r3, #66	; 0x42
 8003688:	2200      	movs	r2, #0
 800368a:	701a      	strb	r2, [r3, #0]
      break;
 800368c:	e055      	b.n	800373a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	212c      	movs	r1, #44	; 0x2c
 8003694:	fb01 f303 	mul.w	r3, r1, r3
 8003698:	4413      	add	r3, r2
 800369a:	3342      	adds	r3, #66	; 0x42
 800369c:	2202      	movs	r2, #2
 800369e:	701a      	strb	r2, [r3, #0]
      break;
 80036a0:	e04b      	b.n	800373a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80036a2:	78bb      	ldrb	r3, [r7, #2]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d11d      	bne.n	80036e4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80036a8:	78fb      	ldrb	r3, [r7, #3]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	212c      	movs	r1, #44	; 0x2c
 80036ae:	fb01 f303 	mul.w	r3, r1, r3
 80036b2:	4413      	add	r3, r2
 80036b4:	3355      	adds	r3, #85	; 0x55
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d109      	bne.n	80036d0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036bc:	78fb      	ldrb	r3, [r7, #3]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	212c      	movs	r1, #44	; 0x2c
 80036c2:	fb01 f303 	mul.w	r3, r1, r3
 80036c6:	4413      	add	r3, r2
 80036c8:	3342      	adds	r3, #66	; 0x42
 80036ca:	2200      	movs	r2, #0
 80036cc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80036ce:	e034      	b.n	800373a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	212c      	movs	r1, #44	; 0x2c
 80036d6:	fb01 f303 	mul.w	r3, r1, r3
 80036da:	4413      	add	r3, r2
 80036dc:	3342      	adds	r3, #66	; 0x42
 80036de:	2202      	movs	r2, #2
 80036e0:	701a      	strb	r2, [r3, #0]
      break;
 80036e2:	e02a      	b.n	800373a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80036e4:	78fb      	ldrb	r3, [r7, #3]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	212c      	movs	r1, #44	; 0x2c
 80036ea:	fb01 f303 	mul.w	r3, r1, r3
 80036ee:	4413      	add	r3, r2
 80036f0:	3354      	adds	r3, #84	; 0x54
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d109      	bne.n	800370c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	212c      	movs	r1, #44	; 0x2c
 80036fe:	fb01 f303 	mul.w	r3, r1, r3
 8003702:	4413      	add	r3, r2
 8003704:	3342      	adds	r3, #66	; 0x42
 8003706:	2200      	movs	r2, #0
 8003708:	701a      	strb	r2, [r3, #0]
      break;
 800370a:	e016      	b.n	800373a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	212c      	movs	r1, #44	; 0x2c
 8003712:	fb01 f303 	mul.w	r3, r1, r3
 8003716:	4413      	add	r3, r2
 8003718:	3342      	adds	r3, #66	; 0x42
 800371a:	2202      	movs	r2, #2
 800371c:	701a      	strb	r2, [r3, #0]
      break;
 800371e:	e00c      	b.n	800373a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	212c      	movs	r1, #44	; 0x2c
 8003726:	fb01 f303 	mul.w	r3, r1, r3
 800372a:	4413      	add	r3, r2
 800372c:	3342      	adds	r3, #66	; 0x42
 800372e:	2200      	movs	r2, #0
 8003730:	701a      	strb	r2, [r3, #0]
      break;
 8003732:	e002      	b.n	800373a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003734:	bf00      	nop
 8003736:	e000      	b.n	800373a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003738:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800373a:	78fb      	ldrb	r3, [r7, #3]
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	212c      	movs	r1, #44	; 0x2c
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	4413      	add	r3, r2
 8003746:	3344      	adds	r3, #68	; 0x44
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	8b3a      	ldrh	r2, [r7, #24]
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	202c      	movs	r0, #44	; 0x2c
 8003754:	fb00 f303 	mul.w	r3, r0, r3
 8003758:	440b      	add	r3, r1
 800375a:	334c      	adds	r3, #76	; 0x4c
 800375c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800375e:	78fb      	ldrb	r3, [r7, #3]
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	212c      	movs	r1, #44	; 0x2c
 8003764:	fb01 f303 	mul.w	r3, r1, r3
 8003768:	4413      	add	r3, r2
 800376a:	3360      	adds	r3, #96	; 0x60
 800376c:	2200      	movs	r2, #0
 800376e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	212c      	movs	r1, #44	; 0x2c
 8003776:	fb01 f303 	mul.w	r3, r1, r3
 800377a:	4413      	add	r3, r2
 800377c:	3350      	adds	r3, #80	; 0x50
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003782:	78fb      	ldrb	r3, [r7, #3]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	212c      	movs	r1, #44	; 0x2c
 8003788:	fb01 f303 	mul.w	r3, r1, r3
 800378c:	4413      	add	r3, r2
 800378e:	3339      	adds	r3, #57	; 0x39
 8003790:	78fa      	ldrb	r2, [r7, #3]
 8003792:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	212c      	movs	r1, #44	; 0x2c
 800379a:	fb01 f303 	mul.w	r3, r1, r3
 800379e:	4413      	add	r3, r2
 80037a0:	3361      	adds	r3, #97	; 0x61
 80037a2:	2200      	movs	r2, #0
 80037a4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	222c      	movs	r2, #44	; 0x2c
 80037ae:	fb02 f303 	mul.w	r3, r2, r3
 80037b2:	3338      	adds	r3, #56	; 0x38
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	18d1      	adds	r1, r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	461a      	mov	r2, r3
 80037c0:	f007 ffd6 	bl	800b770 <USB_HC_StartXfer>
 80037c4:	4603      	mov	r3, r0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop

080037d0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f007 fce3 	bl	800b1b2 <USB_GetMode>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	f040 80f6 	bne.w	80039e0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f007 fcc7 	bl	800b18c <USB_ReadInterrupts>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 80ec 	beq.w	80039de <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f007 fcbe 	bl	800b18c <USB_ReadInterrupts>
 8003810:	4603      	mov	r3, r0
 8003812:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003816:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800381a:	d104      	bne.n	8003826 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003824:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f007 fcae 	bl	800b18c <USB_ReadInterrupts>
 8003830:	4603      	mov	r3, r0
 8003832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800383a:	d104      	bne.n	8003846 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003844:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f007 fc9e 	bl	800b18c <USB_ReadInterrupts>
 8003850:	4603      	mov	r3, r0
 8003852:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003856:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800385a:	d104      	bne.n	8003866 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003864:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f007 fc8e 	bl	800b18c <USB_ReadInterrupts>
 8003870:	4603      	mov	r3, r0
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b02      	cmp	r3, #2
 8003878:	d103      	bne.n	8003882 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2202      	movs	r2, #2
 8003880:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f007 fc80 	bl	800b18c <USB_ReadInterrupts>
 800388c:	4603      	mov	r3, r0
 800388e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003892:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003896:	d11c      	bne.n	80038d2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80038a0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10f      	bne.n	80038d2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80038b2:	2110      	movs	r1, #16
 80038b4:	6938      	ldr	r0, [r7, #16]
 80038b6:	f007 fb73 	bl	800afa0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80038ba:	6938      	ldr	r0, [r7, #16]
 80038bc:	f007 fba2 	bl	800b004 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2101      	movs	r1, #1
 80038c6:	4618      	mov	r0, r3
 80038c8:	f007 fd6e 	bl	800b3a8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f00a fb81 	bl	800dfd4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f007 fc58 	bl	800b18c <USB_ReadInterrupts>
 80038dc:	4603      	mov	r3, r0
 80038de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038e6:	d102      	bne.n	80038ee <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f001 f8ca 	bl	8004a82 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f007 fc4a 	bl	800b18c <USB_ReadInterrupts>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d106      	bne.n	8003910 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f00a fb4a 	bl	800df9c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2208      	movs	r2, #8
 800390e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f007 fc39 	bl	800b18c <USB_ReadInterrupts>
 800391a:	4603      	mov	r3, r0
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	2b10      	cmp	r3, #16
 8003922:	d101      	bne.n	8003928 <HAL_HCD_IRQHandler+0x158>
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <HAL_HCD_IRQHandler+0x15a>
 8003928:	2300      	movs	r3, #0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d012      	beq.n	8003954 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	699a      	ldr	r2, [r3, #24]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0210 	bic.w	r2, r2, #16
 800393c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 ffcd 	bl	80048de <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699a      	ldr	r2, [r3, #24]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0210 	orr.w	r2, r2, #16
 8003952:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f007 fc17 	bl	800b18c <USB_ReadInterrupts>
 800395e:	4603      	mov	r3, r0
 8003960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003964:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003968:	d13a      	bne.n	80039e0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f008 f840 	bl	800b9f4 <USB_HC_ReadInterrupt>
 8003974:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003976:	2300      	movs	r3, #0
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	e025      	b.n	80039c8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	fa22 f303 	lsr.w	r3, r2, r3
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d018      	beq.n	80039c2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4413      	add	r3, r2
 8003998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a6:	d106      	bne.n	80039b6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	4619      	mov	r1, r3
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f8ab 	bl	8003b0a <HCD_HC_IN_IRQHandler>
 80039b4:	e005      	b.n	80039c2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	4619      	mov	r1, r3
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 fc25 	bl	800420c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	3301      	adds	r3, #1
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d3d4      	bcc.n	800397c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039da:	615a      	str	r2, [r3, #20]
 80039dc:	e000      	b.n	80039e0 <HAL_HCD_IRQHandler+0x210>
      return;
 80039de:	bf00      	nop
    }
  }
}
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b082      	sub	sp, #8
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_HCD_Start+0x16>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e013      	b.n	8003a24 <HAL_HCD_Start+0x3e>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2101      	movs	r1, #1
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f007 fd30 	bl	800b470 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f007 fa55 	bl	800aec4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d101      	bne.n	8003a42 <HAL_HCD_Stop+0x16>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	e00d      	b.n	8003a5e <HAL_HCD_Stop+0x32>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f008 f918 	bl	800bc84 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b082      	sub	sp, #8
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f007 fcd2 	bl	800b41c <USB_ResetPort>
 8003a78:	4603      	mov	r3, r0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003a8e:	78fb      	ldrb	r3, [r7, #3]
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	212c      	movs	r1, #44	; 0x2c
 8003a94:	fb01 f303 	mul.w	r3, r1, r3
 8003a98:	4413      	add	r3, r2
 8003a9a:	3360      	adds	r3, #96	; 0x60
 8003a9c:	781b      	ldrb	r3, [r3, #0]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003ab6:	78fb      	ldrb	r3, [r7, #3]
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	212c      	movs	r1, #44	; 0x2c
 8003abc:	fb01 f303 	mul.w	r3, r1, r3
 8003ac0:	4413      	add	r3, r2
 8003ac2:	3350      	adds	r3, #80	; 0x50
 8003ac4:	681b      	ldr	r3, [r3, #0]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f007 fd16 	bl	800b510 <USB_GetCurrentFrame>
 8003ae4:	4603      	mov	r3, r0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b082      	sub	sp, #8
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f007 fcf1 	bl	800b4e2 <USB_GetHostSpeed>
 8003b00:	4603      	mov	r3, r0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b086      	sub	sp, #24
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	460b      	mov	r3, r1
 8003b14:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003b20:	78fb      	ldrb	r3, [r7, #3]
 8003b22:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d11a      	bne.n	8003b70 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b46:	461a      	mov	r2, r3
 8003b48:	2304      	movs	r3, #4
 8003b4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	212c      	movs	r1, #44	; 0x2c
 8003b52:	fb01 f303 	mul.w	r3, r1, r3
 8003b56:	4413      	add	r3, r2
 8003b58:	3361      	adds	r3, #97	; 0x61
 8003b5a:	2206      	movs	r2, #6
 8003b5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	4611      	mov	r1, r2
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f007 ff54 	bl	800ba16 <USB_HC_Halt>
 8003b6e:	e0af      	b.n	8003cd0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	015a      	lsls	r2, r3, #5
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b86:	d11b      	bne.n	8003bc0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b94:	461a      	mov	r2, r3
 8003b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	212c      	movs	r1, #44	; 0x2c
 8003ba2:	fb01 f303 	mul.w	r3, r1, r3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3361      	adds	r3, #97	; 0x61
 8003baa:	2207      	movs	r2, #7
 8003bac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f007 ff2c 	bl	800ba16 <USB_HC_Halt>
 8003bbe:	e087      	b.n	8003cd0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 0320 	and.w	r3, r3, #32
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	d109      	bne.n	8003bea <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be2:	461a      	mov	r2, r3
 8003be4:	2320      	movs	r3, #32
 8003be6:	6093      	str	r3, [r2, #8]
 8003be8:	e072      	b.n	8003cd0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d11a      	bne.n	8003c36 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	2308      	movs	r3, #8
 8003c10:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	212c      	movs	r1, #44	; 0x2c
 8003c18:	fb01 f303 	mul.w	r3, r1, r3
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3361      	adds	r3, #97	; 0x61
 8003c20:	2205      	movs	r2, #5
 8003c22:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	4611      	mov	r1, r2
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f007 fef1 	bl	800ba16 <USB_HC_Halt>
 8003c34:	e04c      	b.n	8003cd0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4c:	d11b      	bne.n	8003c86 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c60:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	212c      	movs	r1, #44	; 0x2c
 8003c68:	fb01 f303 	mul.w	r3, r1, r3
 8003c6c:	4413      	add	r3, r2
 8003c6e:	3361      	adds	r3, #97	; 0x61
 8003c70:	2208      	movs	r2, #8
 8003c72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	4611      	mov	r1, r2
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f007 fec9 	bl	800ba16 <USB_HC_Halt>
 8003c84:	e024      	b.n	8003cd0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	015a      	lsls	r2, r3, #5
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c98:	2b80      	cmp	r3, #128	; 0x80
 8003c9a:	d119      	bne.n	8003cd0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca8:	461a      	mov	r2, r3
 8003caa:	2380      	movs	r3, #128	; 0x80
 8003cac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	212c      	movs	r1, #44	; 0x2c
 8003cb4:	fb01 f303 	mul.w	r3, r1, r3
 8003cb8:	4413      	add	r3, r2
 8003cba:	3361      	adds	r3, #97	; 0x61
 8003cbc:	2206      	movs	r2, #6
 8003cbe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	4611      	mov	r1, r2
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f007 fea3 	bl	800ba16 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ce2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ce6:	d112      	bne.n	8003d0e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	4611      	mov	r1, r2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f007 fe8f 	bl	800ba16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d04:	461a      	mov	r2, r3
 8003d06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d0a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003d0c:	e27a      	b.n	8004204 <HCD_HC_IN_IRQHandler+0x6fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	f040 810b 	bne.w	8003f3c <HCD_HC_IN_IRQHandler+0x432>
    if (hhcd->Init.dma_enable != 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d019      	beq.n	8003d62 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	212c      	movs	r1, #44	; 0x2c
 8003d34:	fb01 f303 	mul.w	r3, r1, r3
 8003d38:	4413      	add	r3, r2
 8003d3a:	3348      	adds	r3, #72	; 0x48
 8003d3c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	0159      	lsls	r1, r3, #5
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	440b      	add	r3, r1
 8003d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003d50:	1ad2      	subs	r2, r2, r3
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	202c      	movs	r0, #44	; 0x2c
 8003d58:	fb00 f303 	mul.w	r3, r0, r3
 8003d5c:	440b      	add	r3, r1
 8003d5e:	3350      	adds	r3, #80	; 0x50
 8003d60:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	212c      	movs	r1, #44	; 0x2c
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	3361      	adds	r3, #97	; 0x61
 8003d70:	2201      	movs	r2, #1
 8003d72:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	212c      	movs	r1, #44	; 0x2c
 8003d7a:	fb01 f303 	mul.w	r3, r1, r3
 8003d7e:	4413      	add	r3, r2
 8003d80:	335c      	adds	r3, #92	; 0x5c
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	015a      	lsls	r2, r3, #5
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d92:	461a      	mov	r2, r3
 8003d94:	2301      	movs	r3, #1
 8003d96:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	212c      	movs	r1, #44	; 0x2c
 8003d9e:	fb01 f303 	mul.w	r3, r1, r3
 8003da2:	4413      	add	r3, r2
 8003da4:	333f      	adds	r3, #63	; 0x3f
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d009      	beq.n	8003dc0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	212c      	movs	r1, #44	; 0x2c
 8003db2:	fb01 f303 	mul.w	r3, r1, r3
 8003db6:	4413      	add	r3, r2
 8003db8:	333f      	adds	r3, #63	; 0x3f
 8003dba:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d111      	bne.n	8003de4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	4611      	mov	r1, r2
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f007 fe23 	bl	800ba16 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ddc:	461a      	mov	r2, r3
 8003dde:	2310      	movs	r3, #16
 8003de0:	6093      	str	r3, [r2, #8]
 8003de2:	e066      	b.n	8003eb2 <HCD_HC_IN_IRQHandler+0x3a8>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	212c      	movs	r1, #44	; 0x2c
 8003dea:	fb01 f303 	mul.w	r3, r1, r3
 8003dee:	4413      	add	r3, r2
 8003df0:	333f      	adds	r3, #63	; 0x3f
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d127      	bne.n	8003e48 <HCD_HC_IN_IRQHandler+0x33e>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	0151      	lsls	r1, r2, #5
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	440a      	add	r2, r1
 8003e0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e16:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	212c      	movs	r1, #44	; 0x2c
 8003e1e:	fb01 f303 	mul.w	r3, r1, r3
 8003e22:	4413      	add	r3, r2
 8003e24:	3360      	adds	r3, #96	; 0x60
 8003e26:	2201      	movs	r2, #1
 8003e28:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	b2d9      	uxtb	r1, r3
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	202c      	movs	r0, #44	; 0x2c
 8003e34:	fb00 f303 	mul.w	r3, r0, r3
 8003e38:	4413      	add	r3, r2
 8003e3a:	3360      	adds	r3, #96	; 0x60
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f00a f8d5 	bl	800dff0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003e46:	e034      	b.n	8003eb2 <HCD_HC_IN_IRQHandler+0x3a8>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	212c      	movs	r1, #44	; 0x2c
 8003e4e:	fb01 f303 	mul.w	r3, r1, r3
 8003e52:	4413      	add	r3, r2
 8003e54:	333f      	adds	r3, #63	; 0x3f
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d12a      	bne.n	8003eb2 <HCD_HC_IN_IRQHandler+0x3a8>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	212c      	movs	r1, #44	; 0x2c
 8003e62:	fb01 f303 	mul.w	r3, r1, r3
 8003e66:	4413      	add	r3, r2
 8003e68:	3360      	adds	r3, #96	; 0x60
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	212c      	movs	r1, #44	; 0x2c
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	4413      	add	r3, r2
 8003e7a:	3354      	adds	r3, #84	; 0x54
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	f083 0301 	eor.w	r3, r3, #1
 8003e82:	b2d8      	uxtb	r0, r3
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	212c      	movs	r1, #44	; 0x2c
 8003e8a:	fb01 f303 	mul.w	r3, r1, r3
 8003e8e:	4413      	add	r3, r2
 8003e90:	3354      	adds	r3, #84	; 0x54
 8003e92:	4602      	mov	r2, r0
 8003e94:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	b2d9      	uxtb	r1, r3
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	202c      	movs	r0, #44	; 0x2c
 8003ea0:	fb00 f303 	mul.w	r3, r0, r3
 8003ea4:	4413      	add	r3, r2
 8003ea6:	3360      	adds	r3, #96	; 0x60
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f00a f89f 	bl	800dff0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d12b      	bne.n	8003f12 <HCD_HC_IN_IRQHandler+0x408>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	212c      	movs	r1, #44	; 0x2c
 8003ec0:	fb01 f303 	mul.w	r3, r1, r3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	3348      	adds	r3, #72	; 0x48
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	202c      	movs	r0, #44	; 0x2c
 8003ed0:	fb00 f202 	mul.w	r2, r0, r2
 8003ed4:	440a      	add	r2, r1
 8003ed6:	3240      	adds	r2, #64	; 0x40
 8003ed8:	8812      	ldrh	r2, [r2, #0]
 8003eda:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 818e 	beq.w	8004204 <HCD_HC_IN_IRQHandler+0x6fa>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	212c      	movs	r1, #44	; 0x2c
 8003eee:	fb01 f303 	mul.w	r3, r1, r3
 8003ef2:	4413      	add	r3, r2
 8003ef4:	3354      	adds	r3, #84	; 0x54
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	f083 0301 	eor.w	r3, r3, #1
 8003efc:	b2d8      	uxtb	r0, r3
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	212c      	movs	r1, #44	; 0x2c
 8003f04:	fb01 f303 	mul.w	r3, r1, r3
 8003f08:	4413      	add	r3, r2
 8003f0a:	3354      	adds	r3, #84	; 0x54
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	701a      	strb	r2, [r3, #0]
}
 8003f10:	e178      	b.n	8004204 <HCD_HC_IN_IRQHandler+0x6fa>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	212c      	movs	r1, #44	; 0x2c
 8003f18:	fb01 f303 	mul.w	r3, r1, r3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	3354      	adds	r3, #84	; 0x54
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	f083 0301 	eor.w	r3, r3, #1
 8003f26:	b2d8      	uxtb	r0, r3
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	212c      	movs	r1, #44	; 0x2c
 8003f2e:	fb01 f303 	mul.w	r3, r1, r3
 8003f32:	4413      	add	r3, r2
 8003f34:	3354      	adds	r3, #84	; 0x54
 8003f36:	4602      	mov	r2, r0
 8003f38:	701a      	strb	r2, [r3, #0]
}
 8003f3a:	e163      	b.n	8004204 <HCD_HC_IN_IRQHandler+0x6fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	f040 80f6 	bne.w	8004140 <HCD_HC_IN_IRQHandler+0x636>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	212c      	movs	r1, #44	; 0x2c
 8003f5a:	fb01 f303 	mul.w	r3, r1, r3
 8003f5e:	4413      	add	r3, r2
 8003f60:	3361      	adds	r3, #97	; 0x61
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d109      	bne.n	8003f7c <HCD_HC_IN_IRQHandler+0x472>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	212c      	movs	r1, #44	; 0x2c
 8003f6e:	fb01 f303 	mul.w	r3, r1, r3
 8003f72:	4413      	add	r3, r2
 8003f74:	3360      	adds	r3, #96	; 0x60
 8003f76:	2201      	movs	r2, #1
 8003f78:	701a      	strb	r2, [r3, #0]
 8003f7a:	e0c9      	b.n	8004110 <HCD_HC_IN_IRQHandler+0x606>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	212c      	movs	r1, #44	; 0x2c
 8003f82:	fb01 f303 	mul.w	r3, r1, r3
 8003f86:	4413      	add	r3, r2
 8003f88:	3361      	adds	r3, #97	; 0x61
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b05      	cmp	r3, #5
 8003f8e:	d109      	bne.n	8003fa4 <HCD_HC_IN_IRQHandler+0x49a>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	212c      	movs	r1, #44	; 0x2c
 8003f96:	fb01 f303 	mul.w	r3, r1, r3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3360      	adds	r3, #96	; 0x60
 8003f9e:	2205      	movs	r2, #5
 8003fa0:	701a      	strb	r2, [r3, #0]
 8003fa2:	e0b5      	b.n	8004110 <HCD_HC_IN_IRQHandler+0x606>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	212c      	movs	r1, #44	; 0x2c
 8003faa:	fb01 f303 	mul.w	r3, r1, r3
 8003fae:	4413      	add	r3, r2
 8003fb0:	3361      	adds	r3, #97	; 0x61
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b06      	cmp	r3, #6
 8003fb6:	d009      	beq.n	8003fcc <HCD_HC_IN_IRQHandler+0x4c2>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	212c      	movs	r1, #44	; 0x2c
 8003fbe:	fb01 f303 	mul.w	r3, r1, r3
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3361      	adds	r3, #97	; 0x61
 8003fc6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d150      	bne.n	800406e <HCD_HC_IN_IRQHandler+0x564>
      hhcd->hc[ch_num].ErrCnt++;
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	212c      	movs	r1, #44	; 0x2c
 8003fd2:	fb01 f303 	mul.w	r3, r1, r3
 8003fd6:	4413      	add	r3, r2
 8003fd8:	335c      	adds	r3, #92	; 0x5c
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	202c      	movs	r0, #44	; 0x2c
 8003fe4:	fb00 f303 	mul.w	r3, r0, r3
 8003fe8:	440b      	add	r3, r1
 8003fea:	335c      	adds	r3, #92	; 0x5c
 8003fec:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	212c      	movs	r1, #44	; 0x2c
 8003ff4:	fb01 f303 	mul.w	r3, r1, r3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	335c      	adds	r3, #92	; 0x5c
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d912      	bls.n	8004028 <HCD_HC_IN_IRQHandler+0x51e>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	212c      	movs	r1, #44	; 0x2c
 8004008:	fb01 f303 	mul.w	r3, r1, r3
 800400c:	4413      	add	r3, r2
 800400e:	335c      	adds	r3, #92	; 0x5c
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	212c      	movs	r1, #44	; 0x2c
 800401a:	fb01 f303 	mul.w	r3, r1, r3
 800401e:	4413      	add	r3, r2
 8004020:	3360      	adds	r3, #96	; 0x60
 8004022:	2204      	movs	r2, #4
 8004024:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004026:	e073      	b.n	8004110 <HCD_HC_IN_IRQHandler+0x606>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	212c      	movs	r1, #44	; 0x2c
 800402e:	fb01 f303 	mul.w	r3, r1, r3
 8004032:	4413      	add	r3, r2
 8004034:	3360      	adds	r3, #96	; 0x60
 8004036:	2202      	movs	r2, #2
 8004038:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	015a      	lsls	r2, r3, #5
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	4413      	add	r3, r2
 8004042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004050:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004058:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	015a      	lsls	r2, r3, #5
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	4413      	add	r3, r2
 8004062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004066:	461a      	mov	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800406c:	e050      	b.n	8004110 <HCD_HC_IN_IRQHandler+0x606>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	212c      	movs	r1, #44	; 0x2c
 8004074:	fb01 f303 	mul.w	r3, r1, r3
 8004078:	4413      	add	r3, r2
 800407a:	3361      	adds	r3, #97	; 0x61
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b03      	cmp	r3, #3
 8004080:	d122      	bne.n	80040c8 <HCD_HC_IN_IRQHandler+0x5be>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	212c      	movs	r1, #44	; 0x2c
 8004088:	fb01 f303 	mul.w	r3, r1, r3
 800408c:	4413      	add	r3, r2
 800408e:	3360      	adds	r3, #96	; 0x60
 8004090:	2202      	movs	r2, #2
 8004092:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	015a      	lsls	r2, r3, #5
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	4413      	add	r3, r2
 800409c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040aa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040b2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c0:	461a      	mov	r2, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	e023      	b.n	8004110 <HCD_HC_IN_IRQHandler+0x606>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	212c      	movs	r1, #44	; 0x2c
 80040ce:	fb01 f303 	mul.w	r3, r1, r3
 80040d2:	4413      	add	r3, r2
 80040d4:	3361      	adds	r3, #97	; 0x61
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b07      	cmp	r3, #7
 80040da:	d119      	bne.n	8004110 <HCD_HC_IN_IRQHandler+0x606>
      hhcd->hc[ch_num].ErrCnt++;
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	212c      	movs	r1, #44	; 0x2c
 80040e2:	fb01 f303 	mul.w	r3, r1, r3
 80040e6:	4413      	add	r3, r2
 80040e8:	335c      	adds	r3, #92	; 0x5c
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	202c      	movs	r0, #44	; 0x2c
 80040f4:	fb00 f303 	mul.w	r3, r0, r3
 80040f8:	440b      	add	r3, r1
 80040fa:	335c      	adds	r3, #92	; 0x5c
 80040fc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	212c      	movs	r1, #44	; 0x2c
 8004104:	fb01 f303 	mul.w	r3, r1, r3
 8004108:	4413      	add	r3, r2
 800410a:	3360      	adds	r3, #96	; 0x60
 800410c:	2204      	movs	r2, #4
 800410e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	4413      	add	r3, r2
 8004118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411c:	461a      	mov	r2, r3
 800411e:	2302      	movs	r3, #2
 8004120:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	b2d9      	uxtb	r1, r3
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	202c      	movs	r0, #44	; 0x2c
 800412c:	fb00 f303 	mul.w	r3, r0, r3
 8004130:	4413      	add	r3, r2
 8004132:	3360      	adds	r3, #96	; 0x60
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f009 ff59 	bl	800dff0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800413e:	e061      	b.n	8004204 <HCD_HC_IN_IRQHandler+0x6fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	015a      	lsls	r2, r3, #5
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	4413      	add	r3, r2
 8004148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 0310 	and.w	r3, r3, #16
 8004152:	2b10      	cmp	r3, #16
 8004154:	d156      	bne.n	8004204 <HCD_HC_IN_IRQHandler+0x6fa>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	212c      	movs	r1, #44	; 0x2c
 800415c:	fb01 f303 	mul.w	r3, r1, r3
 8004160:	4413      	add	r3, r2
 8004162:	333f      	adds	r3, #63	; 0x3f
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b03      	cmp	r3, #3
 8004168:	d111      	bne.n	800418e <HCD_HC_IN_IRQHandler+0x684>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	212c      	movs	r1, #44	; 0x2c
 8004170:	fb01 f303 	mul.w	r3, r1, r3
 8004174:	4413      	add	r3, r2
 8004176:	335c      	adds	r3, #92	; 0x5c
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	4611      	mov	r1, r2
 8004186:	4618      	mov	r0, r3
 8004188:	f007 fc45 	bl	800ba16 <USB_HC_Halt>
 800418c:	e031      	b.n	80041f2 <HCD_HC_IN_IRQHandler+0x6e8>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	212c      	movs	r1, #44	; 0x2c
 8004194:	fb01 f303 	mul.w	r3, r1, r3
 8004198:	4413      	add	r3, r2
 800419a:	333f      	adds	r3, #63	; 0x3f
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d009      	beq.n	80041b6 <HCD_HC_IN_IRQHandler+0x6ac>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	212c      	movs	r1, #44	; 0x2c
 80041a8:	fb01 f303 	mul.w	r3, r1, r3
 80041ac:	4413      	add	r3, r2
 80041ae:	333f      	adds	r3, #63	; 0x3f
 80041b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d11d      	bne.n	80041f2 <HCD_HC_IN_IRQHandler+0x6e8>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	212c      	movs	r1, #44	; 0x2c
 80041bc:	fb01 f303 	mul.w	r3, r1, r3
 80041c0:	4413      	add	r3, r2
 80041c2:	335c      	adds	r3, #92	; 0x5c
 80041c4:	2200      	movs	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d110      	bne.n	80041f2 <HCD_HC_IN_IRQHandler+0x6e8>
        hhcd->hc[ch_num].state = HC_NAK;
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	212c      	movs	r1, #44	; 0x2c
 80041d6:	fb01 f303 	mul.w	r3, r1, r3
 80041da:	4413      	add	r3, r2
 80041dc:	3361      	adds	r3, #97	; 0x61
 80041de:	2203      	movs	r2, #3
 80041e0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	b2d2      	uxtb	r2, r2
 80041ea:	4611      	mov	r1, r2
 80041ec:	4618      	mov	r0, r3
 80041ee:	f007 fc12 	bl	800ba16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041fe:	461a      	mov	r2, r3
 8004200:	2310      	movs	r3, #16
 8004202:	6093      	str	r3, [r2, #8]
}
 8004204:	bf00      	nop
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b088      	sub	sp, #32
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	460b      	mov	r3, r1
 8004216:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004222:	78fb      	ldrb	r3, [r7, #3]
 8004224:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	4413      	add	r3, r2
 800422e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b04      	cmp	r3, #4
 800423a:	d11a      	bne.n	8004272 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	4413      	add	r3, r2
 8004244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004248:	461a      	mov	r2, r3
 800424a:	2304      	movs	r3, #4
 800424c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	212c      	movs	r1, #44	; 0x2c
 8004254:	fb01 f303 	mul.w	r3, r1, r3
 8004258:	4413      	add	r3, r2
 800425a:	3361      	adds	r3, #97	; 0x61
 800425c:	2206      	movs	r2, #6
 800425e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	4611      	mov	r1, r2
 800426a:	4618      	mov	r0, r3
 800426c:	f007 fbd3 	bl	800ba16 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004270:	e331      	b.n	80048d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	4413      	add	r3, r2
 800427a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f003 0320 	and.w	r3, r3, #32
 8004284:	2b20      	cmp	r3, #32
 8004286:	d12e      	bne.n	80042e6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	4413      	add	r3, r2
 8004290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004294:	461a      	mov	r2, r3
 8004296:	2320      	movs	r3, #32
 8004298:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	212c      	movs	r1, #44	; 0x2c
 80042a0:	fb01 f303 	mul.w	r3, r1, r3
 80042a4:	4413      	add	r3, r2
 80042a6:	333d      	adds	r3, #61	; 0x3d
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	f040 8313 	bne.w	80048d6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	212c      	movs	r1, #44	; 0x2c
 80042b6:	fb01 f303 	mul.w	r3, r1, r3
 80042ba:	4413      	add	r3, r2
 80042bc:	333d      	adds	r3, #61	; 0x3d
 80042be:	2200      	movs	r2, #0
 80042c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	212c      	movs	r1, #44	; 0x2c
 80042c8:	fb01 f303 	mul.w	r3, r1, r3
 80042cc:	4413      	add	r3, r2
 80042ce:	3360      	adds	r3, #96	; 0x60
 80042d0:	2202      	movs	r2, #2
 80042d2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	4611      	mov	r1, r2
 80042de:	4618      	mov	r0, r3
 80042e0:	f007 fb99 	bl	800ba16 <USB_HC_Halt>
}
 80042e4:	e2f7      	b.n	80048d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042fc:	d112      	bne.n	8004324 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	4413      	add	r3, r2
 8004306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800430a:	461a      	mov	r2, r3
 800430c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004310:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	4611      	mov	r1, r2
 800431c:	4618      	mov	r0, r3
 800431e:	f007 fb7a 	bl	800ba16 <USB_HC_Halt>
}
 8004322:	e2d8      	b.n	80048d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	4413      	add	r3, r2
 800432c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b01      	cmp	r3, #1
 8004338:	d140      	bne.n	80043bc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	212c      	movs	r1, #44	; 0x2c
 8004340:	fb01 f303 	mul.w	r3, r1, r3
 8004344:	4413      	add	r3, r2
 8004346:	335c      	adds	r3, #92	; 0x5c
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	4413      	add	r3, r2
 8004354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435e:	2b40      	cmp	r3, #64	; 0x40
 8004360:	d111      	bne.n	8004386 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	212c      	movs	r1, #44	; 0x2c
 8004368:	fb01 f303 	mul.w	r3, r1, r3
 800436c:	4413      	add	r3, r2
 800436e:	333d      	adds	r3, #61	; 0x3d
 8004370:	2201      	movs	r2, #1
 8004372:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	4413      	add	r3, r2
 800437c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004380:	461a      	mov	r2, r3
 8004382:	2340      	movs	r3, #64	; 0x40
 8004384:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	4413      	add	r3, r2
 800438e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004392:	461a      	mov	r2, r3
 8004394:	2301      	movs	r3, #1
 8004396:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	212c      	movs	r1, #44	; 0x2c
 800439e:	fb01 f303 	mul.w	r3, r1, r3
 80043a2:	4413      	add	r3, r2
 80043a4:	3361      	adds	r3, #97	; 0x61
 80043a6:	2201      	movs	r2, #1
 80043a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	4611      	mov	r1, r2
 80043b4:	4618      	mov	r0, r3
 80043b6:	f007 fb2e 	bl	800ba16 <USB_HC_Halt>
}
 80043ba:	e28c      	b.n	80048d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ce:	2b40      	cmp	r3, #64	; 0x40
 80043d0:	d12c      	bne.n	800442c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	212c      	movs	r1, #44	; 0x2c
 80043d8:	fb01 f303 	mul.w	r3, r1, r3
 80043dc:	4413      	add	r3, r2
 80043de:	3361      	adds	r3, #97	; 0x61
 80043e0:	2204      	movs	r2, #4
 80043e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	212c      	movs	r1, #44	; 0x2c
 80043ea:	fb01 f303 	mul.w	r3, r1, r3
 80043ee:	4413      	add	r3, r2
 80043f0:	333d      	adds	r3, #61	; 0x3d
 80043f2:	2201      	movs	r2, #1
 80043f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	212c      	movs	r1, #44	; 0x2c
 80043fc:	fb01 f303 	mul.w	r3, r1, r3
 8004400:	4413      	add	r3, r2
 8004402:	335c      	adds	r3, #92	; 0x5c
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	4611      	mov	r1, r2
 8004412:	4618      	mov	r0, r3
 8004414:	f007 faff 	bl	800ba16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	4413      	add	r3, r2
 8004420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004424:	461a      	mov	r2, r3
 8004426:	2340      	movs	r3, #64	; 0x40
 8004428:	6093      	str	r3, [r2, #8]
}
 800442a:	e254      	b.n	80048d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	4413      	add	r3, r2
 8004434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b08      	cmp	r3, #8
 8004440:	d11a      	bne.n	8004478 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	4413      	add	r3, r2
 800444a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800444e:	461a      	mov	r2, r3
 8004450:	2308      	movs	r3, #8
 8004452:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	212c      	movs	r1, #44	; 0x2c
 800445a:	fb01 f303 	mul.w	r3, r1, r3
 800445e:	4413      	add	r3, r2
 8004460:	3361      	adds	r3, #97	; 0x61
 8004462:	2205      	movs	r2, #5
 8004464:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	4611      	mov	r1, r2
 8004470:	4618      	mov	r0, r3
 8004472:	f007 fad0 	bl	800ba16 <USB_HC_Halt>
}
 8004476:	e22e      	b.n	80048d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	4413      	add	r3, r2
 8004480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 0310 	and.w	r3, r3, #16
 800448a:	2b10      	cmp	r3, #16
 800448c:	d140      	bne.n	8004510 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	212c      	movs	r1, #44	; 0x2c
 8004494:	fb01 f303 	mul.w	r3, r1, r3
 8004498:	4413      	add	r3, r2
 800449a:	335c      	adds	r3, #92	; 0x5c
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	212c      	movs	r1, #44	; 0x2c
 80044a6:	fb01 f303 	mul.w	r3, r1, r3
 80044aa:	4413      	add	r3, r2
 80044ac:	3361      	adds	r3, #97	; 0x61
 80044ae:	2203      	movs	r2, #3
 80044b0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	212c      	movs	r1, #44	; 0x2c
 80044b8:	fb01 f303 	mul.w	r3, r1, r3
 80044bc:	4413      	add	r3, r2
 80044be:	333d      	adds	r3, #61	; 0x3d
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d112      	bne.n	80044ec <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	212c      	movs	r1, #44	; 0x2c
 80044cc:	fb01 f303 	mul.w	r3, r1, r3
 80044d0:	4413      	add	r3, r2
 80044d2:	333c      	adds	r3, #60	; 0x3c
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d108      	bne.n	80044ec <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	212c      	movs	r1, #44	; 0x2c
 80044e0:	fb01 f303 	mul.w	r3, r1, r3
 80044e4:	4413      	add	r3, r2
 80044e6:	333d      	adds	r3, #61	; 0x3d
 80044e8:	2201      	movs	r2, #1
 80044ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	4611      	mov	r1, r2
 80044f6:	4618      	mov	r0, r3
 80044f8:	f007 fa8d 	bl	800ba16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	4413      	add	r3, r2
 8004504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004508:	461a      	mov	r2, r3
 800450a:	2310      	movs	r3, #16
 800450c:	6093      	str	r3, [r2, #8]
}
 800450e:	e1e2      	b.n	80048d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	4413      	add	r3, r2
 8004518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004522:	2b80      	cmp	r3, #128	; 0x80
 8004524:	d164      	bne.n	80045f0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d111      	bne.n	8004552 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	212c      	movs	r1, #44	; 0x2c
 8004534:	fb01 f303 	mul.w	r3, r1, r3
 8004538:	4413      	add	r3, r2
 800453a:	3361      	adds	r3, #97	; 0x61
 800453c:	2206      	movs	r2, #6
 800453e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	4611      	mov	r1, r2
 800454a:	4618      	mov	r0, r3
 800454c:	f007 fa63 	bl	800ba16 <USB_HC_Halt>
 8004550:	e044      	b.n	80045dc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	212c      	movs	r1, #44	; 0x2c
 8004558:	fb01 f303 	mul.w	r3, r1, r3
 800455c:	4413      	add	r3, r2
 800455e:	335c      	adds	r3, #92	; 0x5c
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	1c5a      	adds	r2, r3, #1
 8004564:	6879      	ldr	r1, [r7, #4]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	202c      	movs	r0, #44	; 0x2c
 800456a:	fb00 f303 	mul.w	r3, r0, r3
 800456e:	440b      	add	r3, r1
 8004570:	335c      	adds	r3, #92	; 0x5c
 8004572:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	212c      	movs	r1, #44	; 0x2c
 800457a:	fb01 f303 	mul.w	r3, r1, r3
 800457e:	4413      	add	r3, r2
 8004580:	335c      	adds	r3, #92	; 0x5c
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b02      	cmp	r3, #2
 8004586:	d920      	bls.n	80045ca <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	212c      	movs	r1, #44	; 0x2c
 800458e:	fb01 f303 	mul.w	r3, r1, r3
 8004592:	4413      	add	r3, r2
 8004594:	335c      	adds	r3, #92	; 0x5c
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	212c      	movs	r1, #44	; 0x2c
 80045a0:	fb01 f303 	mul.w	r3, r1, r3
 80045a4:	4413      	add	r3, r2
 80045a6:	3360      	adds	r3, #96	; 0x60
 80045a8:	2204      	movs	r2, #4
 80045aa:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	b2d9      	uxtb	r1, r3
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	202c      	movs	r0, #44	; 0x2c
 80045b6:	fb00 f303 	mul.w	r3, r0, r3
 80045ba:	4413      	add	r3, r2
 80045bc:	3360      	adds	r3, #96	; 0x60
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	461a      	mov	r2, r3
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f009 fd14 	bl	800dff0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80045c8:	e008      	b.n	80045dc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	212c      	movs	r1, #44	; 0x2c
 80045d0:	fb01 f303 	mul.w	r3, r1, r3
 80045d4:	4413      	add	r3, r2
 80045d6:	3360      	adds	r3, #96	; 0x60
 80045d8:	2202      	movs	r2, #2
 80045da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e8:	461a      	mov	r2, r3
 80045ea:	2380      	movs	r3, #128	; 0x80
 80045ec:	6093      	str	r3, [r2, #8]
}
 80045ee:	e172      	b.n	80048d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004606:	d11b      	bne.n	8004640 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	212c      	movs	r1, #44	; 0x2c
 800460e:	fb01 f303 	mul.w	r3, r1, r3
 8004612:	4413      	add	r3, r2
 8004614:	3361      	adds	r3, #97	; 0x61
 8004616:	2208      	movs	r2, #8
 8004618:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	4611      	mov	r1, r2
 8004624:	4618      	mov	r0, r3
 8004626:	f007 f9f6 	bl	800ba16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	015a      	lsls	r2, r3, #5
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	4413      	add	r3, r2
 8004632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004636:	461a      	mov	r2, r3
 8004638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800463c:	6093      	str	r3, [r2, #8]
}
 800463e:	e14a      	b.n	80048d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	4413      	add	r3, r2
 8004648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b02      	cmp	r3, #2
 8004654:	f040 813f 	bne.w	80048d6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	212c      	movs	r1, #44	; 0x2c
 800465e:	fb01 f303 	mul.w	r3, r1, r3
 8004662:	4413      	add	r3, r2
 8004664:	3361      	adds	r3, #97	; 0x61
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d17d      	bne.n	8004768 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	212c      	movs	r1, #44	; 0x2c
 8004672:	fb01 f303 	mul.w	r3, r1, r3
 8004676:	4413      	add	r3, r2
 8004678:	3360      	adds	r3, #96	; 0x60
 800467a:	2201      	movs	r2, #1
 800467c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	212c      	movs	r1, #44	; 0x2c
 8004684:	fb01 f303 	mul.w	r3, r1, r3
 8004688:	4413      	add	r3, r2
 800468a:	333f      	adds	r3, #63	; 0x3f
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	2b02      	cmp	r3, #2
 8004690:	d00a      	beq.n	80046a8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	212c      	movs	r1, #44	; 0x2c
 8004698:	fb01 f303 	mul.w	r3, r1, r3
 800469c:	4413      	add	r3, r2
 800469e:	333f      	adds	r3, #63	; 0x3f
 80046a0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	f040 8100 	bne.w	80048a8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d113      	bne.n	80046d8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	212c      	movs	r1, #44	; 0x2c
 80046b6:	fb01 f303 	mul.w	r3, r1, r3
 80046ba:	4413      	add	r3, r2
 80046bc:	3355      	adds	r3, #85	; 0x55
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	f083 0301 	eor.w	r3, r3, #1
 80046c4:	b2d8      	uxtb	r0, r3
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	212c      	movs	r1, #44	; 0x2c
 80046cc:	fb01 f303 	mul.w	r3, r1, r3
 80046d0:	4413      	add	r3, r2
 80046d2:	3355      	adds	r3, #85	; 0x55
 80046d4:	4602      	mov	r2, r0
 80046d6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	f040 80e3 	bne.w	80048a8 <HCD_HC_OUT_IRQHandler+0x69c>
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	212c      	movs	r1, #44	; 0x2c
 80046e8:	fb01 f303 	mul.w	r3, r1, r3
 80046ec:	4413      	add	r3, r2
 80046ee:	334c      	adds	r3, #76	; 0x4c
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 80d8 	beq.w	80048a8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	212c      	movs	r1, #44	; 0x2c
 80046fe:	fb01 f303 	mul.w	r3, r1, r3
 8004702:	4413      	add	r3, r2
 8004704:	334c      	adds	r3, #76	; 0x4c
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	202c      	movs	r0, #44	; 0x2c
 800470e:	fb00 f202 	mul.w	r2, r0, r2
 8004712:	440a      	add	r2, r1
 8004714:	3240      	adds	r2, #64	; 0x40
 8004716:	8812      	ldrh	r2, [r2, #0]
 8004718:	4413      	add	r3, r2
 800471a:	3b01      	subs	r3, #1
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	202c      	movs	r0, #44	; 0x2c
 8004722:	fb00 f202 	mul.w	r2, r0, r2
 8004726:	440a      	add	r2, r1
 8004728:	3240      	adds	r2, #64	; 0x40
 800472a:	8812      	ldrh	r2, [r2, #0]
 800472c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004730:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	f000 80b5 	beq.w	80048a8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	212c      	movs	r1, #44	; 0x2c
 8004744:	fb01 f303 	mul.w	r3, r1, r3
 8004748:	4413      	add	r3, r2
 800474a:	3355      	adds	r3, #85	; 0x55
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	f083 0301 	eor.w	r3, r3, #1
 8004752:	b2d8      	uxtb	r0, r3
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	212c      	movs	r1, #44	; 0x2c
 800475a:	fb01 f303 	mul.w	r3, r1, r3
 800475e:	4413      	add	r3, r2
 8004760:	3355      	adds	r3, #85	; 0x55
 8004762:	4602      	mov	r2, r0
 8004764:	701a      	strb	r2, [r3, #0]
 8004766:	e09f      	b.n	80048a8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	212c      	movs	r1, #44	; 0x2c
 800476e:	fb01 f303 	mul.w	r3, r1, r3
 8004772:	4413      	add	r3, r2
 8004774:	3361      	adds	r3, #97	; 0x61
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2b03      	cmp	r3, #3
 800477a:	d109      	bne.n	8004790 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	212c      	movs	r1, #44	; 0x2c
 8004782:	fb01 f303 	mul.w	r3, r1, r3
 8004786:	4413      	add	r3, r2
 8004788:	3360      	adds	r3, #96	; 0x60
 800478a:	2202      	movs	r2, #2
 800478c:	701a      	strb	r2, [r3, #0]
 800478e:	e08b      	b.n	80048a8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	212c      	movs	r1, #44	; 0x2c
 8004796:	fb01 f303 	mul.w	r3, r1, r3
 800479a:	4413      	add	r3, r2
 800479c:	3361      	adds	r3, #97	; 0x61
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	2b04      	cmp	r3, #4
 80047a2:	d109      	bne.n	80047b8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	212c      	movs	r1, #44	; 0x2c
 80047aa:	fb01 f303 	mul.w	r3, r1, r3
 80047ae:	4413      	add	r3, r2
 80047b0:	3360      	adds	r3, #96	; 0x60
 80047b2:	2202      	movs	r2, #2
 80047b4:	701a      	strb	r2, [r3, #0]
 80047b6:	e077      	b.n	80048a8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	212c      	movs	r1, #44	; 0x2c
 80047be:	fb01 f303 	mul.w	r3, r1, r3
 80047c2:	4413      	add	r3, r2
 80047c4:	3361      	adds	r3, #97	; 0x61
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	2b05      	cmp	r3, #5
 80047ca:	d109      	bne.n	80047e0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	212c      	movs	r1, #44	; 0x2c
 80047d2:	fb01 f303 	mul.w	r3, r1, r3
 80047d6:	4413      	add	r3, r2
 80047d8:	3360      	adds	r3, #96	; 0x60
 80047da:	2205      	movs	r2, #5
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	e063      	b.n	80048a8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	212c      	movs	r1, #44	; 0x2c
 80047e6:	fb01 f303 	mul.w	r3, r1, r3
 80047ea:	4413      	add	r3, r2
 80047ec:	3361      	adds	r3, #97	; 0x61
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b06      	cmp	r3, #6
 80047f2:	d009      	beq.n	8004808 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	212c      	movs	r1, #44	; 0x2c
 80047fa:	fb01 f303 	mul.w	r3, r1, r3
 80047fe:	4413      	add	r3, r2
 8004800:	3361      	adds	r3, #97	; 0x61
 8004802:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004804:	2b08      	cmp	r3, #8
 8004806:	d14f      	bne.n	80048a8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	212c      	movs	r1, #44	; 0x2c
 800480e:	fb01 f303 	mul.w	r3, r1, r3
 8004812:	4413      	add	r3, r2
 8004814:	335c      	adds	r3, #92	; 0x5c
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	202c      	movs	r0, #44	; 0x2c
 8004820:	fb00 f303 	mul.w	r3, r0, r3
 8004824:	440b      	add	r3, r1
 8004826:	335c      	adds	r3, #92	; 0x5c
 8004828:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	212c      	movs	r1, #44	; 0x2c
 8004830:	fb01 f303 	mul.w	r3, r1, r3
 8004834:	4413      	add	r3, r2
 8004836:	335c      	adds	r3, #92	; 0x5c
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b02      	cmp	r3, #2
 800483c:	d912      	bls.n	8004864 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	212c      	movs	r1, #44	; 0x2c
 8004844:	fb01 f303 	mul.w	r3, r1, r3
 8004848:	4413      	add	r3, r2
 800484a:	335c      	adds	r3, #92	; 0x5c
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	212c      	movs	r1, #44	; 0x2c
 8004856:	fb01 f303 	mul.w	r3, r1, r3
 800485a:	4413      	add	r3, r2
 800485c:	3360      	adds	r3, #96	; 0x60
 800485e:	2204      	movs	r2, #4
 8004860:	701a      	strb	r2, [r3, #0]
 8004862:	e021      	b.n	80048a8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	212c      	movs	r1, #44	; 0x2c
 800486a:	fb01 f303 	mul.w	r3, r1, r3
 800486e:	4413      	add	r3, r2
 8004870:	3360      	adds	r3, #96	; 0x60
 8004872:	2202      	movs	r2, #2
 8004874:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	4413      	add	r3, r2
 800487e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800488c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004894:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	4413      	add	r3, r2
 800489e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048a2:	461a      	mov	r2, r3
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b4:	461a      	mov	r2, r3
 80048b6:	2302      	movs	r3, #2
 80048b8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	b2d9      	uxtb	r1, r3
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	202c      	movs	r0, #44	; 0x2c
 80048c4:	fb00 f303 	mul.w	r3, r0, r3
 80048c8:	4413      	add	r3, r2
 80048ca:	3360      	adds	r3, #96	; 0x60
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f009 fb8d 	bl	800dff0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80048d6:	bf00      	nop
 80048d8:	3720      	adds	r7, #32
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b08a      	sub	sp, #40	; 0x28
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	0c5b      	lsrs	r3, r3, #17
 8004904:	f003 030f 	and.w	r3, r3, #15
 8004908:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	091b      	lsrs	r3, r3, #4
 800490e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004912:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	2b02      	cmp	r3, #2
 8004918:	d004      	beq.n	8004924 <HCD_RXQLVL_IRQHandler+0x46>
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2b05      	cmp	r3, #5
 800491e:	f000 80a9 	beq.w	8004a74 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004922:	e0aa      	b.n	8004a7a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 80a6 	beq.w	8004a78 <HCD_RXQLVL_IRQHandler+0x19a>
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	212c      	movs	r1, #44	; 0x2c
 8004932:	fb01 f303 	mul.w	r3, r1, r3
 8004936:	4413      	add	r3, r2
 8004938:	3344      	adds	r3, #68	; 0x44
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 809b 	beq.w	8004a78 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	212c      	movs	r1, #44	; 0x2c
 8004948:	fb01 f303 	mul.w	r3, r1, r3
 800494c:	4413      	add	r3, r2
 800494e:	3350      	adds	r3, #80	; 0x50
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	441a      	add	r2, r3
 8004956:	6879      	ldr	r1, [r7, #4]
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	202c      	movs	r0, #44	; 0x2c
 800495c:	fb00 f303 	mul.w	r3, r0, r3
 8004960:	440b      	add	r3, r1
 8004962:	334c      	adds	r3, #76	; 0x4c
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d87a      	bhi.n	8004a60 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	212c      	movs	r1, #44	; 0x2c
 8004974:	fb01 f303 	mul.w	r3, r1, r3
 8004978:	4413      	add	r3, r2
 800497a:	3344      	adds	r3, #68	; 0x44
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	b292      	uxth	r2, r2
 8004982:	4619      	mov	r1, r3
 8004984:	f006 fbaa 	bl	800b0dc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	212c      	movs	r1, #44	; 0x2c
 800498e:	fb01 f303 	mul.w	r3, r1, r3
 8004992:	4413      	add	r3, r2
 8004994:	3344      	adds	r3, #68	; 0x44
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	441a      	add	r2, r3
 800499c:	6879      	ldr	r1, [r7, #4]
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	202c      	movs	r0, #44	; 0x2c
 80049a2:	fb00 f303 	mul.w	r3, r0, r3
 80049a6:	440b      	add	r3, r1
 80049a8:	3344      	adds	r3, #68	; 0x44
 80049aa:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	212c      	movs	r1, #44	; 0x2c
 80049b2:	fb01 f303 	mul.w	r3, r1, r3
 80049b6:	4413      	add	r3, r2
 80049b8:	3350      	adds	r3, #80	; 0x50
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	441a      	add	r2, r3
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	202c      	movs	r0, #44	; 0x2c
 80049c6:	fb00 f303 	mul.w	r3, r0, r3
 80049ca:	440b      	add	r3, r1
 80049cc:	3350      	adds	r3, #80	; 0x50
 80049ce:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	0cdb      	lsrs	r3, r3, #19
 80049e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049e4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	212c      	movs	r1, #44	; 0x2c
 80049ec:	fb01 f303 	mul.w	r3, r1, r3
 80049f0:	4413      	add	r3, r2
 80049f2:	3340      	adds	r3, #64	; 0x40
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	461a      	mov	r2, r3
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d13c      	bne.n	8004a78 <HCD_RXQLVL_IRQHandler+0x19a>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d039      	beq.n	8004a78 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a1a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a22:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a30:	461a      	mov	r2, r3
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	212c      	movs	r1, #44	; 0x2c
 8004a3c:	fb01 f303 	mul.w	r3, r1, r3
 8004a40:	4413      	add	r3, r2
 8004a42:	3354      	adds	r3, #84	; 0x54
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	f083 0301 	eor.w	r3, r3, #1
 8004a4a:	b2d8      	uxtb	r0, r3
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	212c      	movs	r1, #44	; 0x2c
 8004a52:	fb01 f303 	mul.w	r3, r1, r3
 8004a56:	4413      	add	r3, r2
 8004a58:	3354      	adds	r3, #84	; 0x54
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	701a      	strb	r2, [r3, #0]
      break;
 8004a5e:	e00b      	b.n	8004a78 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	212c      	movs	r1, #44	; 0x2c
 8004a66:	fb01 f303 	mul.w	r3, r1, r3
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3360      	adds	r3, #96	; 0x60
 8004a6e:	2204      	movs	r2, #4
 8004a70:	701a      	strb	r2, [r3, #0]
      break;
 8004a72:	e001      	b.n	8004a78 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004a74:	bf00      	nop
 8004a76:	e000      	b.n	8004a7a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004a78:	bf00      	nop
  }
}
 8004a7a:	bf00      	nop
 8004a7c:	3728      	adds	r7, #40	; 0x28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b086      	sub	sp, #24
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004aae:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d10b      	bne.n	8004ad2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d102      	bne.n	8004aca <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f009 fa77 	bl	800dfb8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f043 0302 	orr.w	r3, r3, #2
 8004ad0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d132      	bne.n	8004b42 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f043 0308 	orr.w	r3, r3, #8
 8004ae2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f003 0304 	and.w	r3, r3, #4
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d126      	bne.n	8004b3c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d113      	bne.n	8004b1e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004afc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b00:	d106      	bne.n	8004b10 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2102      	movs	r1, #2
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f006 fc4d 	bl	800b3a8 <USB_InitFSLSPClkSel>
 8004b0e:	e011      	b.n	8004b34 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2101      	movs	r1, #1
 8004b16:	4618      	mov	r0, r3
 8004b18:	f006 fc46 	bl	800b3a8 <USB_InitFSLSPClkSel>
 8004b1c:	e00a      	b.n	8004b34 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d106      	bne.n	8004b34 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004b32:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f009 fa69 	bl	800e00c <HAL_HCD_PortEnabled_Callback>
 8004b3a:	e002      	b.n	8004b42 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f009 fa73 	bl	800e028 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f003 0320 	and.w	r3, r3, #32
 8004b48:	2b20      	cmp	r3, #32
 8004b4a:	d103      	bne.n	8004b54 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f043 0320 	orr.w	r3, r3, #32
 8004b52:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	6013      	str	r3, [r2, #0]
}
 8004b60:	bf00      	nop
 8004b62:	3718      	adds	r7, #24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e07f      	b.n	8004c7a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d106      	bne.n	8004b94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7fc fc4a 	bl	8001428 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2224      	movs	r2, #36	; 0x24
 8004b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0201 	bic.w	r2, r2, #1
 8004baa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004bb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d107      	bne.n	8004be2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bde:	609a      	str	r2, [r3, #8]
 8004be0:	e006      	b.n	8004bf0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689a      	ldr	r2, [r3, #8]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004bee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d104      	bne.n	8004c02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6859      	ldr	r1, [r3, #4]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	4b1d      	ldr	r3, [pc, #116]	; (8004c84 <HAL_I2C_Init+0x11c>)
 8004c0e:	430b      	orrs	r3, r1
 8004c10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68da      	ldr	r2, [r3, #12]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691a      	ldr	r2, [r3, #16]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	69d9      	ldr	r1, [r3, #28]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a1a      	ldr	r2, [r3, #32]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0201 	orr.w	r2, r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	02008000 	.word	0x02008000

08004c88 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	607a      	str	r2, [r7, #4]
 8004c92:	461a      	mov	r2, r3
 8004c94:	460b      	mov	r3, r1
 8004c96:	817b      	strh	r3, [r7, #10]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b20      	cmp	r3, #32
 8004ca6:	f040 80da 	bne.w	8004e5e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_I2C_Master_Transmit+0x30>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e0d3      	b.n	8004e60 <HAL_I2C_Master_Transmit+0x1d8>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cc0:	f7fc fe6c 	bl	800199c <HAL_GetTick>
 8004cc4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	2319      	movs	r3, #25
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 fef3 	bl	8005abe <I2C_WaitOnFlagUntilTimeout>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e0be      	b.n	8004e60 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2221      	movs	r2, #33	; 0x21
 8004ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2210      	movs	r2, #16
 8004cee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	893a      	ldrh	r2, [r7, #8]
 8004d02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	2bff      	cmp	r3, #255	; 0xff
 8004d12:	d90e      	bls.n	8004d32 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	22ff      	movs	r2, #255	; 0xff
 8004d18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	8979      	ldrh	r1, [r7, #10]
 8004d22:	4b51      	ldr	r3, [pc, #324]	; (8004e68 <HAL_I2C_Master_Transmit+0x1e0>)
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f001 f870 	bl	8005e10 <I2C_TransferConfig>
 8004d30:	e06c      	b.n	8004e0c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	8979      	ldrh	r1, [r7, #10]
 8004d44:	4b48      	ldr	r3, [pc, #288]	; (8004e68 <HAL_I2C_Master_Transmit+0x1e0>)
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f001 f85f 	bl	8005e10 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004d52:	e05b      	b.n	8004e0c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	6a39      	ldr	r1, [r7, #32]
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 fef0 	bl	8005b3e <I2C_WaitOnTXISFlagUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e07b      	b.n	8004e60 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	781a      	ldrb	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d034      	beq.n	8004e0c <HAL_I2C_Master_Transmit+0x184>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d130      	bne.n	8004e0c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	2200      	movs	r2, #0
 8004db2:	2180      	movs	r1, #128	; 0x80
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 fe82 	bl	8005abe <I2C_WaitOnFlagUntilTimeout>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e04d      	b.n	8004e60 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2bff      	cmp	r3, #255	; 0xff
 8004dcc:	d90e      	bls.n	8004dec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	22ff      	movs	r2, #255	; 0xff
 8004dd2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	8979      	ldrh	r1, [r7, #10]
 8004ddc:	2300      	movs	r3, #0
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f001 f813 	bl	8005e10 <I2C_TransferConfig>
 8004dea:	e00f      	b.n	8004e0c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	8979      	ldrh	r1, [r7, #10]
 8004dfe:	2300      	movs	r3, #0
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f001 f802 	bl	8005e10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d19e      	bne.n	8004d54 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	6a39      	ldr	r1, [r7, #32]
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 fecf 	bl	8005bbe <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e01a      	b.n	8004e60 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6859      	ldr	r1, [r3, #4]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <HAL_I2C_Master_Transmit+0x1e4>)
 8004e3e:	400b      	ands	r3, r1
 8004e40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	e000      	b.n	8004e60 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004e5e:	2302      	movs	r3, #2
  }
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3718      	adds	r7, #24
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	80002000 	.word	0x80002000
 8004e6c:	fe00e800 	.word	0xfe00e800

08004e70 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	68f9      	ldr	r1, [r7, #12]
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	4798      	blx	r3
  }
}
 8004e9c:	bf00      	nop
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	0a1b      	lsrs	r3, r3, #8
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d010      	beq.n	8004eea <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	09db      	lsrs	r3, r3, #7
 8004ecc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed8:	f043 0201 	orr.w	r2, r3, #1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ee8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	0a9b      	lsrs	r3, r3, #10
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d010      	beq.n	8004f18 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	09db      	lsrs	r3, r3, #7
 8004efa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f06:	f043 0208 	orr.w	r2, r3, #8
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f16:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	0a5b      	lsrs	r3, r3, #9
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d010      	beq.n	8004f46 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	09db      	lsrs	r3, r3, #7
 8004f28:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00a      	beq.n	8004f46 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f34:	f043 0202 	orr.w	r2, r3, #2
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f44:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f003 030b 	and.w	r3, r3, #11
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004f56:	68f9      	ldr	r1, [r7, #12]
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 fc77 	bl	800584c <I2C_ITError>
  }
}
 8004f5e:	bf00      	nop
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	460b      	mov	r3, r1
 8004f98:	70fb      	strb	r3, [r7, #3]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b086      	sub	sp, #24
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	60f8      	str	r0, [r7, #12]
 8004fee:	60b9      	str	r1, [r7, #8]
 8004ff0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005002:	2b01      	cmp	r3, #1
 8005004:	d101      	bne.n	800500a <I2C_Slave_ISR_IT+0x24>
 8005006:	2302      	movs	r3, #2
 8005008:	e0ec      	b.n	80051e4 <I2C_Slave_ISR_IT+0x1fe>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	095b      	lsrs	r3, r3, #5
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d009      	beq.n	8005032 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	095b      	lsrs	r3, r3, #5
 8005022:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800502a:	6939      	ldr	r1, [r7, #16]
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 f9bf 	bl	80053b0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	091b      	lsrs	r3, r3, #4
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d04d      	beq.n	80050da <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	091b      	lsrs	r3, r3, #4
 8005042:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005046:	2b00      	cmp	r3, #0
 8005048:	d047      	beq.n	80050da <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504e:	b29b      	uxth	r3, r3
 8005050:	2b00      	cmp	r3, #0
 8005052:	d128      	bne.n	80050a6 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b28      	cmp	r3, #40	; 0x28
 800505e:	d108      	bne.n	8005072 <I2C_Slave_ISR_IT+0x8c>
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005066:	d104      	bne.n	8005072 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005068:	6939      	ldr	r1, [r7, #16]
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 fb98 	bl	80057a0 <I2C_ITListenCplt>
 8005070:	e032      	b.n	80050d8 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b29      	cmp	r3, #41	; 0x29
 800507c:	d10e      	bne.n	800509c <I2C_Slave_ISR_IT+0xb6>
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005084:	d00a      	beq.n	800509c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2210      	movs	r2, #16
 800508c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 fcd3 	bl	8005a3a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 f92d 	bl	80052f4 <I2C_ITSlaveSeqCplt>
 800509a:	e01d      	b.n	80050d8 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2210      	movs	r2, #16
 80050a2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80050a4:	e096      	b.n	80051d4 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2210      	movs	r2, #16
 80050ac:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b2:	f043 0204 	orr.w	r2, r3, #4
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d004      	beq.n	80050ca <I2C_Slave_ISR_IT+0xe4>
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050c6:	f040 8085 	bne.w	80051d4 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ce:	4619      	mov	r1, r3
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 fbbb 	bl	800584c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80050d6:	e07d      	b.n	80051d4 <I2C_Slave_ISR_IT+0x1ee>
 80050d8:	e07c      	b.n	80051d4 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	089b      	lsrs	r3, r3, #2
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d030      	beq.n	8005148 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	089b      	lsrs	r3, r3, #2
 80050ea:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d02a      	beq.n	8005148 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d018      	beq.n	800512e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	b2d2      	uxtb	r2, r2
 8005108:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	1c5a      	adds	r2, r3, #1
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005118:	3b01      	subs	r3, #1
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005124:	b29b      	uxth	r3, r3
 8005126:	3b01      	subs	r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005132:	b29b      	uxth	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d14f      	bne.n	80051d8 <I2C_Slave_ISR_IT+0x1f2>
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800513e:	d04b      	beq.n	80051d8 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 f8d7 	bl	80052f4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005146:	e047      	b.n	80051d8 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	08db      	lsrs	r3, r3, #3
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	08db      	lsrs	r3, r3, #3
 8005158:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800515c:	2b00      	cmp	r3, #0
 800515e:	d004      	beq.n	800516a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005160:	6939      	ldr	r1, [r7, #16]
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 f842 	bl	80051ec <I2C_ITAddrCplt>
 8005168:	e037      	b.n	80051da <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	085b      	lsrs	r3, r3, #1
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d031      	beq.n	80051da <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	085b      	lsrs	r3, r3, #1
 800517a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800517e:	2b00      	cmp	r3, #0
 8005180:	d02b      	beq.n	80051da <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005186:	b29b      	uxth	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d018      	beq.n	80051be <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	781a      	ldrb	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b4:	3b01      	subs	r3, #1
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	851a      	strh	r2, [r3, #40]	; 0x28
 80051bc:	e00d      	b.n	80051da <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051c4:	d002      	beq.n	80051cc <I2C_Slave_ISR_IT+0x1e6>
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d106      	bne.n	80051da <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 f891 	bl	80052f4 <I2C_ITSlaveSeqCplt>
 80051d2:	e002      	b.n	80051da <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80051d4:	bf00      	nop
 80051d6:	e000      	b.n	80051da <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80051d8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005202:	2b28      	cmp	r3, #40	; 0x28
 8005204:	d16a      	bne.n	80052dc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	0c1b      	lsrs	r3, r3, #16
 800520e:	b2db      	uxtb	r3, r3
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	0c1b      	lsrs	r3, r3, #16
 800521e:	b29b      	uxth	r3, r3
 8005220:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005224:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	b29b      	uxth	r3, r3
 800522e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005232:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	b29b      	uxth	r3, r3
 800523c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005240:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d138      	bne.n	80052bc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800524a:	897b      	ldrh	r3, [r7, #10]
 800524c:	09db      	lsrs	r3, r3, #7
 800524e:	b29a      	uxth	r2, r3
 8005250:	89bb      	ldrh	r3, [r7, #12]
 8005252:	4053      	eors	r3, r2
 8005254:	b29b      	uxth	r3, r3
 8005256:	f003 0306 	and.w	r3, r3, #6
 800525a:	2b00      	cmp	r3, #0
 800525c:	d11c      	bne.n	8005298 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800525e:	897b      	ldrh	r3, [r7, #10]
 8005260:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005270:	2b02      	cmp	r3, #2
 8005272:	d13b      	bne.n	80052ec <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2208      	movs	r2, #8
 8005280:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800528a:	89ba      	ldrh	r2, [r7, #12]
 800528c:	7bfb      	ldrb	r3, [r7, #15]
 800528e:	4619      	mov	r1, r3
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7ff fe7c 	bl	8004f8e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005296:	e029      	b.n	80052ec <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005298:	893b      	ldrh	r3, [r7, #8]
 800529a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800529c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 fde7 	bl	8005e74 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80052ae:	89ba      	ldrh	r2, [r7, #12]
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
 80052b2:	4619      	mov	r1, r3
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7ff fe6a 	bl	8004f8e <HAL_I2C_AddrCallback>
}
 80052ba:	e017      	b.n	80052ec <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80052bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fdd7 	bl	8005e74 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80052ce:	89ba      	ldrh	r2, [r7, #12]
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
 80052d2:	4619      	mov	r1, r3
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7ff fe5a 	bl	8004f8e <HAL_I2C_AddrCallback>
}
 80052da:	e007      	b.n	80052ec <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2208      	movs	r2, #8
 80052e2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80052ec:	bf00      	nop
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	0b9b      	lsrs	r3, r3, #14
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	d008      	beq.n	800532a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005326:	601a      	str	r2, [r3, #0]
 8005328:	e00d      	b.n	8005346 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	0bdb      	lsrs	r3, r3, #15
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d007      	beq.n	8005346 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005344:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b29      	cmp	r3, #41	; 0x29
 8005350:	d112      	bne.n	8005378 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2228      	movs	r2, #40	; 0x28
 8005356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2221      	movs	r2, #33	; 0x21
 800535e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005360:	2101      	movs	r1, #1
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 fd86 	bl	8005e74 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7ff fdf8 	bl	8004f66 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005376:	e017      	b.n	80053a8 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b2a      	cmp	r3, #42	; 0x2a
 8005382:	d111      	bne.n	80053a8 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2228      	movs	r2, #40	; 0x28
 8005388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2222      	movs	r2, #34	; 0x22
 8005390:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005392:	2102      	movs	r1, #2
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 fd6d 	bl	8005e74 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7ff fde9 	bl	8004f7a <HAL_I2C_SlaveRxCpltCallback>
}
 80053a8:	bf00      	nop
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053cc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2220      	movs	r2, #32
 80053d4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
 80053d8:	2b21      	cmp	r3, #33	; 0x21
 80053da:	d002      	beq.n	80053e2 <I2C_ITSlaveCplt+0x32>
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
 80053de:	2b29      	cmp	r3, #41	; 0x29
 80053e0:	d108      	bne.n	80053f4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80053e2:	f248 0101 	movw	r1, #32769	; 0x8001
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fd44 	bl	8005e74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2221      	movs	r2, #33	; 0x21
 80053f0:	631a      	str	r2, [r3, #48]	; 0x30
 80053f2:	e00d      	b.n	8005410 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80053f4:	7bfb      	ldrb	r3, [r7, #15]
 80053f6:	2b22      	cmp	r3, #34	; 0x22
 80053f8:	d002      	beq.n	8005400 <I2C_ITSlaveCplt+0x50>
 80053fa:	7bfb      	ldrb	r3, [r7, #15]
 80053fc:	2b2a      	cmp	r3, #42	; 0x2a
 80053fe:	d107      	bne.n	8005410 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005400:	f248 0102 	movw	r1, #32770	; 0x8002
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fd35 	bl	8005e74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2222      	movs	r2, #34	; 0x22
 800540e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800541e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6859      	ldr	r1, [r3, #4]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	4b80      	ldr	r3, [pc, #512]	; (800562c <I2C_ITSlaveCplt+0x27c>)
 800542c:	400b      	ands	r3, r1
 800542e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 fb02 	bl	8005a3a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	0b9b      	lsrs	r3, r3, #14
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d07a      	beq.n	8005538 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005450:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 8111 	beq.w	800567e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a73      	ldr	r2, [pc, #460]	; (8005630 <I2C_ITSlaveCplt+0x280>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d059      	beq.n	800551c <I2C_ITSlaveCplt+0x16c>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a71      	ldr	r2, [pc, #452]	; (8005634 <I2C_ITSlaveCplt+0x284>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d053      	beq.n	800551c <I2C_ITSlaveCplt+0x16c>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a6f      	ldr	r2, [pc, #444]	; (8005638 <I2C_ITSlaveCplt+0x288>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d04d      	beq.n	800551c <I2C_ITSlaveCplt+0x16c>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a6d      	ldr	r2, [pc, #436]	; (800563c <I2C_ITSlaveCplt+0x28c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d047      	beq.n	800551c <I2C_ITSlaveCplt+0x16c>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a6b      	ldr	r2, [pc, #428]	; (8005640 <I2C_ITSlaveCplt+0x290>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d041      	beq.n	800551c <I2C_ITSlaveCplt+0x16c>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a69      	ldr	r2, [pc, #420]	; (8005644 <I2C_ITSlaveCplt+0x294>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d03b      	beq.n	800551c <I2C_ITSlaveCplt+0x16c>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a67      	ldr	r2, [pc, #412]	; (8005648 <I2C_ITSlaveCplt+0x298>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d035      	beq.n	800551c <I2C_ITSlaveCplt+0x16c>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a65      	ldr	r2, [pc, #404]	; (800564c <I2C_ITSlaveCplt+0x29c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d02f      	beq.n	800551c <I2C_ITSlaveCplt+0x16c>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a63      	ldr	r2, [pc, #396]	; (8005650 <I2C_ITSlaveCplt+0x2a0>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d029      	beq.n	800551c <I2C_ITSlaveCplt+0x16c>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a61      	ldr	r2, [pc, #388]	; (8005654 <I2C_ITSlaveCplt+0x2a4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d023      	beq.n	800551c <I2C_ITSlaveCplt+0x16c>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a5f      	ldr	r2, [pc, #380]	; (8005658 <I2C_ITSlaveCplt+0x2a8>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d01d      	beq.n	800551c <I2C_ITSlaveCplt+0x16c>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a5d      	ldr	r2, [pc, #372]	; (800565c <I2C_ITSlaveCplt+0x2ac>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d017      	beq.n	800551c <I2C_ITSlaveCplt+0x16c>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a5b      	ldr	r2, [pc, #364]	; (8005660 <I2C_ITSlaveCplt+0x2b0>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d011      	beq.n	800551c <I2C_ITSlaveCplt+0x16c>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a59      	ldr	r2, [pc, #356]	; (8005664 <I2C_ITSlaveCplt+0x2b4>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d00b      	beq.n	800551c <I2C_ITSlaveCplt+0x16c>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a57      	ldr	r2, [pc, #348]	; (8005668 <I2C_ITSlaveCplt+0x2b8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d005      	beq.n	800551c <I2C_ITSlaveCplt+0x16c>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a55      	ldr	r2, [pc, #340]	; (800566c <I2C_ITSlaveCplt+0x2bc>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d105      	bne.n	8005528 <I2C_ITSlaveCplt+0x178>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	b29b      	uxth	r3, r3
 8005526:	e004      	b.n	8005532 <I2C_ITSlaveCplt+0x182>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	b29b      	uxth	r3, r3
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	8553      	strh	r3, [r2, #42]	; 0x2a
 8005536:	e0a2      	b.n	800567e <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	0bdb      	lsrs	r3, r3, #15
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 809c 	beq.w	800567e <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005554:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 808f 	beq.w	800567e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a32      	ldr	r2, [pc, #200]	; (8005630 <I2C_ITSlaveCplt+0x280>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d059      	beq.n	8005620 <I2C_ITSlaveCplt+0x270>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a30      	ldr	r2, [pc, #192]	; (8005634 <I2C_ITSlaveCplt+0x284>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d053      	beq.n	8005620 <I2C_ITSlaveCplt+0x270>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a2e      	ldr	r2, [pc, #184]	; (8005638 <I2C_ITSlaveCplt+0x288>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d04d      	beq.n	8005620 <I2C_ITSlaveCplt+0x270>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a2c      	ldr	r2, [pc, #176]	; (800563c <I2C_ITSlaveCplt+0x28c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d047      	beq.n	8005620 <I2C_ITSlaveCplt+0x270>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a2a      	ldr	r2, [pc, #168]	; (8005640 <I2C_ITSlaveCplt+0x290>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d041      	beq.n	8005620 <I2C_ITSlaveCplt+0x270>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a28      	ldr	r2, [pc, #160]	; (8005644 <I2C_ITSlaveCplt+0x294>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d03b      	beq.n	8005620 <I2C_ITSlaveCplt+0x270>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a26      	ldr	r2, [pc, #152]	; (8005648 <I2C_ITSlaveCplt+0x298>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d035      	beq.n	8005620 <I2C_ITSlaveCplt+0x270>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a24      	ldr	r2, [pc, #144]	; (800564c <I2C_ITSlaveCplt+0x29c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d02f      	beq.n	8005620 <I2C_ITSlaveCplt+0x270>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a22      	ldr	r2, [pc, #136]	; (8005650 <I2C_ITSlaveCplt+0x2a0>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d029      	beq.n	8005620 <I2C_ITSlaveCplt+0x270>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a20      	ldr	r2, [pc, #128]	; (8005654 <I2C_ITSlaveCplt+0x2a4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d023      	beq.n	8005620 <I2C_ITSlaveCplt+0x270>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a1e      	ldr	r2, [pc, #120]	; (8005658 <I2C_ITSlaveCplt+0x2a8>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d01d      	beq.n	8005620 <I2C_ITSlaveCplt+0x270>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a1c      	ldr	r2, [pc, #112]	; (800565c <I2C_ITSlaveCplt+0x2ac>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d017      	beq.n	8005620 <I2C_ITSlaveCplt+0x270>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a1a      	ldr	r2, [pc, #104]	; (8005660 <I2C_ITSlaveCplt+0x2b0>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d011      	beq.n	8005620 <I2C_ITSlaveCplt+0x270>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a18      	ldr	r2, [pc, #96]	; (8005664 <I2C_ITSlaveCplt+0x2b4>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d00b      	beq.n	8005620 <I2C_ITSlaveCplt+0x270>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a16      	ldr	r2, [pc, #88]	; (8005668 <I2C_ITSlaveCplt+0x2b8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d005      	beq.n	8005620 <I2C_ITSlaveCplt+0x270>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a14      	ldr	r2, [pc, #80]	; (800566c <I2C_ITSlaveCplt+0x2bc>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d127      	bne.n	8005670 <I2C_ITSlaveCplt+0x2c0>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	b29b      	uxth	r3, r3
 800562a:	e026      	b.n	800567a <I2C_ITSlaveCplt+0x2ca>
 800562c:	fe00e800 	.word	0xfe00e800
 8005630:	40020010 	.word	0x40020010
 8005634:	40020028 	.word	0x40020028
 8005638:	40020040 	.word	0x40020040
 800563c:	40020058 	.word	0x40020058
 8005640:	40020070 	.word	0x40020070
 8005644:	40020088 	.word	0x40020088
 8005648:	400200a0 	.word	0x400200a0
 800564c:	400200b8 	.word	0x400200b8
 8005650:	40020410 	.word	0x40020410
 8005654:	40020428 	.word	0x40020428
 8005658:	40020440 	.word	0x40020440
 800565c:	40020458 	.word	0x40020458
 8005660:	40020470 	.word	0x40020470
 8005664:	40020488 	.word	0x40020488
 8005668:	400204a0 	.word	0x400204a0
 800566c:	400204b8 	.word	0x400204b8
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	b29b      	uxth	r3, r3
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	089b      	lsrs	r3, r3, #2
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d020      	beq.n	80056cc <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f023 0304 	bic.w	r3, r3, #4
 8005690:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00c      	beq.n	80056cc <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b6:	3b01      	subs	r3, #1
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	3b01      	subs	r3, #1
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d005      	beq.n	80056e2 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056da:	f043 0204 	orr.w	r2, r3, #4
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d010      	beq.n	800571a <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fc:	4619      	mov	r1, r3
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f8a4 	bl	800584c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b28      	cmp	r3, #40	; 0x28
 800570e:	d141      	bne.n	8005794 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005710:	6979      	ldr	r1, [r7, #20]
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f844 	bl	80057a0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005718:	e03c      	b.n	8005794 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005722:	d014      	beq.n	800574e <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7ff fde5 	bl	80052f4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a1b      	ldr	r2, [pc, #108]	; (800579c <I2C_ITSlaveCplt+0x3ec>)
 800572e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2220      	movs	r2, #32
 8005734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7ff fc2f 	bl	8004faa <HAL_I2C_ListenCpltCallback>
}
 800574c:	e022      	b.n	8005794 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b22      	cmp	r3, #34	; 0x22
 8005758:	d10e      	bne.n	8005778 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2220      	movs	r2, #32
 800575e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f7ff fc02 	bl	8004f7a <HAL_I2C_SlaveRxCpltCallback>
}
 8005776:	e00d      	b.n	8005794 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2220      	movs	r2, #32
 800577c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7ff fbe9 	bl	8004f66 <HAL_I2C_SlaveTxCpltCallback>
}
 8005794:	bf00      	nop
 8005796:	3718      	adds	r7, #24
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	ffff0000 	.word	0xffff0000

080057a0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a26      	ldr	r2, [pc, #152]	; (8005848 <I2C_ITListenCplt+0xa8>)
 80057ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2220      	movs	r2, #32
 80057ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	089b      	lsrs	r3, r3, #2
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d022      	beq.n	800581e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d012      	beq.n	800581e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057fc:	3b01      	subs	r3, #1
 80057fe:	b29a      	uxth	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005808:	b29b      	uxth	r3, r3
 800580a:	3b01      	subs	r3, #1
 800580c:	b29a      	uxth	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005816:	f043 0204 	orr.w	r2, r3, #4
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800581e:	f248 0103 	movw	r1, #32771	; 0x8003
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fb26 	bl	8005e74 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2210      	movs	r2, #16
 800582e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7ff fbb6 	bl	8004faa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800583e:	bf00      	nop
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	ffff0000 	.word	0xffff0000

0800584c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800585c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a5d      	ldr	r2, [pc, #372]	; (80059e0 <I2C_ITError+0x194>)
 800586a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	431a      	orrs	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800587e:	7bfb      	ldrb	r3, [r7, #15]
 8005880:	2b28      	cmp	r3, #40	; 0x28
 8005882:	d005      	beq.n	8005890 <I2C_ITError+0x44>
 8005884:	7bfb      	ldrb	r3, [r7, #15]
 8005886:	2b29      	cmp	r3, #41	; 0x29
 8005888:	d002      	beq.n	8005890 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800588a:	7bfb      	ldrb	r3, [r7, #15]
 800588c:	2b2a      	cmp	r3, #42	; 0x2a
 800588e:	d10b      	bne.n	80058a8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005890:	2103      	movs	r1, #3
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 faee 	bl	8005e74 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2228      	movs	r2, #40	; 0x28
 800589c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a50      	ldr	r2, [pc, #320]	; (80059e4 <I2C_ITError+0x198>)
 80058a4:	635a      	str	r2, [r3, #52]	; 0x34
 80058a6:	e011      	b.n	80058cc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80058a8:	f248 0103 	movw	r1, #32771	; 0x8003
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fae1 	bl	8005e74 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b60      	cmp	r3, #96	; 0x60
 80058bc:	d003      	beq.n	80058c6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d039      	beq.n	800594e <I2C_ITError+0x102>
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	2b11      	cmp	r3, #17
 80058de:	d002      	beq.n	80058e6 <I2C_ITError+0x9a>
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2b21      	cmp	r3, #33	; 0x21
 80058e4:	d133      	bne.n	800594e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058f4:	d107      	bne.n	8005906 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005904:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590a:	4618      	mov	r0, r3
 800590c:	f7fc ff08 	bl	8002720 <HAL_DMA_GetState>
 8005910:	4603      	mov	r3, r0
 8005912:	2b01      	cmp	r3, #1
 8005914:	d017      	beq.n	8005946 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591a:	4a33      	ldr	r2, [pc, #204]	; (80059e8 <I2C_ITError+0x19c>)
 800591c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592a:	4618      	mov	r0, r3
 800592c:	f7fc fcb4 	bl	8002298 <HAL_DMA_Abort_IT>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d04d      	beq.n	80059d2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005940:	4610      	mov	r0, r2
 8005942:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005944:	e045      	b.n	80059d2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f850 	bl	80059ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800594c:	e041      	b.n	80059d2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005952:	2b00      	cmp	r3, #0
 8005954:	d039      	beq.n	80059ca <I2C_ITError+0x17e>
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2b12      	cmp	r3, #18
 800595a:	d002      	beq.n	8005962 <I2C_ITError+0x116>
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	2b22      	cmp	r3, #34	; 0x22
 8005960:	d133      	bne.n	80059ca <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800596c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005970:	d107      	bne.n	8005982 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005980:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005986:	4618      	mov	r0, r3
 8005988:	f7fc feca 	bl	8002720 <HAL_DMA_GetState>
 800598c:	4603      	mov	r3, r0
 800598e:	2b01      	cmp	r3, #1
 8005990:	d017      	beq.n	80059c2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005996:	4a14      	ldr	r2, [pc, #80]	; (80059e8 <I2C_ITError+0x19c>)
 8005998:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fc fc76 	bl	8002298 <HAL_DMA_Abort_IT>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d011      	beq.n	80059d6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80059bc:	4610      	mov	r0, r2
 80059be:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059c0:	e009      	b.n	80059d6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f812 	bl	80059ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059c8:	e005      	b.n	80059d6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f80e 	bl	80059ec <I2C_TreatErrorCallback>
  }
}
 80059d0:	e002      	b.n	80059d8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80059d2:	bf00      	nop
 80059d4:	e000      	b.n	80059d8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059d6:	bf00      	nop
}
 80059d8:	bf00      	nop
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	ffff0000 	.word	0xffff0000
 80059e4:	08004fe7 	.word	0x08004fe7
 80059e8:	08005a83 	.word	0x08005a83

080059ec <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b60      	cmp	r3, #96	; 0x60
 80059fe:	d10e      	bne.n	8005a1e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7ff fadb 	bl	8004fd2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a1c:	e009      	b.n	8005a32 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f7ff fac6 	bl	8004fbe <HAL_I2C_ErrorCallback>
}
 8005a32:	bf00      	nop
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d103      	bne.n	8005a58 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2200      	movs	r2, #0
 8005a56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d007      	beq.n	8005a76 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	699a      	ldr	r2, [r3, #24]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f042 0201 	orr.w	r2, r2, #1
 8005a74:	619a      	str	r2, [r3, #24]
  }
}
 8005a76:	bf00      	nop
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b084      	sub	sp, #16
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aac:	2200      	movs	r2, #0
 8005aae:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f7ff ff9b 	bl	80059ec <I2C_TreatErrorCallback>
}
 8005ab6:	bf00      	nop
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b084      	sub	sp, #16
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	603b      	str	r3, [r7, #0]
 8005aca:	4613      	mov	r3, r2
 8005acc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ace:	e022      	b.n	8005b16 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad6:	d01e      	beq.n	8005b16 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad8:	f7fb ff60 	bl	800199c <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d302      	bcc.n	8005aee <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d113      	bne.n	8005b16 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af2:	f043 0220 	orr.w	r2, r3, #32
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e00f      	b.n	8005b36 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	699a      	ldr	r2, [r3, #24]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	bf0c      	ite	eq
 8005b26:	2301      	moveq	r3, #1
 8005b28:	2300      	movne	r3, #0
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	79fb      	ldrb	r3, [r7, #7]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d0cd      	beq.n	8005ad0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b084      	sub	sp, #16
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	60f8      	str	r0, [r7, #12]
 8005b46:	60b9      	str	r1, [r7, #8]
 8005b48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b4a:	e02c      	b.n	8005ba6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	68b9      	ldr	r1, [r7, #8]
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 f871 	bl	8005c38 <I2C_IsErrorOccurred>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d001      	beq.n	8005b60 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e02a      	b.n	8005bb6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b66:	d01e      	beq.n	8005ba6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b68:	f7fb ff18 	bl	800199c <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d302      	bcc.n	8005b7e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d113      	bne.n	8005ba6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b82:	f043 0220 	orr.w	r2, r3, #32
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e007      	b.n	8005bb6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d1cb      	bne.n	8005b4c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b084      	sub	sp, #16
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	60f8      	str	r0, [r7, #12]
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bca:	e028      	b.n	8005c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	68b9      	ldr	r1, [r7, #8]
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 f831 	bl	8005c38 <I2C_IsErrorOccurred>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e026      	b.n	8005c2e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005be0:	f7fb fedc 	bl	800199c <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d302      	bcc.n	8005bf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d113      	bne.n	8005c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfa:	f043 0220 	orr.w	r2, r3, #32
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2220      	movs	r2, #32
 8005c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e007      	b.n	8005c2e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	f003 0320 	and.w	r3, r3, #32
 8005c28:	2b20      	cmp	r3, #32
 8005c2a:	d1cf      	bne.n	8005bcc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
	...

08005c38 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08a      	sub	sp, #40	; 0x28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c44:	2300      	movs	r3, #0
 8005c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005c52:	2300      	movs	r3, #0
 8005c54:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	f003 0310 	and.w	r3, r3, #16
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d075      	beq.n	8005d50 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2210      	movs	r2, #16
 8005c6a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c6c:	e056      	b.n	8005d1c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c74:	d052      	beq.n	8005d1c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c76:	f7fb fe91 	bl	800199c <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d302      	bcc.n	8005c8c <I2C_IsErrorOccurred+0x54>
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d147      	bne.n	8005d1c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c96:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c9e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005caa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cae:	d12e      	bne.n	8005d0e <I2C_IsErrorOccurred+0xd6>
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cb6:	d02a      	beq.n	8005d0e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005cb8:	7cfb      	ldrb	r3, [r7, #19]
 8005cba:	2b20      	cmp	r3, #32
 8005cbc:	d027      	beq.n	8005d0e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ccc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005cce:	f7fb fe65 	bl	800199c <HAL_GetTick>
 8005cd2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cd4:	e01b      	b.n	8005d0e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005cd6:	f7fb fe61 	bl	800199c <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b19      	cmp	r3, #25
 8005ce2:	d914      	bls.n	8005d0e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce8:	f043 0220 	orr.w	r2, r3, #32
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	f003 0320 	and.w	r3, r3, #32
 8005d18:	2b20      	cmp	r3, #32
 8005d1a:	d1dc      	bne.n	8005cd6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	f003 0320 	and.w	r3, r3, #32
 8005d26:	2b20      	cmp	r3, #32
 8005d28:	d003      	beq.n	8005d32 <I2C_IsErrorOccurred+0xfa>
 8005d2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d09d      	beq.n	8005c6e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005d32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d103      	bne.n	8005d42 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	f043 0304 	orr.w	r3, r3, #4
 8005d48:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00b      	beq.n	8005d7a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	f043 0301 	orr.w	r3, r3, #1
 8005d68:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00b      	beq.n	8005d9c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	f043 0308 	orr.w	r3, r3, #8
 8005d8a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00b      	beq.n	8005dbe <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	f043 0302 	orr.w	r3, r3, #2
 8005dac:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005db6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d01c      	beq.n	8005e00 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f7ff fe37 	bl	8005a3a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6859      	ldr	r1, [r3, #4]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	4b0d      	ldr	r3, [pc, #52]	; (8005e0c <I2C_IsErrorOccurred+0x1d4>)
 8005dd8:	400b      	ands	r3, r1
 8005dda:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	431a      	orrs	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3728      	adds	r7, #40	; 0x28
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	fe00e800 	.word	0xfe00e800

08005e10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	607b      	str	r3, [r7, #4]
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	817b      	strh	r3, [r7, #10]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e22:	897b      	ldrh	r3, [r7, #10]
 8005e24:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e28:	7a7b      	ldrb	r3, [r7, #9]
 8005e2a:	041b      	lsls	r3, r3, #16
 8005e2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e30:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e3e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	6a3b      	ldr	r3, [r7, #32]
 8005e48:	0d5b      	lsrs	r3, r3, #21
 8005e4a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005e4e:	4b08      	ldr	r3, [pc, #32]	; (8005e70 <I2C_TransferConfig+0x60>)
 8005e50:	430b      	orrs	r3, r1
 8005e52:	43db      	mvns	r3, r3
 8005e54:	ea02 0103 	and.w	r1, r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005e62:	bf00      	nop
 8005e64:	371c      	adds	r7, #28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	03ff63ff 	.word	0x03ff63ff

08005e74 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005e84:	887b      	ldrh	r3, [r7, #2]
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00f      	beq.n	8005eae <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005e94:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ea2:	2b28      	cmp	r3, #40	; 0x28
 8005ea4:	d003      	beq.n	8005eae <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005eac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005eae:	887b      	ldrh	r3, [r7, #2]
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00f      	beq.n	8005ed8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005ebe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ecc:	2b28      	cmp	r3, #40	; 0x28
 8005ece:	d003      	beq.n	8005ed8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005ed6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005ed8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	da03      	bge.n	8005ee8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005ee6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005ee8:	887b      	ldrh	r3, [r7, #2]
 8005eea:	2b10      	cmp	r3, #16
 8005eec:	d103      	bne.n	8005ef6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005ef4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005ef6:	887b      	ldrh	r3, [r7, #2]
 8005ef8:	2b20      	cmp	r3, #32
 8005efa:	d103      	bne.n	8005f04 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f043 0320 	orr.w	r3, r3, #32
 8005f02:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005f04:	887b      	ldrh	r3, [r7, #2]
 8005f06:	2b40      	cmp	r3, #64	; 0x40
 8005f08:	d103      	bne.n	8005f12 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f10:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6819      	ldr	r1, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	43da      	mvns	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	400a      	ands	r2, r1
 8005f22:	601a      	str	r2, [r3, #0]
}
 8005f24:	bf00      	nop
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b20      	cmp	r3, #32
 8005f44:	d138      	bne.n	8005fb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e032      	b.n	8005fba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2224      	movs	r2, #36	; 0x24
 8005f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 0201 	bic.w	r2, r2, #1
 8005f72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6819      	ldr	r1, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 0201 	orr.w	r2, r2, #1
 8005fa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	e000      	b.n	8005fba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005fb8:	2302      	movs	r3, #2
  }
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b085      	sub	sp, #20
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b20      	cmp	r3, #32
 8005fda:	d139      	bne.n	8006050 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d101      	bne.n	8005fea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	e033      	b.n	8006052 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2224      	movs	r2, #36	; 0x24
 8005ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f022 0201 	bic.w	r2, r2, #1
 8006008:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006018:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	021b      	lsls	r3, r3, #8
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	4313      	orrs	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0201 	orr.w	r2, r2, #1
 800603a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2220      	movs	r2, #32
 8006040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800604c:	2300      	movs	r3, #0
 800604e:	e000      	b.n	8006052 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006050:	2302      	movs	r3, #2
  }
}
 8006052:	4618      	mov	r0, r3
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
	...

08006060 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006068:	4b19      	ldr	r3, [pc, #100]	; (80060d0 <HAL_PWREx_ConfigSupply+0x70>)
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	f003 0304 	and.w	r3, r3, #4
 8006070:	2b04      	cmp	r3, #4
 8006072:	d00a      	beq.n	800608a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006074:	4b16      	ldr	r3, [pc, #88]	; (80060d0 <HAL_PWREx_ConfigSupply+0x70>)
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f003 0307 	and.w	r3, r3, #7
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	429a      	cmp	r2, r3
 8006080:	d001      	beq.n	8006086 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e01f      	b.n	80060c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	e01d      	b.n	80060c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800608a:	4b11      	ldr	r3, [pc, #68]	; (80060d0 <HAL_PWREx_ConfigSupply+0x70>)
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f023 0207 	bic.w	r2, r3, #7
 8006092:	490f      	ldr	r1, [pc, #60]	; (80060d0 <HAL_PWREx_ConfigSupply+0x70>)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4313      	orrs	r3, r2
 8006098:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800609a:	f7fb fc7f 	bl	800199c <HAL_GetTick>
 800609e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80060a0:	e009      	b.n	80060b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80060a2:	f7fb fc7b 	bl	800199c <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060b0:	d901      	bls.n	80060b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e007      	b.n	80060c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80060b6:	4b06      	ldr	r3, [pc, #24]	; (80060d0 <HAL_PWREx_ConfigSupply+0x70>)
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060c2:	d1ee      	bne.n	80060a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	58024800 	.word	0x58024800

080060d4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80060d4:	b480      	push	{r7}
 80060d6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80060d8:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	4a04      	ldr	r2, [pc, #16]	; (80060f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80060de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060e2:	60d3      	str	r3, [r2, #12]
}
 80060e4:	bf00      	nop
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	58024800 	.word	0x58024800

080060f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b08c      	sub	sp, #48	; 0x30
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d102      	bne.n	8006108 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	f000 bc1c 	b.w	8006940 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 8087 	beq.w	8006224 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006116:	4b9e      	ldr	r3, [pc, #632]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800611e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006120:	4b9b      	ldr	r3, [pc, #620]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 8006122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006124:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006128:	2b10      	cmp	r3, #16
 800612a:	d007      	beq.n	800613c <HAL_RCC_OscConfig+0x48>
 800612c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612e:	2b18      	cmp	r3, #24
 8006130:	d110      	bne.n	8006154 <HAL_RCC_OscConfig+0x60>
 8006132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006134:	f003 0303 	and.w	r3, r3, #3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d10b      	bne.n	8006154 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800613c:	4b94      	ldr	r3, [pc, #592]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d06c      	beq.n	8006222 <HAL_RCC_OscConfig+0x12e>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d168      	bne.n	8006222 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e3f5      	b.n	8006940 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800615c:	d106      	bne.n	800616c <HAL_RCC_OscConfig+0x78>
 800615e:	4b8c      	ldr	r3, [pc, #560]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a8b      	ldr	r2, [pc, #556]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 8006164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006168:	6013      	str	r3, [r2, #0]
 800616a:	e02e      	b.n	80061ca <HAL_RCC_OscConfig+0xd6>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10c      	bne.n	800618e <HAL_RCC_OscConfig+0x9a>
 8006174:	4b86      	ldr	r3, [pc, #536]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a85      	ldr	r2, [pc, #532]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 800617a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800617e:	6013      	str	r3, [r2, #0]
 8006180:	4b83      	ldr	r3, [pc, #524]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a82      	ldr	r2, [pc, #520]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 8006186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	e01d      	b.n	80061ca <HAL_RCC_OscConfig+0xd6>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006196:	d10c      	bne.n	80061b2 <HAL_RCC_OscConfig+0xbe>
 8006198:	4b7d      	ldr	r3, [pc, #500]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a7c      	ldr	r2, [pc, #496]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 800619e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061a2:	6013      	str	r3, [r2, #0]
 80061a4:	4b7a      	ldr	r3, [pc, #488]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a79      	ldr	r2, [pc, #484]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 80061aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061ae:	6013      	str	r3, [r2, #0]
 80061b0:	e00b      	b.n	80061ca <HAL_RCC_OscConfig+0xd6>
 80061b2:	4b77      	ldr	r3, [pc, #476]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a76      	ldr	r2, [pc, #472]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 80061b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061bc:	6013      	str	r3, [r2, #0]
 80061be:	4b74      	ldr	r3, [pc, #464]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a73      	ldr	r2, [pc, #460]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 80061c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061c8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d013      	beq.n	80061fa <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d2:	f7fb fbe3 	bl	800199c <HAL_GetTick>
 80061d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061d8:	e008      	b.n	80061ec <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061da:	f7fb fbdf 	bl	800199c <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	2b64      	cmp	r3, #100	; 0x64
 80061e6:	d901      	bls.n	80061ec <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e3a9      	b.n	8006940 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061ec:	4b68      	ldr	r3, [pc, #416]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d0f0      	beq.n	80061da <HAL_RCC_OscConfig+0xe6>
 80061f8:	e014      	b.n	8006224 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061fa:	f7fb fbcf 	bl	800199c <HAL_GetTick>
 80061fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006200:	e008      	b.n	8006214 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006202:	f7fb fbcb 	bl	800199c <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	2b64      	cmp	r3, #100	; 0x64
 800620e:	d901      	bls.n	8006214 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e395      	b.n	8006940 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006214:	4b5e      	ldr	r3, [pc, #376]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1f0      	bne.n	8006202 <HAL_RCC_OscConfig+0x10e>
 8006220:	e000      	b.n	8006224 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006222:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0302 	and.w	r3, r3, #2
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 80ca 	beq.w	80063c6 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006232:	4b57      	ldr	r3, [pc, #348]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800623a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800623c:	4b54      	ldr	r3, [pc, #336]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 800623e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006240:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d007      	beq.n	8006258 <HAL_RCC_OscConfig+0x164>
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	2b18      	cmp	r3, #24
 800624c:	d156      	bne.n	80062fc <HAL_RCC_OscConfig+0x208>
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	f003 0303 	and.w	r3, r3, #3
 8006254:	2b00      	cmp	r3, #0
 8006256:	d151      	bne.n	80062fc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006258:	4b4d      	ldr	r3, [pc, #308]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	2b00      	cmp	r3, #0
 8006262:	d005      	beq.n	8006270 <HAL_RCC_OscConfig+0x17c>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e367      	b.n	8006940 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006270:	4b47      	ldr	r3, [pc, #284]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f023 0219 	bic.w	r2, r3, #25
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	4944      	ldr	r1, [pc, #272]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 800627e:	4313      	orrs	r3, r2
 8006280:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006282:	f7fb fb8b 	bl	800199c <HAL_GetTick>
 8006286:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006288:	e008      	b.n	800629c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800628a:	f7fb fb87 	bl	800199c <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	2b02      	cmp	r3, #2
 8006296:	d901      	bls.n	800629c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e351      	b.n	8006940 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800629c:	4b3c      	ldr	r3, [pc, #240]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0304 	and.w	r3, r3, #4
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d0f0      	beq.n	800628a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062a8:	f7fb fba8 	bl	80019fc <HAL_GetREVID>
 80062ac:	4603      	mov	r3, r0
 80062ae:	f241 0203 	movw	r2, #4099	; 0x1003
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d817      	bhi.n	80062e6 <HAL_RCC_OscConfig+0x1f2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	2b40      	cmp	r3, #64	; 0x40
 80062bc:	d108      	bne.n	80062d0 <HAL_RCC_OscConfig+0x1dc>
 80062be:	4b34      	ldr	r3, [pc, #208]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80062c6:	4a32      	ldr	r2, [pc, #200]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 80062c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062cc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062ce:	e07a      	b.n	80063c6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062d0:	4b2f      	ldr	r3, [pc, #188]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	031b      	lsls	r3, r3, #12
 80062de:	492c      	ldr	r1, [pc, #176]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062e4:	e06f      	b.n	80063c6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062e6:	4b2a      	ldr	r3, [pc, #168]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	061b      	lsls	r3, r3, #24
 80062f4:	4926      	ldr	r1, [pc, #152]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062fa:	e064      	b.n	80063c6 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d047      	beq.n	8006394 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006304:	4b22      	ldr	r3, [pc, #136]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f023 0219 	bic.w	r2, r3, #25
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	491f      	ldr	r1, [pc, #124]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 8006312:	4313      	orrs	r3, r2
 8006314:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006316:	f7fb fb41 	bl	800199c <HAL_GetTick>
 800631a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800631c:	e008      	b.n	8006330 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800631e:	f7fb fb3d 	bl	800199c <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b02      	cmp	r3, #2
 800632a:	d901      	bls.n	8006330 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e307      	b.n	8006940 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006330:	4b17      	ldr	r3, [pc, #92]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0304 	and.w	r3, r3, #4
 8006338:	2b00      	cmp	r3, #0
 800633a:	d0f0      	beq.n	800631e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800633c:	f7fb fb5e 	bl	80019fc <HAL_GetREVID>
 8006340:	4603      	mov	r3, r0
 8006342:	f241 0203 	movw	r2, #4099	; 0x1003
 8006346:	4293      	cmp	r3, r2
 8006348:	d817      	bhi.n	800637a <HAL_RCC_OscConfig+0x286>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	2b40      	cmp	r3, #64	; 0x40
 8006350:	d108      	bne.n	8006364 <HAL_RCC_OscConfig+0x270>
 8006352:	4b0f      	ldr	r3, [pc, #60]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800635a:	4a0d      	ldr	r2, [pc, #52]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 800635c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006360:	6053      	str	r3, [r2, #4]
 8006362:	e030      	b.n	80063c6 <HAL_RCC_OscConfig+0x2d2>
 8006364:	4b0a      	ldr	r3, [pc, #40]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	031b      	lsls	r3, r3, #12
 8006372:	4907      	ldr	r1, [pc, #28]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 8006374:	4313      	orrs	r3, r2
 8006376:	604b      	str	r3, [r1, #4]
 8006378:	e025      	b.n	80063c6 <HAL_RCC_OscConfig+0x2d2>
 800637a:	4b05      	ldr	r3, [pc, #20]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	061b      	lsls	r3, r3, #24
 8006388:	4901      	ldr	r1, [pc, #4]	; (8006390 <HAL_RCC_OscConfig+0x29c>)
 800638a:	4313      	orrs	r3, r2
 800638c:	604b      	str	r3, [r1, #4]
 800638e:	e01a      	b.n	80063c6 <HAL_RCC_OscConfig+0x2d2>
 8006390:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006394:	4b9e      	ldr	r3, [pc, #632]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a9d      	ldr	r2, [pc, #628]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 800639a:	f023 0301 	bic.w	r3, r3, #1
 800639e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a0:	f7fb fafc 	bl	800199c <HAL_GetTick>
 80063a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80063a6:	e008      	b.n	80063ba <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063a8:	f7fb faf8 	bl	800199c <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d901      	bls.n	80063ba <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e2c2      	b.n	8006940 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80063ba:	4b95      	ldr	r3, [pc, #596]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0304 	and.w	r3, r3, #4
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1f0      	bne.n	80063a8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0310 	and.w	r3, r3, #16
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f000 80a9 	beq.w	8006526 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063d4:	4b8e      	ldr	r3, [pc, #568]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063dc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063de:	4b8c      	ldr	r3, [pc, #560]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 80063e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d007      	beq.n	80063fa <HAL_RCC_OscConfig+0x306>
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	2b18      	cmp	r3, #24
 80063ee:	d13a      	bne.n	8006466 <HAL_RCC_OscConfig+0x372>
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f003 0303 	and.w	r3, r3, #3
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d135      	bne.n	8006466 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063fa:	4b85      	ldr	r3, [pc, #532]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006402:	2b00      	cmp	r3, #0
 8006404:	d005      	beq.n	8006412 <HAL_RCC_OscConfig+0x31e>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	2b80      	cmp	r3, #128	; 0x80
 800640c:	d001      	beq.n	8006412 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e296      	b.n	8006940 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006412:	f7fb faf3 	bl	80019fc <HAL_GetREVID>
 8006416:	4603      	mov	r3, r0
 8006418:	f241 0203 	movw	r2, #4099	; 0x1003
 800641c:	4293      	cmp	r3, r2
 800641e:	d817      	bhi.n	8006450 <HAL_RCC_OscConfig+0x35c>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	2b20      	cmp	r3, #32
 8006426:	d108      	bne.n	800643a <HAL_RCC_OscConfig+0x346>
 8006428:	4b79      	ldr	r3, [pc, #484]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006430:	4a77      	ldr	r2, [pc, #476]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 8006432:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006436:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006438:	e075      	b.n	8006526 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800643a:	4b75      	ldr	r3, [pc, #468]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	069b      	lsls	r3, r3, #26
 8006448:	4971      	ldr	r1, [pc, #452]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 800644a:	4313      	orrs	r3, r2
 800644c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800644e:	e06a      	b.n	8006526 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006450:	4b6f      	ldr	r3, [pc, #444]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	061b      	lsls	r3, r3, #24
 800645e:	496c      	ldr	r1, [pc, #432]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 8006460:	4313      	orrs	r3, r2
 8006462:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006464:	e05f      	b.n	8006526 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d042      	beq.n	80064f4 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800646e:	4b68      	ldr	r3, [pc, #416]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a67      	ldr	r2, [pc, #412]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 8006474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800647a:	f7fb fa8f 	bl	800199c <HAL_GetTick>
 800647e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006480:	e008      	b.n	8006494 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006482:	f7fb fa8b 	bl	800199c <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	2b02      	cmp	r3, #2
 800648e:	d901      	bls.n	8006494 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e255      	b.n	8006940 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006494:	4b5e      	ldr	r3, [pc, #376]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649c:	2b00      	cmp	r3, #0
 800649e:	d0f0      	beq.n	8006482 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80064a0:	f7fb faac 	bl	80019fc <HAL_GetREVID>
 80064a4:	4603      	mov	r3, r0
 80064a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d817      	bhi.n	80064de <HAL_RCC_OscConfig+0x3ea>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	2b20      	cmp	r3, #32
 80064b4:	d108      	bne.n	80064c8 <HAL_RCC_OscConfig+0x3d4>
 80064b6:	4b56      	ldr	r3, [pc, #344]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80064be:	4a54      	ldr	r2, [pc, #336]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 80064c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064c4:	6053      	str	r3, [r2, #4]
 80064c6:	e02e      	b.n	8006526 <HAL_RCC_OscConfig+0x432>
 80064c8:	4b51      	ldr	r3, [pc, #324]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	069b      	lsls	r3, r3, #26
 80064d6:	494e      	ldr	r1, [pc, #312]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	604b      	str	r3, [r1, #4]
 80064dc:	e023      	b.n	8006526 <HAL_RCC_OscConfig+0x432>
 80064de:	4b4c      	ldr	r3, [pc, #304]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	061b      	lsls	r3, r3, #24
 80064ec:	4948      	ldr	r1, [pc, #288]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60cb      	str	r3, [r1, #12]
 80064f2:	e018      	b.n	8006526 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80064f4:	4b46      	ldr	r3, [pc, #280]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a45      	ldr	r2, [pc, #276]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 80064fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006500:	f7fb fa4c 	bl	800199c <HAL_GetTick>
 8006504:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006506:	e008      	b.n	800651a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006508:	f7fb fa48 	bl	800199c <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b02      	cmp	r3, #2
 8006514:	d901      	bls.n	800651a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e212      	b.n	8006940 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800651a:	4b3d      	ldr	r3, [pc, #244]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1f0      	bne.n	8006508 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0308 	and.w	r3, r3, #8
 800652e:	2b00      	cmp	r3, #0
 8006530:	d036      	beq.n	80065a0 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d019      	beq.n	800656e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800653a:	4b35      	ldr	r3, [pc, #212]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 800653c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800653e:	4a34      	ldr	r2, [pc, #208]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 8006540:	f043 0301 	orr.w	r3, r3, #1
 8006544:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006546:	f7fb fa29 	bl	800199c <HAL_GetTick>
 800654a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800654c:	e008      	b.n	8006560 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800654e:	f7fb fa25 	bl	800199c <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	2b02      	cmp	r3, #2
 800655a:	d901      	bls.n	8006560 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e1ef      	b.n	8006940 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006560:	4b2b      	ldr	r3, [pc, #172]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 8006562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006564:	f003 0302 	and.w	r3, r3, #2
 8006568:	2b00      	cmp	r3, #0
 800656a:	d0f0      	beq.n	800654e <HAL_RCC_OscConfig+0x45a>
 800656c:	e018      	b.n	80065a0 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800656e:	4b28      	ldr	r3, [pc, #160]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 8006570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006572:	4a27      	ldr	r2, [pc, #156]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 8006574:	f023 0301 	bic.w	r3, r3, #1
 8006578:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800657a:	f7fb fa0f 	bl	800199c <HAL_GetTick>
 800657e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006580:	e008      	b.n	8006594 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006582:	f7fb fa0b 	bl	800199c <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	2b02      	cmp	r3, #2
 800658e:	d901      	bls.n	8006594 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e1d5      	b.n	8006940 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006594:	4b1e      	ldr	r3, [pc, #120]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 8006596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006598:	f003 0302 	and.w	r3, r3, #2
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1f0      	bne.n	8006582 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0320 	and.w	r3, r3, #32
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d039      	beq.n	8006620 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d019      	beq.n	80065e8 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80065b4:	4b16      	ldr	r3, [pc, #88]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a15      	ldr	r2, [pc, #84]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 80065ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80065be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80065c0:	f7fb f9ec 	bl	800199c <HAL_GetTick>
 80065c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80065c6:	e008      	b.n	80065da <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80065c8:	f7fb f9e8 	bl	800199c <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d901      	bls.n	80065da <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e1b2      	b.n	8006940 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80065da:	4b0d      	ldr	r3, [pc, #52]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d0f0      	beq.n	80065c8 <HAL_RCC_OscConfig+0x4d4>
 80065e6:	e01b      	b.n	8006620 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80065e8:	4b09      	ldr	r3, [pc, #36]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a08      	ldr	r2, [pc, #32]	; (8006610 <HAL_RCC_OscConfig+0x51c>)
 80065ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80065f4:	f7fb f9d2 	bl	800199c <HAL_GetTick>
 80065f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065fa:	e00b      	b.n	8006614 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80065fc:	f7fb f9ce 	bl	800199c <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	2b02      	cmp	r3, #2
 8006608:	d904      	bls.n	8006614 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e198      	b.n	8006940 <HAL_RCC_OscConfig+0x84c>
 800660e:	bf00      	nop
 8006610:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006614:	4ba3      	ldr	r3, [pc, #652]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1ed      	bne.n	80065fc <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 8081 	beq.w	8006730 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800662e:	4b9e      	ldr	r3, [pc, #632]	; (80068a8 <HAL_RCC_OscConfig+0x7b4>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a9d      	ldr	r2, [pc, #628]	; (80068a8 <HAL_RCC_OscConfig+0x7b4>)
 8006634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006638:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800663a:	f7fb f9af 	bl	800199c <HAL_GetTick>
 800663e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006640:	e008      	b.n	8006654 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006642:	f7fb f9ab 	bl	800199c <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	2b64      	cmp	r3, #100	; 0x64
 800664e:	d901      	bls.n	8006654 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e175      	b.n	8006940 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006654:	4b94      	ldr	r3, [pc, #592]	; (80068a8 <HAL_RCC_OscConfig+0x7b4>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800665c:	2b00      	cmp	r3, #0
 800665e:	d0f0      	beq.n	8006642 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d106      	bne.n	8006676 <HAL_RCC_OscConfig+0x582>
 8006668:	4b8e      	ldr	r3, [pc, #568]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 800666a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666c:	4a8d      	ldr	r2, [pc, #564]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 800666e:	f043 0301 	orr.w	r3, r3, #1
 8006672:	6713      	str	r3, [r2, #112]	; 0x70
 8006674:	e02d      	b.n	80066d2 <HAL_RCC_OscConfig+0x5de>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10c      	bne.n	8006698 <HAL_RCC_OscConfig+0x5a4>
 800667e:	4b89      	ldr	r3, [pc, #548]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 8006680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006682:	4a88      	ldr	r2, [pc, #544]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 8006684:	f023 0301 	bic.w	r3, r3, #1
 8006688:	6713      	str	r3, [r2, #112]	; 0x70
 800668a:	4b86      	ldr	r3, [pc, #536]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 800668c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800668e:	4a85      	ldr	r2, [pc, #532]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 8006690:	f023 0304 	bic.w	r3, r3, #4
 8006694:	6713      	str	r3, [r2, #112]	; 0x70
 8006696:	e01c      	b.n	80066d2 <HAL_RCC_OscConfig+0x5de>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	2b05      	cmp	r3, #5
 800669e:	d10c      	bne.n	80066ba <HAL_RCC_OscConfig+0x5c6>
 80066a0:	4b80      	ldr	r3, [pc, #512]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 80066a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a4:	4a7f      	ldr	r2, [pc, #508]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 80066a6:	f043 0304 	orr.w	r3, r3, #4
 80066aa:	6713      	str	r3, [r2, #112]	; 0x70
 80066ac:	4b7d      	ldr	r3, [pc, #500]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 80066ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b0:	4a7c      	ldr	r2, [pc, #496]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 80066b2:	f043 0301 	orr.w	r3, r3, #1
 80066b6:	6713      	str	r3, [r2, #112]	; 0x70
 80066b8:	e00b      	b.n	80066d2 <HAL_RCC_OscConfig+0x5de>
 80066ba:	4b7a      	ldr	r3, [pc, #488]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 80066bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066be:	4a79      	ldr	r2, [pc, #484]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 80066c0:	f023 0301 	bic.w	r3, r3, #1
 80066c4:	6713      	str	r3, [r2, #112]	; 0x70
 80066c6:	4b77      	ldr	r3, [pc, #476]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 80066c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ca:	4a76      	ldr	r2, [pc, #472]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 80066cc:	f023 0304 	bic.w	r3, r3, #4
 80066d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d015      	beq.n	8006706 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066da:	f7fb f95f 	bl	800199c <HAL_GetTick>
 80066de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066e0:	e00a      	b.n	80066f8 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066e2:	f7fb f95b 	bl	800199c <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d901      	bls.n	80066f8 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e123      	b.n	8006940 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066f8:	4b6a      	ldr	r3, [pc, #424]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 80066fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d0ee      	beq.n	80066e2 <HAL_RCC_OscConfig+0x5ee>
 8006704:	e014      	b.n	8006730 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006706:	f7fb f949 	bl	800199c <HAL_GetTick>
 800670a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800670c:	e00a      	b.n	8006724 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800670e:	f7fb f945 	bl	800199c <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	f241 3288 	movw	r2, #5000	; 0x1388
 800671c:	4293      	cmp	r3, r2
 800671e:	d901      	bls.n	8006724 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e10d      	b.n	8006940 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006724:	4b5f      	ldr	r3, [pc, #380]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 8006726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1ee      	bne.n	800670e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 8102 	beq.w	800693e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800673a:	4b5a      	ldr	r3, [pc, #360]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006742:	2b18      	cmp	r3, #24
 8006744:	f000 80bd 	beq.w	80068c2 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674c:	2b02      	cmp	r3, #2
 800674e:	f040 8095 	bne.w	800687c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006752:	4b54      	ldr	r3, [pc, #336]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a53      	ldr	r2, [pc, #332]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 8006758:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800675c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800675e:	f7fb f91d 	bl	800199c <HAL_GetTick>
 8006762:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006764:	e008      	b.n	8006778 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006766:	f7fb f919 	bl	800199c <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	2b02      	cmp	r3, #2
 8006772:	d901      	bls.n	8006778 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e0e3      	b.n	8006940 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006778:	4b4a      	ldr	r3, [pc, #296]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1f0      	bne.n	8006766 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006784:	4b47      	ldr	r3, [pc, #284]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 8006786:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006788:	4b48      	ldr	r3, [pc, #288]	; (80068ac <HAL_RCC_OscConfig+0x7b8>)
 800678a:	4013      	ands	r3, r2
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006794:	0112      	lsls	r2, r2, #4
 8006796:	430a      	orrs	r2, r1
 8006798:	4942      	ldr	r1, [pc, #264]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 800679a:	4313      	orrs	r3, r2
 800679c:	628b      	str	r3, [r1, #40]	; 0x28
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a2:	3b01      	subs	r3, #1
 80067a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ac:	3b01      	subs	r3, #1
 80067ae:	025b      	lsls	r3, r3, #9
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	431a      	orrs	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b8:	3b01      	subs	r3, #1
 80067ba:	041b      	lsls	r3, r3, #16
 80067bc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80067c0:	431a      	orrs	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c6:	3b01      	subs	r3, #1
 80067c8:	061b      	lsls	r3, r3, #24
 80067ca:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80067ce:	4935      	ldr	r1, [pc, #212]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80067d4:	4b33      	ldr	r3, [pc, #204]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 80067d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d8:	4a32      	ldr	r2, [pc, #200]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 80067da:	f023 0301 	bic.w	r3, r3, #1
 80067de:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80067e0:	4b30      	ldr	r3, [pc, #192]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 80067e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067e4:	4b32      	ldr	r3, [pc, #200]	; (80068b0 <HAL_RCC_OscConfig+0x7bc>)
 80067e6:	4013      	ands	r3, r2
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80067ec:	00d2      	lsls	r2, r2, #3
 80067ee:	492d      	ldr	r1, [pc, #180]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80067f4:	4b2b      	ldr	r3, [pc, #172]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 80067f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f8:	f023 020c 	bic.w	r2, r3, #12
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006800:	4928      	ldr	r1, [pc, #160]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 8006802:	4313      	orrs	r3, r2
 8006804:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006806:	4b27      	ldr	r3, [pc, #156]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 8006808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680a:	f023 0202 	bic.w	r2, r3, #2
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006812:	4924      	ldr	r1, [pc, #144]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 8006814:	4313      	orrs	r3, r2
 8006816:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006818:	4b22      	ldr	r3, [pc, #136]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 800681a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681c:	4a21      	ldr	r2, [pc, #132]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 800681e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006822:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006824:	4b1f      	ldr	r3, [pc, #124]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 8006826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006828:	4a1e      	ldr	r2, [pc, #120]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 800682a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800682e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006830:	4b1c      	ldr	r3, [pc, #112]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 8006832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006834:	4a1b      	ldr	r2, [pc, #108]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 8006836:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800683a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800683c:	4b19      	ldr	r3, [pc, #100]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 800683e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006840:	4a18      	ldr	r2, [pc, #96]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 8006842:	f043 0301 	orr.w	r3, r3, #1
 8006846:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006848:	4b16      	ldr	r3, [pc, #88]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a15      	ldr	r2, [pc, #84]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 800684e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006854:	f7fb f8a2 	bl	800199c <HAL_GetTick>
 8006858:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800685a:	e008      	b.n	800686e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800685c:	f7fb f89e 	bl	800199c <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	2b02      	cmp	r3, #2
 8006868:	d901      	bls.n	800686e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e068      	b.n	8006940 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800686e:	4b0d      	ldr	r3, [pc, #52]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d0f0      	beq.n	800685c <HAL_RCC_OscConfig+0x768>
 800687a:	e060      	b.n	800693e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800687c:	4b09      	ldr	r3, [pc, #36]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a08      	ldr	r2, [pc, #32]	; (80068a4 <HAL_RCC_OscConfig+0x7b0>)
 8006882:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006888:	f7fb f888 	bl	800199c <HAL_GetTick>
 800688c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800688e:	e011      	b.n	80068b4 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006890:	f7fb f884 	bl	800199c <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b02      	cmp	r3, #2
 800689c:	d90a      	bls.n	80068b4 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e04e      	b.n	8006940 <HAL_RCC_OscConfig+0x84c>
 80068a2:	bf00      	nop
 80068a4:	58024400 	.word	0x58024400
 80068a8:	58024800 	.word	0x58024800
 80068ac:	fffffc0c 	.word	0xfffffc0c
 80068b0:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80068b4:	4b24      	ldr	r3, [pc, #144]	; (8006948 <HAL_RCC_OscConfig+0x854>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1e7      	bne.n	8006890 <HAL_RCC_OscConfig+0x79c>
 80068c0:	e03d      	b.n	800693e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80068c2:	4b21      	ldr	r3, [pc, #132]	; (8006948 <HAL_RCC_OscConfig+0x854>)
 80068c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80068c8:	4b1f      	ldr	r3, [pc, #124]	; (8006948 <HAL_RCC_OscConfig+0x854>)
 80068ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068cc:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d031      	beq.n	800693a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	f003 0203 	and.w	r2, r3, #3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d12a      	bne.n	800693a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	091b      	lsrs	r3, r3, #4
 80068e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d122      	bne.n	800693a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fe:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006900:	429a      	cmp	r2, r3
 8006902:	d11a      	bne.n	800693a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	0a5b      	lsrs	r3, r3, #9
 8006908:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006910:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006912:	429a      	cmp	r2, r3
 8006914:	d111      	bne.n	800693a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	0c1b      	lsrs	r3, r3, #16
 800691a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006924:	429a      	cmp	r2, r3
 8006926:	d108      	bne.n	800693a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	0e1b      	lsrs	r3, r3, #24
 800692c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006934:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006936:	429a      	cmp	r2, r3
 8006938:	d001      	beq.n	800693e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e000      	b.n	8006940 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3730      	adds	r7, #48	; 0x30
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	58024400 	.word	0x58024400

0800694c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d101      	bne.n	8006960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e19c      	b.n	8006c9a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006960:	4b8a      	ldr	r3, [pc, #552]	; (8006b8c <HAL_RCC_ClockConfig+0x240>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 030f 	and.w	r3, r3, #15
 8006968:	683a      	ldr	r2, [r7, #0]
 800696a:	429a      	cmp	r2, r3
 800696c:	d910      	bls.n	8006990 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800696e:	4b87      	ldr	r3, [pc, #540]	; (8006b8c <HAL_RCC_ClockConfig+0x240>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f023 020f 	bic.w	r2, r3, #15
 8006976:	4985      	ldr	r1, [pc, #532]	; (8006b8c <HAL_RCC_ClockConfig+0x240>)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	4313      	orrs	r3, r2
 800697c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800697e:	4b83      	ldr	r3, [pc, #524]	; (8006b8c <HAL_RCC_ClockConfig+0x240>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 030f 	and.w	r3, r3, #15
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	429a      	cmp	r2, r3
 800698a:	d001      	beq.n	8006990 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e184      	b.n	8006c9a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b00      	cmp	r3, #0
 800699a:	d010      	beq.n	80069be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	691a      	ldr	r2, [r3, #16]
 80069a0:	4b7b      	ldr	r3, [pc, #492]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d908      	bls.n	80069be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80069ac:	4b78      	ldr	r3, [pc, #480]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	4975      	ldr	r1, [pc, #468]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0308 	and.w	r3, r3, #8
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d010      	beq.n	80069ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	695a      	ldr	r2, [r3, #20]
 80069ce:	4b70      	ldr	r3, [pc, #448]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d908      	bls.n	80069ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069da:	4b6d      	ldr	r3, [pc, #436]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	496a      	ldr	r1, [pc, #424]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0310 	and.w	r3, r3, #16
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d010      	beq.n	8006a1a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	699a      	ldr	r2, [r3, #24]
 80069fc:	4b64      	ldr	r3, [pc, #400]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d908      	bls.n	8006a1a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a08:	4b61      	ldr	r3, [pc, #388]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006a0a:	69db      	ldr	r3, [r3, #28]
 8006a0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	495e      	ldr	r1, [pc, #376]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0320 	and.w	r3, r3, #32
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d010      	beq.n	8006a48 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	69da      	ldr	r2, [r3, #28]
 8006a2a:	4b59      	ldr	r3, [pc, #356]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d908      	bls.n	8006a48 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006a36:	4b56      	ldr	r3, [pc, #344]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	4953      	ldr	r1, [pc, #332]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0302 	and.w	r3, r3, #2
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d010      	beq.n	8006a76 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68da      	ldr	r2, [r3, #12]
 8006a58:	4b4d      	ldr	r3, [pc, #308]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	f003 030f 	and.w	r3, r3, #15
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d908      	bls.n	8006a76 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a64:	4b4a      	ldr	r3, [pc, #296]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	f023 020f 	bic.w	r2, r3, #15
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	4947      	ldr	r1, [pc, #284]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d055      	beq.n	8006b2e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006a82:	4b43      	ldr	r3, [pc, #268]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	4940      	ldr	r1, [pc, #256]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d107      	bne.n	8006aac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a9c:	4b3c      	ldr	r3, [pc, #240]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d121      	bne.n	8006aec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e0f6      	b.n	8006c9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	2b03      	cmp	r3, #3
 8006ab2:	d107      	bne.n	8006ac4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ab4:	4b36      	ldr	r3, [pc, #216]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d115      	bne.n	8006aec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e0ea      	b.n	8006c9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d107      	bne.n	8006adc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006acc:	4b30      	ldr	r3, [pc, #192]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d109      	bne.n	8006aec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e0de      	b.n	8006c9a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006adc:	4b2c      	ldr	r3, [pc, #176]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0304 	and.w	r3, r3, #4
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e0d6      	b.n	8006c9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006aec:	4b28      	ldr	r3, [pc, #160]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	f023 0207 	bic.w	r2, r3, #7
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	4925      	ldr	r1, [pc, #148]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006afe:	f7fa ff4d 	bl	800199c <HAL_GetTick>
 8006b02:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b04:	e00a      	b.n	8006b1c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b06:	f7fa ff49 	bl	800199c <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d901      	bls.n	8006b1c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e0be      	b.n	8006c9a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b1c:	4b1c      	ldr	r3, [pc, #112]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	00db      	lsls	r3, r3, #3
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d1eb      	bne.n	8006b06 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0302 	and.w	r3, r3, #2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d010      	beq.n	8006b5c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68da      	ldr	r2, [r3, #12]
 8006b3e:	4b14      	ldr	r3, [pc, #80]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	f003 030f 	and.w	r3, r3, #15
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d208      	bcs.n	8006b5c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b4a:	4b11      	ldr	r3, [pc, #68]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	f023 020f 	bic.w	r2, r3, #15
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	490e      	ldr	r1, [pc, #56]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b5c:	4b0b      	ldr	r3, [pc, #44]	; (8006b8c <HAL_RCC_ClockConfig+0x240>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 030f 	and.w	r3, r3, #15
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d214      	bcs.n	8006b94 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b6a:	4b08      	ldr	r3, [pc, #32]	; (8006b8c <HAL_RCC_ClockConfig+0x240>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f023 020f 	bic.w	r2, r3, #15
 8006b72:	4906      	ldr	r1, [pc, #24]	; (8006b8c <HAL_RCC_ClockConfig+0x240>)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b7a:	4b04      	ldr	r3, [pc, #16]	; (8006b8c <HAL_RCC_ClockConfig+0x240>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	683a      	ldr	r2, [r7, #0]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d005      	beq.n	8006b94 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e086      	b.n	8006c9a <HAL_RCC_ClockConfig+0x34e>
 8006b8c:	52002000 	.word	0x52002000
 8006b90:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0304 	and.w	r3, r3, #4
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d010      	beq.n	8006bc2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691a      	ldr	r2, [r3, #16]
 8006ba4:	4b3f      	ldr	r3, [pc, #252]	; (8006ca4 <HAL_RCC_ClockConfig+0x358>)
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d208      	bcs.n	8006bc2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006bb0:	4b3c      	ldr	r3, [pc, #240]	; (8006ca4 <HAL_RCC_ClockConfig+0x358>)
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	4939      	ldr	r1, [pc, #228]	; (8006ca4 <HAL_RCC_ClockConfig+0x358>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0308 	and.w	r3, r3, #8
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d010      	beq.n	8006bf0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	695a      	ldr	r2, [r3, #20]
 8006bd2:	4b34      	ldr	r3, [pc, #208]	; (8006ca4 <HAL_RCC_ClockConfig+0x358>)
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d208      	bcs.n	8006bf0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006bde:	4b31      	ldr	r3, [pc, #196]	; (8006ca4 <HAL_RCC_ClockConfig+0x358>)
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	492e      	ldr	r1, [pc, #184]	; (8006ca4 <HAL_RCC_ClockConfig+0x358>)
 8006bec:	4313      	orrs	r3, r2
 8006bee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0310 	and.w	r3, r3, #16
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d010      	beq.n	8006c1e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	699a      	ldr	r2, [r3, #24]
 8006c00:	4b28      	ldr	r3, [pc, #160]	; (8006ca4 <HAL_RCC_ClockConfig+0x358>)
 8006c02:	69db      	ldr	r3, [r3, #28]
 8006c04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d208      	bcs.n	8006c1e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c0c:	4b25      	ldr	r3, [pc, #148]	; (8006ca4 <HAL_RCC_ClockConfig+0x358>)
 8006c0e:	69db      	ldr	r3, [r3, #28]
 8006c10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	4922      	ldr	r1, [pc, #136]	; (8006ca4 <HAL_RCC_ClockConfig+0x358>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0320 	and.w	r3, r3, #32
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d010      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	69da      	ldr	r2, [r3, #28]
 8006c2e:	4b1d      	ldr	r3, [pc, #116]	; (8006ca4 <HAL_RCC_ClockConfig+0x358>)
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d208      	bcs.n	8006c4c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006c3a:	4b1a      	ldr	r3, [pc, #104]	; (8006ca4 <HAL_RCC_ClockConfig+0x358>)
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	4917      	ldr	r1, [pc, #92]	; (8006ca4 <HAL_RCC_ClockConfig+0x358>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006c4c:	f000 f834 	bl	8006cb8 <HAL_RCC_GetSysClockFreq>
 8006c50:	4602      	mov	r2, r0
 8006c52:	4b14      	ldr	r3, [pc, #80]	; (8006ca4 <HAL_RCC_ClockConfig+0x358>)
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	0a1b      	lsrs	r3, r3, #8
 8006c58:	f003 030f 	and.w	r3, r3, #15
 8006c5c:	4912      	ldr	r1, [pc, #72]	; (8006ca8 <HAL_RCC_ClockConfig+0x35c>)
 8006c5e:	5ccb      	ldrb	r3, [r1, r3]
 8006c60:	f003 031f 	and.w	r3, r3, #31
 8006c64:	fa22 f303 	lsr.w	r3, r2, r3
 8006c68:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c6a:	4b0e      	ldr	r3, [pc, #56]	; (8006ca4 <HAL_RCC_ClockConfig+0x358>)
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	f003 030f 	and.w	r3, r3, #15
 8006c72:	4a0d      	ldr	r2, [pc, #52]	; (8006ca8 <HAL_RCC_ClockConfig+0x35c>)
 8006c74:	5cd3      	ldrb	r3, [r2, r3]
 8006c76:	f003 031f 	and.w	r3, r3, #31
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c80:	4a0a      	ldr	r2, [pc, #40]	; (8006cac <HAL_RCC_ClockConfig+0x360>)
 8006c82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c84:	4a0a      	ldr	r2, [pc, #40]	; (8006cb0 <HAL_RCC_ClockConfig+0x364>)
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006c8a:	4b0a      	ldr	r3, [pc, #40]	; (8006cb4 <HAL_RCC_ClockConfig+0x368>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fa fe3a 	bl	8001908 <HAL_InitTick>
 8006c94:	4603      	mov	r3, r0
 8006c96:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	58024400 	.word	0x58024400
 8006ca8:	0800ef4c 	.word	0x0800ef4c
 8006cac:	24000004 	.word	0x24000004
 8006cb0:	24000000 	.word	0x24000000
 8006cb4:	24000008 	.word	0x24000008

08006cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b089      	sub	sp, #36	; 0x24
 8006cbc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cbe:	4bb3      	ldr	r3, [pc, #716]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cc6:	2b18      	cmp	r3, #24
 8006cc8:	f200 8155 	bhi.w	8006f76 <HAL_RCC_GetSysClockFreq+0x2be>
 8006ccc:	a201      	add	r2, pc, #4	; (adr r2, 8006cd4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd2:	bf00      	nop
 8006cd4:	08006d39 	.word	0x08006d39
 8006cd8:	08006f77 	.word	0x08006f77
 8006cdc:	08006f77 	.word	0x08006f77
 8006ce0:	08006f77 	.word	0x08006f77
 8006ce4:	08006f77 	.word	0x08006f77
 8006ce8:	08006f77 	.word	0x08006f77
 8006cec:	08006f77 	.word	0x08006f77
 8006cf0:	08006f77 	.word	0x08006f77
 8006cf4:	08006d5f 	.word	0x08006d5f
 8006cf8:	08006f77 	.word	0x08006f77
 8006cfc:	08006f77 	.word	0x08006f77
 8006d00:	08006f77 	.word	0x08006f77
 8006d04:	08006f77 	.word	0x08006f77
 8006d08:	08006f77 	.word	0x08006f77
 8006d0c:	08006f77 	.word	0x08006f77
 8006d10:	08006f77 	.word	0x08006f77
 8006d14:	08006d65 	.word	0x08006d65
 8006d18:	08006f77 	.word	0x08006f77
 8006d1c:	08006f77 	.word	0x08006f77
 8006d20:	08006f77 	.word	0x08006f77
 8006d24:	08006f77 	.word	0x08006f77
 8006d28:	08006f77 	.word	0x08006f77
 8006d2c:	08006f77 	.word	0x08006f77
 8006d30:	08006f77 	.word	0x08006f77
 8006d34:	08006d6b 	.word	0x08006d6b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d38:	4b94      	ldr	r3, [pc, #592]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0320 	and.w	r3, r3, #32
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d009      	beq.n	8006d58 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d44:	4b91      	ldr	r3, [pc, #580]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	08db      	lsrs	r3, r3, #3
 8006d4a:	f003 0303 	and.w	r3, r3, #3
 8006d4e:	4a90      	ldr	r2, [pc, #576]	; (8006f90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d50:	fa22 f303 	lsr.w	r3, r2, r3
 8006d54:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006d56:	e111      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006d58:	4b8d      	ldr	r3, [pc, #564]	; (8006f90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d5a:	61bb      	str	r3, [r7, #24]
    break;
 8006d5c:	e10e      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006d5e:	4b8d      	ldr	r3, [pc, #564]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d60:	61bb      	str	r3, [r7, #24]
    break;
 8006d62:	e10b      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006d64:	4b8c      	ldr	r3, [pc, #560]	; (8006f98 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006d66:	61bb      	str	r3, [r7, #24]
    break;
 8006d68:	e108      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d6a:	4b88      	ldr	r3, [pc, #544]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6e:	f003 0303 	and.w	r3, r3, #3
 8006d72:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006d74:	4b85      	ldr	r3, [pc, #532]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d78:	091b      	lsrs	r3, r3, #4
 8006d7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d7e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006d80:	4b82      	ldr	r3, [pc, #520]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006d8a:	4b80      	ldr	r3, [pc, #512]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d8e:	08db      	lsrs	r3, r3, #3
 8006d90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	fb02 f303 	mul.w	r3, r2, r3
 8006d9a:	ee07 3a90 	vmov	s15, r3
 8006d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 80e1 	beq.w	8006f70 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	f000 8083 	beq.w	8006ebc <HAL_RCC_GetSysClockFreq+0x204>
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	f200 80a1 	bhi.w	8006f00 <HAL_RCC_GetSysClockFreq+0x248>
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d003      	beq.n	8006dcc <HAL_RCC_GetSysClockFreq+0x114>
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d056      	beq.n	8006e78 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006dca:	e099      	b.n	8006f00 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dcc:	4b6f      	ldr	r3, [pc, #444]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0320 	and.w	r3, r3, #32
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d02d      	beq.n	8006e34 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006dd8:	4b6c      	ldr	r3, [pc, #432]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	08db      	lsrs	r3, r3, #3
 8006dde:	f003 0303 	and.w	r3, r3, #3
 8006de2:	4a6b      	ldr	r2, [pc, #428]	; (8006f90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006de4:	fa22 f303 	lsr.w	r3, r2, r3
 8006de8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	ee07 3a90 	vmov	s15, r3
 8006df0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	ee07 3a90 	vmov	s15, r3
 8006dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e02:	4b62      	ldr	r3, [pc, #392]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e0a:	ee07 3a90 	vmov	s15, r3
 8006e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e12:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e16:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006f9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006e32:	e087      	b.n	8006f44 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	ee07 3a90 	vmov	s15, r3
 8006e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e3e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006fa0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e46:	4b51      	ldr	r3, [pc, #324]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e4e:	ee07 3a90 	vmov	s15, r3
 8006e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e56:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e5a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006f9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e76:	e065      	b.n	8006f44 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	ee07 3a90 	vmov	s15, r3
 8006e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e82:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006fa4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e8a:	4b40      	ldr	r3, [pc, #256]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e92:	ee07 3a90 	vmov	s15, r3
 8006e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e9e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006f9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006eba:	e043      	b.n	8006f44 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006fa8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ece:	4b2f      	ldr	r3, [pc, #188]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed6:	ee07 3a90 	vmov	s15, r3
 8006eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ede:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ee2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006f9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006efa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006efe:	e021      	b.n	8006f44 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	ee07 3a90 	vmov	s15, r3
 8006f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f0a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006fa4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f12:	4b1e      	ldr	r3, [pc, #120]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f1a:	ee07 3a90 	vmov	s15, r3
 8006f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f22:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f26:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006f9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f42:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006f44:	4b11      	ldr	r3, [pc, #68]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f48:	0a5b      	lsrs	r3, r3, #9
 8006f4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f4e:	3301      	adds	r3, #1
 8006f50:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	ee07 3a90 	vmov	s15, r3
 8006f58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f68:	ee17 3a90 	vmov	r3, s15
 8006f6c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006f6e:	e005      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006f70:	2300      	movs	r3, #0
 8006f72:	61bb      	str	r3, [r7, #24]
    break;
 8006f74:	e002      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006f76:	4b07      	ldr	r3, [pc, #28]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f78:	61bb      	str	r3, [r7, #24]
    break;
 8006f7a:	bf00      	nop
  }

  return sysclockfreq;
 8006f7c:	69bb      	ldr	r3, [r7, #24]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3724      	adds	r7, #36	; 0x24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	58024400 	.word	0x58024400
 8006f90:	03d09000 	.word	0x03d09000
 8006f94:	003d0900 	.word	0x003d0900
 8006f98:	007a1200 	.word	0x007a1200
 8006f9c:	46000000 	.word	0x46000000
 8006fa0:	4c742400 	.word	0x4c742400
 8006fa4:	4a742400 	.word	0x4a742400
 8006fa8:	4af42400 	.word	0x4af42400

08006fac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006fb2:	f7ff fe81 	bl	8006cb8 <HAL_RCC_GetSysClockFreq>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	4b10      	ldr	r3, [pc, #64]	; (8006ffc <HAL_RCC_GetHCLKFreq+0x50>)
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	0a1b      	lsrs	r3, r3, #8
 8006fbe:	f003 030f 	and.w	r3, r3, #15
 8006fc2:	490f      	ldr	r1, [pc, #60]	; (8007000 <HAL_RCC_GetHCLKFreq+0x54>)
 8006fc4:	5ccb      	ldrb	r3, [r1, r3]
 8006fc6:	f003 031f 	and.w	r3, r3, #31
 8006fca:	fa22 f303 	lsr.w	r3, r2, r3
 8006fce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fd0:	4b0a      	ldr	r3, [pc, #40]	; (8006ffc <HAL_RCC_GetHCLKFreq+0x50>)
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	f003 030f 	and.w	r3, r3, #15
 8006fd8:	4a09      	ldr	r2, [pc, #36]	; (8007000 <HAL_RCC_GetHCLKFreq+0x54>)
 8006fda:	5cd3      	ldrb	r3, [r2, r3]
 8006fdc:	f003 031f 	and.w	r3, r3, #31
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe6:	4a07      	ldr	r2, [pc, #28]	; (8007004 <HAL_RCC_GetHCLKFreq+0x58>)
 8006fe8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006fea:	4a07      	ldr	r2, [pc, #28]	; (8007008 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006ff0:	4b04      	ldr	r3, [pc, #16]	; (8007004 <HAL_RCC_GetHCLKFreq+0x58>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	58024400 	.word	0x58024400
 8007000:	0800ef4c 	.word	0x0800ef4c
 8007004:	24000004 	.word	0x24000004
 8007008:	24000000 	.word	0x24000000

0800700c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007010:	f7ff ffcc 	bl	8006fac <HAL_RCC_GetHCLKFreq>
 8007014:	4602      	mov	r2, r0
 8007016:	4b06      	ldr	r3, [pc, #24]	; (8007030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	091b      	lsrs	r3, r3, #4
 800701c:	f003 0307 	and.w	r3, r3, #7
 8007020:	4904      	ldr	r1, [pc, #16]	; (8007034 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007022:	5ccb      	ldrb	r3, [r1, r3]
 8007024:	f003 031f 	and.w	r3, r3, #31
 8007028:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800702c:	4618      	mov	r0, r3
 800702e:	bd80      	pop	{r7, pc}
 8007030:	58024400 	.word	0x58024400
 8007034:	0800ef4c 	.word	0x0800ef4c

08007038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800703c:	f7ff ffb6 	bl	8006fac <HAL_RCC_GetHCLKFreq>
 8007040:	4602      	mov	r2, r0
 8007042:	4b06      	ldr	r3, [pc, #24]	; (800705c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	0a1b      	lsrs	r3, r3, #8
 8007048:	f003 0307 	and.w	r3, r3, #7
 800704c:	4904      	ldr	r1, [pc, #16]	; (8007060 <HAL_RCC_GetPCLK2Freq+0x28>)
 800704e:	5ccb      	ldrb	r3, [r1, r3]
 8007050:	f003 031f 	and.w	r3, r3, #31
 8007054:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007058:	4618      	mov	r0, r3
 800705a:	bd80      	pop	{r7, pc}
 800705c:	58024400 	.word	0x58024400
 8007060:	0800ef4c 	.word	0x0800ef4c

08007064 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800706c:	2300      	movs	r3, #0
 800706e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007070:	2300      	movs	r3, #0
 8007072:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d03f      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007084:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007088:	d02a      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800708a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800708e:	d824      	bhi.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007090:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007094:	d018      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007096:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800709a:	d81e      	bhi.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800709c:	2b00      	cmp	r3, #0
 800709e:	d003      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80070a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070a4:	d007      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80070a6:	e018      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070a8:	4bab      	ldr	r3, [pc, #684]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ac:	4aaa      	ldr	r2, [pc, #680]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80070b4:	e015      	b.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	3304      	adds	r3, #4
 80070ba:	2102      	movs	r1, #2
 80070bc:	4618      	mov	r0, r3
 80070be:	f001 f9cf 	bl	8008460 <RCCEx_PLL2_Config>
 80070c2:	4603      	mov	r3, r0
 80070c4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80070c6:	e00c      	b.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	3324      	adds	r3, #36	; 0x24
 80070cc:	2102      	movs	r1, #2
 80070ce:	4618      	mov	r0, r3
 80070d0:	f001 fa78 	bl	80085c4 <RCCEx_PLL3_Config>
 80070d4:	4603      	mov	r3, r0
 80070d6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80070d8:	e003      	b.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	75fb      	strb	r3, [r7, #23]
      break;
 80070de:	e000      	b.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80070e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070e2:	7dfb      	ldrb	r3, [r7, #23]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d109      	bne.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80070e8:	4b9b      	ldr	r3, [pc, #620]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070f4:	4998      	ldr	r1, [pc, #608]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	650b      	str	r3, [r1, #80]	; 0x50
 80070fa:	e001      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070fc:	7dfb      	ldrb	r3, [r7, #23]
 80070fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007108:	2b00      	cmp	r3, #0
 800710a:	d03d      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007110:	2b04      	cmp	r3, #4
 8007112:	d826      	bhi.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007114:	a201      	add	r2, pc, #4	; (adr r2, 800711c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711a:	bf00      	nop
 800711c:	08007131 	.word	0x08007131
 8007120:	0800713f 	.word	0x0800713f
 8007124:	08007151 	.word	0x08007151
 8007128:	08007169 	.word	0x08007169
 800712c:	08007169 	.word	0x08007169
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007130:	4b89      	ldr	r3, [pc, #548]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007134:	4a88      	ldr	r2, [pc, #544]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800713a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800713c:	e015      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	3304      	adds	r3, #4
 8007142:	2100      	movs	r1, #0
 8007144:	4618      	mov	r0, r3
 8007146:	f001 f98b 	bl	8008460 <RCCEx_PLL2_Config>
 800714a:	4603      	mov	r3, r0
 800714c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800714e:	e00c      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	3324      	adds	r3, #36	; 0x24
 8007154:	2100      	movs	r1, #0
 8007156:	4618      	mov	r0, r3
 8007158:	f001 fa34 	bl	80085c4 <RCCEx_PLL3_Config>
 800715c:	4603      	mov	r3, r0
 800715e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007160:	e003      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	75fb      	strb	r3, [r7, #23]
      break;
 8007166:	e000      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007168:	bf00      	nop
    }

    if(ret == HAL_OK)
 800716a:	7dfb      	ldrb	r3, [r7, #23]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d109      	bne.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007170:	4b79      	ldr	r3, [pc, #484]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007174:	f023 0207 	bic.w	r2, r3, #7
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800717c:	4976      	ldr	r1, [pc, #472]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800717e:	4313      	orrs	r3, r2
 8007180:	650b      	str	r3, [r1, #80]	; 0x50
 8007182:	e001      	b.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007184:	7dfb      	ldrb	r3, [r7, #23]
 8007186:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007190:	2b00      	cmp	r3, #0
 8007192:	d042      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800719c:	d02b      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800719e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071a2:	d825      	bhi.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80071a4:	2bc0      	cmp	r3, #192	; 0xc0
 80071a6:	d028      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x196>
 80071a8:	2bc0      	cmp	r3, #192	; 0xc0
 80071aa:	d821      	bhi.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80071ac:	2b80      	cmp	r3, #128	; 0x80
 80071ae:	d016      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80071b0:	2b80      	cmp	r3, #128	; 0x80
 80071b2:	d81d      	bhi.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d002      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80071b8:	2b40      	cmp	r3, #64	; 0x40
 80071ba:	d007      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80071bc:	e018      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071be:	4b66      	ldr	r3, [pc, #408]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c2:	4a65      	ldr	r2, [pc, #404]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80071ca:	e017      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	3304      	adds	r3, #4
 80071d0:	2100      	movs	r1, #0
 80071d2:	4618      	mov	r0, r3
 80071d4:	f001 f944 	bl	8008460 <RCCEx_PLL2_Config>
 80071d8:	4603      	mov	r3, r0
 80071da:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80071dc:	e00e      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	3324      	adds	r3, #36	; 0x24
 80071e2:	2100      	movs	r1, #0
 80071e4:	4618      	mov	r0, r3
 80071e6:	f001 f9ed 	bl	80085c4 <RCCEx_PLL3_Config>
 80071ea:	4603      	mov	r3, r0
 80071ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80071ee:	e005      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	75fb      	strb	r3, [r7, #23]
      break;
 80071f4:	e002      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80071f6:	bf00      	nop
 80071f8:	e000      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80071fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071fc:	7dfb      	ldrb	r3, [r7, #23]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d109      	bne.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007202:	4b55      	ldr	r3, [pc, #340]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007206:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800720e:	4952      	ldr	r1, [pc, #328]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007210:	4313      	orrs	r3, r2
 8007212:	650b      	str	r3, [r1, #80]	; 0x50
 8007214:	e001      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007216:	7dfb      	ldrb	r3, [r7, #23]
 8007218:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007222:	2b00      	cmp	r3, #0
 8007224:	d049      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800722c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007230:	d030      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007232:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007236:	d82a      	bhi.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007238:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800723c:	d02c      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800723e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007242:	d824      	bhi.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007244:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007248:	d018      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800724a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800724e:	d81e      	bhi.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007250:	2b00      	cmp	r3, #0
 8007252:	d003      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007254:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007258:	d007      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800725a:	e018      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800725c:	4b3e      	ldr	r3, [pc, #248]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800725e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007260:	4a3d      	ldr	r2, [pc, #244]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007266:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007268:	e017      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	3304      	adds	r3, #4
 800726e:	2100      	movs	r1, #0
 8007270:	4618      	mov	r0, r3
 8007272:	f001 f8f5 	bl	8008460 <RCCEx_PLL2_Config>
 8007276:	4603      	mov	r3, r0
 8007278:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800727a:	e00e      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	3324      	adds	r3, #36	; 0x24
 8007280:	2100      	movs	r1, #0
 8007282:	4618      	mov	r0, r3
 8007284:	f001 f99e 	bl	80085c4 <RCCEx_PLL3_Config>
 8007288:	4603      	mov	r3, r0
 800728a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800728c:	e005      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	75fb      	strb	r3, [r7, #23]
      break;
 8007292:	e002      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007294:	bf00      	nop
 8007296:	e000      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007298:	bf00      	nop
    }

    if(ret == HAL_OK)
 800729a:	7dfb      	ldrb	r3, [r7, #23]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d10a      	bne.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80072a0:	4b2d      	ldr	r3, [pc, #180]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072a4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80072ae:	492a      	ldr	r1, [pc, #168]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072b0:	4313      	orrs	r3, r2
 80072b2:	658b      	str	r3, [r1, #88]	; 0x58
 80072b4:	e001      	b.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b6:	7dfb      	ldrb	r3, [r7, #23]
 80072b8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d04c      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80072cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80072d0:	d030      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80072d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80072d6:	d82a      	bhi.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80072d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80072dc:	d02c      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80072de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80072e2:	d824      	bhi.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80072e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072e8:	d018      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80072ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072ee:	d81e      	bhi.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d003      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80072f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072f8:	d007      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80072fa:	e018      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072fc:	4b16      	ldr	r3, [pc, #88]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007300:	4a15      	ldr	r2, [pc, #84]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007306:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007308:	e017      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	3304      	adds	r3, #4
 800730e:	2100      	movs	r1, #0
 8007310:	4618      	mov	r0, r3
 8007312:	f001 f8a5 	bl	8008460 <RCCEx_PLL2_Config>
 8007316:	4603      	mov	r3, r0
 8007318:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800731a:	e00e      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	3324      	adds	r3, #36	; 0x24
 8007320:	2100      	movs	r1, #0
 8007322:	4618      	mov	r0, r3
 8007324:	f001 f94e 	bl	80085c4 <RCCEx_PLL3_Config>
 8007328:	4603      	mov	r3, r0
 800732a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800732c:	e005      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	75fb      	strb	r3, [r7, #23]
      break;
 8007332:	e002      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007334:	bf00      	nop
 8007336:	e000      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007338:	bf00      	nop
    }

    if(ret == HAL_OK)
 800733a:	7dfb      	ldrb	r3, [r7, #23]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10d      	bne.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007340:	4b05      	ldr	r3, [pc, #20]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007344:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800734e:	4902      	ldr	r1, [pc, #8]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007350:	4313      	orrs	r3, r2
 8007352:	658b      	str	r3, [r1, #88]	; 0x58
 8007354:	e004      	b.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007356:	bf00      	nop
 8007358:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800735c:	7dfb      	ldrb	r3, [r7, #23]
 800735e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d032      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007370:	2b30      	cmp	r3, #48	; 0x30
 8007372:	d01c      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007374:	2b30      	cmp	r3, #48	; 0x30
 8007376:	d817      	bhi.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007378:	2b20      	cmp	r3, #32
 800737a:	d00c      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800737c:	2b20      	cmp	r3, #32
 800737e:	d813      	bhi.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007380:	2b00      	cmp	r3, #0
 8007382:	d016      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007384:	2b10      	cmp	r3, #16
 8007386:	d10f      	bne.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007388:	4baf      	ldr	r3, [pc, #700]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800738a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738c:	4aae      	ldr	r2, [pc, #696]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800738e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007392:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007394:	e00e      	b.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	3304      	adds	r3, #4
 800739a:	2102      	movs	r1, #2
 800739c:	4618      	mov	r0, r3
 800739e:	f001 f85f 	bl	8008460 <RCCEx_PLL2_Config>
 80073a2:	4603      	mov	r3, r0
 80073a4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80073a6:	e005      	b.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	75fb      	strb	r3, [r7, #23]
      break;
 80073ac:	e002      	b.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80073ae:	bf00      	nop
 80073b0:	e000      	b.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80073b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073b4:	7dfb      	ldrb	r3, [r7, #23]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d109      	bne.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80073ba:	4ba3      	ldr	r3, [pc, #652]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073c6:	49a0      	ldr	r1, [pc, #640]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073c8:	4313      	orrs	r3, r2
 80073ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80073cc:	e001      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ce:	7dfb      	ldrb	r3, [r7, #23]
 80073d0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d047      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073e6:	d030      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80073e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073ec:	d82a      	bhi.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80073ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073f2:	d02c      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80073f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073f8:	d824      	bhi.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80073fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073fe:	d018      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007400:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007404:	d81e      	bhi.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800740a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800740e:	d007      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007410:	e018      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007412:	4b8d      	ldr	r3, [pc, #564]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007416:	4a8c      	ldr	r2, [pc, #560]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800741c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800741e:	e017      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	3304      	adds	r3, #4
 8007424:	2100      	movs	r1, #0
 8007426:	4618      	mov	r0, r3
 8007428:	f001 f81a 	bl	8008460 <RCCEx_PLL2_Config>
 800742c:	4603      	mov	r3, r0
 800742e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007430:	e00e      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	3324      	adds	r3, #36	; 0x24
 8007436:	2100      	movs	r1, #0
 8007438:	4618      	mov	r0, r3
 800743a:	f001 f8c3 	bl	80085c4 <RCCEx_PLL3_Config>
 800743e:	4603      	mov	r3, r0
 8007440:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007442:	e005      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	75fb      	strb	r3, [r7, #23]
      break;
 8007448:	e002      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800744a:	bf00      	nop
 800744c:	e000      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800744e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007450:	7dfb      	ldrb	r3, [r7, #23]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d109      	bne.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007456:	4b7c      	ldr	r3, [pc, #496]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800745a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007462:	4979      	ldr	r1, [pc, #484]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007464:	4313      	orrs	r3, r2
 8007466:	650b      	str	r3, [r1, #80]	; 0x50
 8007468:	e001      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800746a:	7dfb      	ldrb	r3, [r7, #23]
 800746c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d049      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800747e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007482:	d02e      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007488:	d828      	bhi.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800748a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800748e:	d02a      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007490:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007494:	d822      	bhi.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007496:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800749a:	d026      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x486>
 800749c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80074a0:	d81c      	bhi.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x478>
 80074a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074a6:	d010      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x466>
 80074a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074ac:	d816      	bhi.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x478>
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d01d      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80074b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074b6:	d111      	bne.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	3304      	adds	r3, #4
 80074bc:	2101      	movs	r1, #1
 80074be:	4618      	mov	r0, r3
 80074c0:	f000 ffce 	bl	8008460 <RCCEx_PLL2_Config>
 80074c4:	4603      	mov	r3, r0
 80074c6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80074c8:	e012      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	3324      	adds	r3, #36	; 0x24
 80074ce:	2101      	movs	r1, #1
 80074d0:	4618      	mov	r0, r3
 80074d2:	f001 f877 	bl	80085c4 <RCCEx_PLL3_Config>
 80074d6:	4603      	mov	r3, r0
 80074d8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80074da:	e009      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	75fb      	strb	r3, [r7, #23]
      break;
 80074e0:	e006      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80074e2:	bf00      	nop
 80074e4:	e004      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80074e6:	bf00      	nop
 80074e8:	e002      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80074ea:	bf00      	nop
 80074ec:	e000      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80074ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074f0:	7dfb      	ldrb	r3, [r7, #23]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d109      	bne.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80074f6:	4b54      	ldr	r3, [pc, #336]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074fa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007502:	4951      	ldr	r1, [pc, #324]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007504:	4313      	orrs	r3, r2
 8007506:	650b      	str	r3, [r1, #80]	; 0x50
 8007508:	e001      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800750a:	7dfb      	ldrb	r3, [r7, #23]
 800750c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d04b      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007520:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007524:	d02e      	beq.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007526:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800752a:	d828      	bhi.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800752c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007530:	d02a      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007536:	d822      	bhi.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007538:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800753c:	d026      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x528>
 800753e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007542:	d81c      	bhi.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007544:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007548:	d010      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800754a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800754e:	d816      	bhi.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007550:	2b00      	cmp	r3, #0
 8007552:	d01d      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007554:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007558:	d111      	bne.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	3304      	adds	r3, #4
 800755e:	2101      	movs	r1, #1
 8007560:	4618      	mov	r0, r3
 8007562:	f000 ff7d 	bl	8008460 <RCCEx_PLL2_Config>
 8007566:	4603      	mov	r3, r0
 8007568:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800756a:	e012      	b.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	3324      	adds	r3, #36	; 0x24
 8007570:	2101      	movs	r1, #1
 8007572:	4618      	mov	r0, r3
 8007574:	f001 f826 	bl	80085c4 <RCCEx_PLL3_Config>
 8007578:	4603      	mov	r3, r0
 800757a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800757c:	e009      	b.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	75fb      	strb	r3, [r7, #23]
      break;
 8007582:	e006      	b.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007584:	bf00      	nop
 8007586:	e004      	b.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007588:	bf00      	nop
 800758a:	e002      	b.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800758c:	bf00      	nop
 800758e:	e000      	b.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007590:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007592:	7dfb      	ldrb	r3, [r7, #23]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10a      	bne.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007598:	4b2b      	ldr	r3, [pc, #172]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800759a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800759c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80075a6:	4928      	ldr	r1, [pc, #160]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80075a8:	4313      	orrs	r3, r2
 80075aa:	658b      	str	r3, [r1, #88]	; 0x58
 80075ac:	e001      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ae:	7dfb      	ldrb	r3, [r7, #23]
 80075b0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d02f      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075c6:	d00e      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80075c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075cc:	d814      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d015      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80075d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075d6:	d10f      	bne.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075d8:	4b1b      	ldr	r3, [pc, #108]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	4a1a      	ldr	r2, [pc, #104]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80075de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80075e4:	e00c      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	3304      	adds	r3, #4
 80075ea:	2101      	movs	r1, #1
 80075ec:	4618      	mov	r0, r3
 80075ee:	f000 ff37 	bl	8008460 <RCCEx_PLL2_Config>
 80075f2:	4603      	mov	r3, r0
 80075f4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80075f6:	e003      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	75fb      	strb	r3, [r7, #23]
      break;
 80075fc:	e000      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80075fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007600:	7dfb      	ldrb	r3, [r7, #23]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d109      	bne.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007606:	4b10      	ldr	r3, [pc, #64]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800760a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007612:	490d      	ldr	r1, [pc, #52]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007614:	4313      	orrs	r3, r2
 8007616:	650b      	str	r3, [r1, #80]	; 0x50
 8007618:	e001      	b.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800761a:	7dfb      	ldrb	r3, [r7, #23]
 800761c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d033      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800762e:	2b03      	cmp	r3, #3
 8007630:	d81c      	bhi.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007632:	a201      	add	r2, pc, #4	; (adr r2, 8007638 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007638:	08007673 	.word	0x08007673
 800763c:	0800764d 	.word	0x0800764d
 8007640:	0800765b 	.word	0x0800765b
 8007644:	08007673 	.word	0x08007673
 8007648:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800764c:	4bb8      	ldr	r3, [pc, #736]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800764e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007650:	4ab7      	ldr	r2, [pc, #732]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007656:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007658:	e00c      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	3304      	adds	r3, #4
 800765e:	2102      	movs	r1, #2
 8007660:	4618      	mov	r0, r3
 8007662:	f000 fefd 	bl	8008460 <RCCEx_PLL2_Config>
 8007666:	4603      	mov	r3, r0
 8007668:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800766a:	e003      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	75fb      	strb	r3, [r7, #23]
      break;
 8007670:	e000      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007672:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007674:	7dfb      	ldrb	r3, [r7, #23]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d109      	bne.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800767a:	4bad      	ldr	r3, [pc, #692]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800767c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800767e:	f023 0203 	bic.w	r2, r3, #3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007686:	49aa      	ldr	r1, [pc, #680]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007688:	4313      	orrs	r3, r2
 800768a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800768c:	e001      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800768e:	7dfb      	ldrb	r3, [r7, #23]
 8007690:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800769a:	2b00      	cmp	r3, #0
 800769c:	f000 8086 	beq.w	80077ac <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80076a0:	4ba4      	ldr	r3, [pc, #656]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4aa3      	ldr	r2, [pc, #652]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80076a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80076ac:	f7fa f976 	bl	800199c <HAL_GetTick>
 80076b0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076b2:	e009      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076b4:	f7fa f972 	bl	800199c <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	2b64      	cmp	r3, #100	; 0x64
 80076c0:	d902      	bls.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	75fb      	strb	r3, [r7, #23]
        break;
 80076c6:	e005      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076c8:	4b9a      	ldr	r3, [pc, #616]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d0ef      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80076d4:	7dfb      	ldrb	r3, [r7, #23]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d166      	bne.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80076da:	4b95      	ldr	r3, [pc, #596]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80076e4:	4053      	eors	r3, r2
 80076e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d013      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80076ee:	4b90      	ldr	r3, [pc, #576]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076f6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80076f8:	4b8d      	ldr	r3, [pc, #564]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076fc:	4a8c      	ldr	r2, [pc, #560]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007702:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007704:	4b8a      	ldr	r3, [pc, #552]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007708:	4a89      	ldr	r2, [pc, #548]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800770a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800770e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007710:	4a87      	ldr	r2, [pc, #540]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800771c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007720:	d115      	bne.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007722:	f7fa f93b 	bl	800199c <HAL_GetTick>
 8007726:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007728:	e00b      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800772a:	f7fa f937 	bl	800199c <HAL_GetTick>
 800772e:	4602      	mov	r2, r0
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	f241 3288 	movw	r2, #5000	; 0x1388
 8007738:	4293      	cmp	r3, r2
 800773a:	d902      	bls.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800773c:	2303      	movs	r3, #3
 800773e:	75fb      	strb	r3, [r7, #23]
            break;
 8007740:	e005      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007742:	4b7b      	ldr	r3, [pc, #492]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007746:	f003 0302 	and.w	r3, r3, #2
 800774a:	2b00      	cmp	r3, #0
 800774c:	d0ed      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800774e:	7dfb      	ldrb	r3, [r7, #23]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d126      	bne.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800775a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800775e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007762:	d10d      	bne.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007764:	4b72      	ldr	r3, [pc, #456]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007772:	0919      	lsrs	r1, r3, #4
 8007774:	4b70      	ldr	r3, [pc, #448]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007776:	400b      	ands	r3, r1
 8007778:	496d      	ldr	r1, [pc, #436]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800777a:	4313      	orrs	r3, r2
 800777c:	610b      	str	r3, [r1, #16]
 800777e:	e005      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007780:	4b6b      	ldr	r3, [pc, #428]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	4a6a      	ldr	r2, [pc, #424]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007786:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800778a:	6113      	str	r3, [r2, #16]
 800778c:	4b68      	ldr	r3, [pc, #416]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800778e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800779a:	4965      	ldr	r1, [pc, #404]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800779c:	4313      	orrs	r3, r2
 800779e:	670b      	str	r3, [r1, #112]	; 0x70
 80077a0:	e004      	b.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80077a2:	7dfb      	ldrb	r3, [r7, #23]
 80077a4:	75bb      	strb	r3, [r7, #22]
 80077a6:	e001      	b.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a8:	7dfb      	ldrb	r3, [r7, #23]
 80077aa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 0301 	and.w	r3, r3, #1
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d07e      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077bc:	2b28      	cmp	r3, #40	; 0x28
 80077be:	d867      	bhi.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80077c0:	a201      	add	r2, pc, #4	; (adr r2, 80077c8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80077c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c6:	bf00      	nop
 80077c8:	08007897 	.word	0x08007897
 80077cc:	08007891 	.word	0x08007891
 80077d0:	08007891 	.word	0x08007891
 80077d4:	08007891 	.word	0x08007891
 80077d8:	08007891 	.word	0x08007891
 80077dc:	08007891 	.word	0x08007891
 80077e0:	08007891 	.word	0x08007891
 80077e4:	08007891 	.word	0x08007891
 80077e8:	0800786d 	.word	0x0800786d
 80077ec:	08007891 	.word	0x08007891
 80077f0:	08007891 	.word	0x08007891
 80077f4:	08007891 	.word	0x08007891
 80077f8:	08007891 	.word	0x08007891
 80077fc:	08007891 	.word	0x08007891
 8007800:	08007891 	.word	0x08007891
 8007804:	08007891 	.word	0x08007891
 8007808:	0800787f 	.word	0x0800787f
 800780c:	08007891 	.word	0x08007891
 8007810:	08007891 	.word	0x08007891
 8007814:	08007891 	.word	0x08007891
 8007818:	08007891 	.word	0x08007891
 800781c:	08007891 	.word	0x08007891
 8007820:	08007891 	.word	0x08007891
 8007824:	08007891 	.word	0x08007891
 8007828:	08007897 	.word	0x08007897
 800782c:	08007891 	.word	0x08007891
 8007830:	08007891 	.word	0x08007891
 8007834:	08007891 	.word	0x08007891
 8007838:	08007891 	.word	0x08007891
 800783c:	08007891 	.word	0x08007891
 8007840:	08007891 	.word	0x08007891
 8007844:	08007891 	.word	0x08007891
 8007848:	08007897 	.word	0x08007897
 800784c:	08007891 	.word	0x08007891
 8007850:	08007891 	.word	0x08007891
 8007854:	08007891 	.word	0x08007891
 8007858:	08007891 	.word	0x08007891
 800785c:	08007891 	.word	0x08007891
 8007860:	08007891 	.word	0x08007891
 8007864:	08007891 	.word	0x08007891
 8007868:	08007897 	.word	0x08007897
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	3304      	adds	r3, #4
 8007870:	2101      	movs	r1, #1
 8007872:	4618      	mov	r0, r3
 8007874:	f000 fdf4 	bl	8008460 <RCCEx_PLL2_Config>
 8007878:	4603      	mov	r3, r0
 800787a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800787c:	e00c      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	3324      	adds	r3, #36	; 0x24
 8007882:	2101      	movs	r1, #1
 8007884:	4618      	mov	r0, r3
 8007886:	f000 fe9d 	bl	80085c4 <RCCEx_PLL3_Config>
 800788a:	4603      	mov	r3, r0
 800788c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800788e:	e003      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	75fb      	strb	r3, [r7, #23]
      break;
 8007894:	e000      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007896:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007898:	7dfb      	ldrb	r3, [r7, #23]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d109      	bne.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800789e:	4b24      	ldr	r3, [pc, #144]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80078a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078aa:	4921      	ldr	r1, [pc, #132]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	654b      	str	r3, [r1, #84]	; 0x54
 80078b0:	e001      	b.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b2:	7dfb      	ldrb	r3, [r7, #23]
 80078b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d03e      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078c6:	2b05      	cmp	r3, #5
 80078c8:	d820      	bhi.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80078ca:	a201      	add	r2, pc, #4	; (adr r2, 80078d0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80078cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d0:	08007913 	.word	0x08007913
 80078d4:	080078e9 	.word	0x080078e9
 80078d8:	080078fb 	.word	0x080078fb
 80078dc:	08007913 	.word	0x08007913
 80078e0:	08007913 	.word	0x08007913
 80078e4:	08007913 	.word	0x08007913
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	3304      	adds	r3, #4
 80078ec:	2101      	movs	r1, #1
 80078ee:	4618      	mov	r0, r3
 80078f0:	f000 fdb6 	bl	8008460 <RCCEx_PLL2_Config>
 80078f4:	4603      	mov	r3, r0
 80078f6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80078f8:	e00c      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	3324      	adds	r3, #36	; 0x24
 80078fe:	2101      	movs	r1, #1
 8007900:	4618      	mov	r0, r3
 8007902:	f000 fe5f 	bl	80085c4 <RCCEx_PLL3_Config>
 8007906:	4603      	mov	r3, r0
 8007908:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800790a:	e003      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	75fb      	strb	r3, [r7, #23]
      break;
 8007910:	e000      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8007912:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007914:	7dfb      	ldrb	r3, [r7, #23]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d110      	bne.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800791a:	4b05      	ldr	r3, [pc, #20]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800791c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800791e:	f023 0207 	bic.w	r2, r3, #7
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007926:	4902      	ldr	r1, [pc, #8]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007928:	4313      	orrs	r3, r2
 800792a:	654b      	str	r3, [r1, #84]	; 0x54
 800792c:	e008      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800792e:	bf00      	nop
 8007930:	58024400 	.word	0x58024400
 8007934:	58024800 	.word	0x58024800
 8007938:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800793c:	7dfb      	ldrb	r3, [r7, #23]
 800793e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0304 	and.w	r3, r3, #4
 8007948:	2b00      	cmp	r3, #0
 800794a:	d039      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007952:	2b05      	cmp	r3, #5
 8007954:	d820      	bhi.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007956:	a201      	add	r2, pc, #4	; (adr r2, 800795c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795c:	0800799f 	.word	0x0800799f
 8007960:	08007975 	.word	0x08007975
 8007964:	08007987 	.word	0x08007987
 8007968:	0800799f 	.word	0x0800799f
 800796c:	0800799f 	.word	0x0800799f
 8007970:	0800799f 	.word	0x0800799f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	3304      	adds	r3, #4
 8007978:	2101      	movs	r1, #1
 800797a:	4618      	mov	r0, r3
 800797c:	f000 fd70 	bl	8008460 <RCCEx_PLL2_Config>
 8007980:	4603      	mov	r3, r0
 8007982:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007984:	e00c      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	3324      	adds	r3, #36	; 0x24
 800798a:	2101      	movs	r1, #1
 800798c:	4618      	mov	r0, r3
 800798e:	f000 fe19 	bl	80085c4 <RCCEx_PLL3_Config>
 8007992:	4603      	mov	r3, r0
 8007994:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007996:	e003      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	75fb      	strb	r3, [r7, #23]
      break;
 800799c:	e000      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800799e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079a0:	7dfb      	ldrb	r3, [r7, #23]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10a      	bne.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80079a6:	4bb7      	ldr	r3, [pc, #732]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80079a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079aa:	f023 0207 	bic.w	r2, r3, #7
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079b4:	49b3      	ldr	r1, [pc, #716]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80079b6:	4313      	orrs	r3, r2
 80079b8:	658b      	str	r3, [r1, #88]	; 0x58
 80079ba:	e001      	b.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079bc:	7dfb      	ldrb	r3, [r7, #23]
 80079be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 0320 	and.w	r3, r3, #32
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d04b      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079d6:	d02e      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80079d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079dc:	d828      	bhi.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80079de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079e2:	d02a      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80079e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079e8:	d822      	bhi.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80079ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079ee:	d026      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80079f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079f4:	d81c      	bhi.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80079f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079fa:	d010      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80079fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a00:	d816      	bhi.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d01d      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007a06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a0a:	d111      	bne.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	3304      	adds	r3, #4
 8007a10:	2100      	movs	r1, #0
 8007a12:	4618      	mov	r0, r3
 8007a14:	f000 fd24 	bl	8008460 <RCCEx_PLL2_Config>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007a1c:	e012      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	3324      	adds	r3, #36	; 0x24
 8007a22:	2102      	movs	r1, #2
 8007a24:	4618      	mov	r0, r3
 8007a26:	f000 fdcd 	bl	80085c4 <RCCEx_PLL3_Config>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007a2e:	e009      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	75fb      	strb	r3, [r7, #23]
      break;
 8007a34:	e006      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007a36:	bf00      	nop
 8007a38:	e004      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007a3a:	bf00      	nop
 8007a3c:	e002      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007a3e:	bf00      	nop
 8007a40:	e000      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007a42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a44:	7dfb      	ldrb	r3, [r7, #23]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10a      	bne.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a4a:	4b8e      	ldr	r3, [pc, #568]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a4e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a58:	498a      	ldr	r1, [pc, #552]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	654b      	str	r3, [r1, #84]	; 0x54
 8007a5e:	e001      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a60:	7dfb      	ldrb	r3, [r7, #23]
 8007a62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d04b      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a76:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007a7a:	d02e      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007a7c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007a80:	d828      	bhi.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a86:	d02a      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a8c:	d822      	bhi.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007a8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a92:	d026      	beq.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007a94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a98:	d81c      	bhi.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007a9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a9e:	d010      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007aa4:	d816      	bhi.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d01d      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aae:	d111      	bne.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	3304      	adds	r3, #4
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 fcd2 	bl	8008460 <RCCEx_PLL2_Config>
 8007abc:	4603      	mov	r3, r0
 8007abe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007ac0:	e012      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	3324      	adds	r3, #36	; 0x24
 8007ac6:	2102      	movs	r1, #2
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f000 fd7b 	bl	80085c4 <RCCEx_PLL3_Config>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007ad2:	e009      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ad8:	e006      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007ada:	bf00      	nop
 8007adc:	e004      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007ade:	bf00      	nop
 8007ae0:	e002      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007ae2:	bf00      	nop
 8007ae4:	e000      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007ae6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ae8:	7dfb      	ldrb	r3, [r7, #23]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10a      	bne.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007aee:	4b65      	ldr	r3, [pc, #404]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007af2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007afc:	4961      	ldr	r1, [pc, #388]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007afe:	4313      	orrs	r3, r2
 8007b00:	658b      	str	r3, [r1, #88]	; 0x58
 8007b02:	e001      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b04:	7dfb      	ldrb	r3, [r7, #23]
 8007b06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d04b      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b1a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007b1e:	d02e      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007b20:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007b24:	d828      	bhi.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007b26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b2a:	d02a      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b30:	d822      	bhi.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007b32:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007b36:	d026      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007b38:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007b3c:	d81c      	bhi.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007b3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b42:	d010      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007b44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b48:	d816      	bhi.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d01d      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b52:	d111      	bne.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	3304      	adds	r3, #4
 8007b58:	2100      	movs	r1, #0
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f000 fc80 	bl	8008460 <RCCEx_PLL2_Config>
 8007b60:	4603      	mov	r3, r0
 8007b62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007b64:	e012      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	3324      	adds	r3, #36	; 0x24
 8007b6a:	2102      	movs	r1, #2
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f000 fd29 	bl	80085c4 <RCCEx_PLL3_Config>
 8007b72:	4603      	mov	r3, r0
 8007b74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007b76:	e009      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b7c:	e006      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007b7e:	bf00      	nop
 8007b80:	e004      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007b82:	bf00      	nop
 8007b84:	e002      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007b86:	bf00      	nop
 8007b88:	e000      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007b8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b8c:	7dfb      	ldrb	r3, [r7, #23]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d10a      	bne.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007b92:	4b3c      	ldr	r3, [pc, #240]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ba0:	4938      	ldr	r1, [pc, #224]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	658b      	str	r3, [r1, #88]	; 0x58
 8007ba6:	e001      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ba8:	7dfb      	ldrb	r3, [r7, #23]
 8007baa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0308 	and.w	r3, r3, #8
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d01a      	beq.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bc2:	d10a      	bne.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	3324      	adds	r3, #36	; 0x24
 8007bc8:	2102      	movs	r1, #2
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f000 fcfa 	bl	80085c4 <RCCEx_PLL3_Config>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d001      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007bda:	4b2a      	ldr	r3, [pc, #168]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bde:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007be8:	4926      	ldr	r1, [pc, #152]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007bea:	4313      	orrs	r3, r2
 8007bec:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0310 	and.w	r3, r3, #16
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d01a      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c04:	d10a      	bne.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	3324      	adds	r3, #36	; 0x24
 8007c0a:	2102      	movs	r1, #2
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f000 fcd9 	bl	80085c4 <RCCEx_PLL3_Config>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d001      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c1c:	4b19      	ldr	r3, [pc, #100]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c2a:	4916      	ldr	r1, [pc, #88]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d036      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007c42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c46:	d01f      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007c48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c4c:	d817      	bhi.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d003      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c56:	d009      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007c58:	e011      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	3304      	adds	r3, #4
 8007c5e:	2100      	movs	r1, #0
 8007c60:	4618      	mov	r0, r3
 8007c62:	f000 fbfd 	bl	8008460 <RCCEx_PLL2_Config>
 8007c66:	4603      	mov	r3, r0
 8007c68:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007c6a:	e00e      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	3324      	adds	r3, #36	; 0x24
 8007c70:	2102      	movs	r1, #2
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 fca6 	bl	80085c4 <RCCEx_PLL3_Config>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007c7c:	e005      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	75fb      	strb	r3, [r7, #23]
      break;
 8007c82:	e002      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007c84:	58024400 	.word	0x58024400
      break;
 8007c88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c8a:	7dfb      	ldrb	r3, [r7, #23]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10a      	bne.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c90:	4b93      	ldr	r3, [pc, #588]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007c9e:	4990      	ldr	r1, [pc, #576]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	658b      	str	r3, [r1, #88]	; 0x58
 8007ca4:	e001      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
 8007ca8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d033      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cbc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007cc0:	d01c      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007cc2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007cc6:	d816      	bhi.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007cc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ccc:	d003      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007cce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007cd2:	d007      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007cd4:	e00f      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cd6:	4b82      	ldr	r3, [pc, #520]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cda:	4a81      	ldr	r2, [pc, #516]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ce0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007ce2:	e00c      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	3324      	adds	r3, #36	; 0x24
 8007ce8:	2101      	movs	r1, #1
 8007cea:	4618      	mov	r0, r3
 8007cec:	f000 fc6a 	bl	80085c4 <RCCEx_PLL3_Config>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007cf4:	e003      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	75fb      	strb	r3, [r7, #23]
      break;
 8007cfa:	e000      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007cfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cfe:	7dfb      	ldrb	r3, [r7, #23]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10a      	bne.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d04:	4b76      	ldr	r3, [pc, #472]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d12:	4973      	ldr	r1, [pc, #460]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d14:	4313      	orrs	r3, r2
 8007d16:	654b      	str	r3, [r1, #84]	; 0x54
 8007d18:	e001      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d1a:	7dfb      	ldrb	r3, [r7, #23]
 8007d1c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d029      	beq.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d003      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d36:	d007      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007d38:	e00f      	b.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d3a:	4b69      	ldr	r3, [pc, #420]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3e:	4a68      	ldr	r2, [pc, #416]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007d46:	e00b      	b.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	3304      	adds	r3, #4
 8007d4c:	2102      	movs	r1, #2
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f000 fb86 	bl	8008460 <RCCEx_PLL2_Config>
 8007d54:	4603      	mov	r3, r0
 8007d56:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007d58:	e002      	b.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d60:	7dfb      	ldrb	r3, [r7, #23]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d109      	bne.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007d66:	4b5e      	ldr	r3, [pc, #376]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d72:	495b      	ldr	r1, [pc, #364]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d74:	4313      	orrs	r3, r2
 8007d76:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007d78:	e001      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d7a:	7dfb      	ldrb	r3, [r7, #23]
 8007d7c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00a      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	3324      	adds	r3, #36	; 0x24
 8007d8e:	2102      	movs	r1, #2
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 fc17 	bl	80085c4 <RCCEx_PLL3_Config>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d001      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d030      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007db0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007db4:	d017      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007db6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dba:	d811      	bhi.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dc0:	d013      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dc6:	d80b      	bhi.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d010      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007dcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dd0:	d106      	bne.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dd2:	4b43      	ldr	r3, [pc, #268]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd6:	4a42      	ldr	r2, [pc, #264]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ddc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007dde:	e007      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	75fb      	strb	r3, [r7, #23]
      break;
 8007de4:	e004      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007de6:	bf00      	nop
 8007de8:	e002      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007dea:	bf00      	nop
 8007dec:	e000      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007dee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007df0:	7dfb      	ldrb	r3, [r7, #23]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d109      	bne.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007df6:	4b3a      	ldr	r3, [pc, #232]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e02:	4937      	ldr	r1, [pc, #220]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e04:	4313      	orrs	r3, r2
 8007e06:	654b      	str	r3, [r1, #84]	; 0x54
 8007e08:	e001      	b.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e0a:	7dfb      	ldrb	r3, [r7, #23]
 8007e0c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d008      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e1a:	4b31      	ldr	r3, [pc, #196]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e26:	492e      	ldr	r1, [pc, #184]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d009      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007e38:	4b29      	ldr	r3, [pc, #164]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007e46:	4926      	ldr	r1, [pc, #152]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d008      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007e58:	4b21      	ldr	r3, [pc, #132]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e5c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e64:	491e      	ldr	r1, [pc, #120]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e66:	4313      	orrs	r3, r2
 8007e68:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00d      	beq.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e76:	4b1a      	ldr	r3, [pc, #104]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	4a19      	ldr	r2, [pc, #100]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e80:	6113      	str	r3, [r2, #16]
 8007e82:	4b17      	ldr	r3, [pc, #92]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e84:	691a      	ldr	r2, [r3, #16]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007e8c:	4914      	ldr	r1, [pc, #80]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	da08      	bge.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007e9a:	4b11      	ldr	r3, [pc, #68]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e9e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ea6:	490e      	ldr	r1, [pc, #56]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d009      	beq.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007eb8:	4b09      	ldr	r3, [pc, #36]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ebc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ec6:	4906      	ldr	r1, [pc, #24]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007ecc:	7dbb      	ldrb	r3, [r7, #22]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d101      	bne.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	e000      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3718      	adds	r7, #24
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	58024400 	.word	0x58024400

08007ee4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007ee8:	f7ff f860 	bl	8006fac <HAL_RCC_GetHCLKFreq>
 8007eec:	4602      	mov	r2, r0
 8007eee:	4b06      	ldr	r3, [pc, #24]	; (8007f08 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	091b      	lsrs	r3, r3, #4
 8007ef4:	f003 0307 	and.w	r3, r3, #7
 8007ef8:	4904      	ldr	r1, [pc, #16]	; (8007f0c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007efa:	5ccb      	ldrb	r3, [r1, r3]
 8007efc:	f003 031f 	and.w	r3, r3, #31
 8007f00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	58024400 	.word	0x58024400
 8007f0c:	0800ef4c 	.word	0x0800ef4c

08007f10 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b089      	sub	sp, #36	; 0x24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f18:	4ba1      	ldr	r3, [pc, #644]	; (80081a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1c:	f003 0303 	and.w	r3, r3, #3
 8007f20:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007f22:	4b9f      	ldr	r3, [pc, #636]	; (80081a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f26:	0b1b      	lsrs	r3, r3, #12
 8007f28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f2c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007f2e:	4b9c      	ldr	r3, [pc, #624]	; (80081a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f32:	091b      	lsrs	r3, r3, #4
 8007f34:	f003 0301 	and.w	r3, r3, #1
 8007f38:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007f3a:	4b99      	ldr	r3, [pc, #612]	; (80081a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f3e:	08db      	lsrs	r3, r3, #3
 8007f40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	fb02 f303 	mul.w	r3, r2, r3
 8007f4a:	ee07 3a90 	vmov	s15, r3
 8007f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f000 8111 	beq.w	8008180 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	f000 8083 	beq.w	800806c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	2b02      	cmp	r3, #2
 8007f6a:	f200 80a1 	bhi.w	80080b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d003      	beq.n	8007f7c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d056      	beq.n	8008028 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007f7a:	e099      	b.n	80080b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f7c:	4b88      	ldr	r3, [pc, #544]	; (80081a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 0320 	and.w	r3, r3, #32
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d02d      	beq.n	8007fe4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f88:	4b85      	ldr	r3, [pc, #532]	; (80081a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	08db      	lsrs	r3, r3, #3
 8007f8e:	f003 0303 	and.w	r3, r3, #3
 8007f92:	4a84      	ldr	r2, [pc, #528]	; (80081a4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007f94:	fa22 f303 	lsr.w	r3, r2, r3
 8007f98:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	ee07 3a90 	vmov	s15, r3
 8007fa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	ee07 3a90 	vmov	s15, r3
 8007faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fb2:	4b7b      	ldr	r3, [pc, #492]	; (80081a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fba:	ee07 3a90 	vmov	s15, r3
 8007fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fc6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80081a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fde:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007fe2:	e087      	b.n	80080f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	ee07 3a90 	vmov	s15, r3
 8007fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80081ac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ff6:	4b6a      	ldr	r3, [pc, #424]	; (80081a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ffe:	ee07 3a90 	vmov	s15, r3
 8008002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008006:	ed97 6a03 	vldr	s12, [r7, #12]
 800800a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80081a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800800e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800801a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800801e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008022:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008026:	e065      	b.n	80080f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	ee07 3a90 	vmov	s15, r3
 800802e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008032:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80081b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800803a:	4b59      	ldr	r3, [pc, #356]	; (80081a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800803c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008042:	ee07 3a90 	vmov	s15, r3
 8008046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800804a:	ed97 6a03 	vldr	s12, [r7, #12]
 800804e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80081a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800805a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800805e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008066:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800806a:	e043      	b.n	80080f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	ee07 3a90 	vmov	s15, r3
 8008072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008076:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80081b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800807a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800807e:	4b48      	ldr	r3, [pc, #288]	; (80081a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008086:	ee07 3a90 	vmov	s15, r3
 800808a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800808e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008092:	eddf 5a45 	vldr	s11, [pc, #276]	; 80081a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800809a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800809e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080ae:	e021      	b.n	80080f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	ee07 3a90 	vmov	s15, r3
 80080b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80081b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80080be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080c2:	4b37      	ldr	r3, [pc, #220]	; (80081a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ca:	ee07 3a90 	vmov	s15, r3
 80080ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80080d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80081a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080f2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80080f4:	4b2a      	ldr	r3, [pc, #168]	; (80081a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f8:	0a5b      	lsrs	r3, r3, #9
 80080fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080fe:	ee07 3a90 	vmov	s15, r3
 8008102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008106:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800810a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800810e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800811a:	ee17 2a90 	vmov	r2, s15
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008122:	4b1f      	ldr	r3, [pc, #124]	; (80081a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008126:	0c1b      	lsrs	r3, r3, #16
 8008128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800812c:	ee07 3a90 	vmov	s15, r3
 8008130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008134:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008138:	ee37 7a87 	vadd.f32	s14, s15, s14
 800813c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008144:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008148:	ee17 2a90 	vmov	r2, s15
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008150:	4b13      	ldr	r3, [pc, #76]	; (80081a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008154:	0e1b      	lsrs	r3, r3, #24
 8008156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800815a:	ee07 3a90 	vmov	s15, r3
 800815e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008162:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008166:	ee37 7a87 	vadd.f32	s14, s15, s14
 800816a:	edd7 6a07 	vldr	s13, [r7, #28]
 800816e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008176:	ee17 2a90 	vmov	r2, s15
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800817e:	e008      	b.n	8008192 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	609a      	str	r2, [r3, #8]
}
 8008192:	bf00      	nop
 8008194:	3724      	adds	r7, #36	; 0x24
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	58024400 	.word	0x58024400
 80081a4:	03d09000 	.word	0x03d09000
 80081a8:	46000000 	.word	0x46000000
 80081ac:	4c742400 	.word	0x4c742400
 80081b0:	4a742400 	.word	0x4a742400
 80081b4:	4af42400 	.word	0x4af42400

080081b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b089      	sub	sp, #36	; 0x24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081c0:	4ba1      	ldr	r3, [pc, #644]	; (8008448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c4:	f003 0303 	and.w	r3, r3, #3
 80081c8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80081ca:	4b9f      	ldr	r3, [pc, #636]	; (8008448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ce:	0d1b      	lsrs	r3, r3, #20
 80081d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081d4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80081d6:	4b9c      	ldr	r3, [pc, #624]	; (8008448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081da:	0a1b      	lsrs	r3, r3, #8
 80081dc:	f003 0301 	and.w	r3, r3, #1
 80081e0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80081e2:	4b99      	ldr	r3, [pc, #612]	; (8008448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081e6:	08db      	lsrs	r3, r3, #3
 80081e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081ec:	693a      	ldr	r2, [r7, #16]
 80081ee:	fb02 f303 	mul.w	r3, r2, r3
 80081f2:	ee07 3a90 	vmov	s15, r3
 80081f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	2b00      	cmp	r3, #0
 8008202:	f000 8111 	beq.w	8008428 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	2b02      	cmp	r3, #2
 800820a:	f000 8083 	beq.w	8008314 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	2b02      	cmp	r3, #2
 8008212:	f200 80a1 	bhi.w	8008358 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d003      	beq.n	8008224 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d056      	beq.n	80082d0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008222:	e099      	b.n	8008358 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008224:	4b88      	ldr	r3, [pc, #544]	; (8008448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 0320 	and.w	r3, r3, #32
 800822c:	2b00      	cmp	r3, #0
 800822e:	d02d      	beq.n	800828c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008230:	4b85      	ldr	r3, [pc, #532]	; (8008448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	08db      	lsrs	r3, r3, #3
 8008236:	f003 0303 	and.w	r3, r3, #3
 800823a:	4a84      	ldr	r2, [pc, #528]	; (800844c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800823c:	fa22 f303 	lsr.w	r3, r2, r3
 8008240:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	ee07 3a90 	vmov	s15, r3
 8008248:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	ee07 3a90 	vmov	s15, r3
 8008252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800825a:	4b7b      	ldr	r3, [pc, #492]	; (8008448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800825c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008262:	ee07 3a90 	vmov	s15, r3
 8008266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800826a:	ed97 6a03 	vldr	s12, [r7, #12]
 800826e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008450 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800827a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800827e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008286:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800828a:	e087      	b.n	800839c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	ee07 3a90 	vmov	s15, r3
 8008292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008296:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008454 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800829a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800829e:	4b6a      	ldr	r3, [pc, #424]	; (8008448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082a6:	ee07 3a90 	vmov	s15, r3
 80082aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80082b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008450 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082ce:	e065      	b.n	800839c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	ee07 3a90 	vmov	s15, r3
 80082d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008458 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80082de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082e2:	4b59      	ldr	r3, [pc, #356]	; (8008448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ea:	ee07 3a90 	vmov	s15, r3
 80082ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80082f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008450 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008302:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800830a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800830e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008312:	e043      	b.n	800839c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	ee07 3a90 	vmov	s15, r3
 800831a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800831e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800845c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008326:	4b48      	ldr	r3, [pc, #288]	; (8008448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800832e:	ee07 3a90 	vmov	s15, r3
 8008332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008336:	ed97 6a03 	vldr	s12, [r7, #12]
 800833a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008450 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800833e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008346:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800834a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800834e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008352:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008356:	e021      	b.n	800839c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	ee07 3a90 	vmov	s15, r3
 800835e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008362:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008458 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800836a:	4b37      	ldr	r3, [pc, #220]	; (8008448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800836c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008372:	ee07 3a90 	vmov	s15, r3
 8008376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800837a:	ed97 6a03 	vldr	s12, [r7, #12]
 800837e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008450 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800838a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800838e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008396:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800839a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800839c:	4b2a      	ldr	r3, [pc, #168]	; (8008448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800839e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a0:	0a5b      	lsrs	r3, r3, #9
 80083a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083a6:	ee07 3a90 	vmov	s15, r3
 80083aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80083ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083c2:	ee17 2a90 	vmov	r2, s15
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80083ca:	4b1f      	ldr	r3, [pc, #124]	; (8008448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ce:	0c1b      	lsrs	r3, r3, #16
 80083d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083d4:	ee07 3a90 	vmov	s15, r3
 80083d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80083e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083f0:	ee17 2a90 	vmov	r2, s15
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80083f8:	4b13      	ldr	r3, [pc, #76]	; (8008448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fc:	0e1b      	lsrs	r3, r3, #24
 80083fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008402:	ee07 3a90 	vmov	s15, r3
 8008406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800840a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800840e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008412:	edd7 6a07 	vldr	s13, [r7, #28]
 8008416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800841a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800841e:	ee17 2a90 	vmov	r2, s15
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008426:	e008      	b.n	800843a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	609a      	str	r2, [r3, #8]
}
 800843a:	bf00      	nop
 800843c:	3724      	adds	r7, #36	; 0x24
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	58024400 	.word	0x58024400
 800844c:	03d09000 	.word	0x03d09000
 8008450:	46000000 	.word	0x46000000
 8008454:	4c742400 	.word	0x4c742400
 8008458:	4a742400 	.word	0x4a742400
 800845c:	4af42400 	.word	0x4af42400

08008460 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800846a:	2300      	movs	r3, #0
 800846c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800846e:	4b53      	ldr	r3, [pc, #332]	; (80085bc <RCCEx_PLL2_Config+0x15c>)
 8008470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008472:	f003 0303 	and.w	r3, r3, #3
 8008476:	2b03      	cmp	r3, #3
 8008478:	d101      	bne.n	800847e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	e099      	b.n	80085b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800847e:	4b4f      	ldr	r3, [pc, #316]	; (80085bc <RCCEx_PLL2_Config+0x15c>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a4e      	ldr	r2, [pc, #312]	; (80085bc <RCCEx_PLL2_Config+0x15c>)
 8008484:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008488:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800848a:	f7f9 fa87 	bl	800199c <HAL_GetTick>
 800848e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008490:	e008      	b.n	80084a4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008492:	f7f9 fa83 	bl	800199c <HAL_GetTick>
 8008496:	4602      	mov	r2, r0
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	1ad3      	subs	r3, r2, r3
 800849c:	2b02      	cmp	r3, #2
 800849e:	d901      	bls.n	80084a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80084a0:	2303      	movs	r3, #3
 80084a2:	e086      	b.n	80085b2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80084a4:	4b45      	ldr	r3, [pc, #276]	; (80085bc <RCCEx_PLL2_Config+0x15c>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1f0      	bne.n	8008492 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80084b0:	4b42      	ldr	r3, [pc, #264]	; (80085bc <RCCEx_PLL2_Config+0x15c>)
 80084b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	031b      	lsls	r3, r3, #12
 80084be:	493f      	ldr	r1, [pc, #252]	; (80085bc <RCCEx_PLL2_Config+0x15c>)
 80084c0:	4313      	orrs	r3, r2
 80084c2:	628b      	str	r3, [r1, #40]	; 0x28
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	3b01      	subs	r3, #1
 80084ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	3b01      	subs	r3, #1
 80084d4:	025b      	lsls	r3, r3, #9
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	431a      	orrs	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	3b01      	subs	r3, #1
 80084e0:	041b      	lsls	r3, r3, #16
 80084e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80084e6:	431a      	orrs	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	3b01      	subs	r3, #1
 80084ee:	061b      	lsls	r3, r3, #24
 80084f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80084f4:	4931      	ldr	r1, [pc, #196]	; (80085bc <RCCEx_PLL2_Config+0x15c>)
 80084f6:	4313      	orrs	r3, r2
 80084f8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80084fa:	4b30      	ldr	r3, [pc, #192]	; (80085bc <RCCEx_PLL2_Config+0x15c>)
 80084fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	492d      	ldr	r1, [pc, #180]	; (80085bc <RCCEx_PLL2_Config+0x15c>)
 8008508:	4313      	orrs	r3, r2
 800850a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800850c:	4b2b      	ldr	r3, [pc, #172]	; (80085bc <RCCEx_PLL2_Config+0x15c>)
 800850e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008510:	f023 0220 	bic.w	r2, r3, #32
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	4928      	ldr	r1, [pc, #160]	; (80085bc <RCCEx_PLL2_Config+0x15c>)
 800851a:	4313      	orrs	r3, r2
 800851c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800851e:	4b27      	ldr	r3, [pc, #156]	; (80085bc <RCCEx_PLL2_Config+0x15c>)
 8008520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008522:	4a26      	ldr	r2, [pc, #152]	; (80085bc <RCCEx_PLL2_Config+0x15c>)
 8008524:	f023 0310 	bic.w	r3, r3, #16
 8008528:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800852a:	4b24      	ldr	r3, [pc, #144]	; (80085bc <RCCEx_PLL2_Config+0x15c>)
 800852c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800852e:	4b24      	ldr	r3, [pc, #144]	; (80085c0 <RCCEx_PLL2_Config+0x160>)
 8008530:	4013      	ands	r3, r2
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	69d2      	ldr	r2, [r2, #28]
 8008536:	00d2      	lsls	r2, r2, #3
 8008538:	4920      	ldr	r1, [pc, #128]	; (80085bc <RCCEx_PLL2_Config+0x15c>)
 800853a:	4313      	orrs	r3, r2
 800853c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800853e:	4b1f      	ldr	r3, [pc, #124]	; (80085bc <RCCEx_PLL2_Config+0x15c>)
 8008540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008542:	4a1e      	ldr	r2, [pc, #120]	; (80085bc <RCCEx_PLL2_Config+0x15c>)
 8008544:	f043 0310 	orr.w	r3, r3, #16
 8008548:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d106      	bne.n	800855e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008550:	4b1a      	ldr	r3, [pc, #104]	; (80085bc <RCCEx_PLL2_Config+0x15c>)
 8008552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008554:	4a19      	ldr	r2, [pc, #100]	; (80085bc <RCCEx_PLL2_Config+0x15c>)
 8008556:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800855a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800855c:	e00f      	b.n	800857e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d106      	bne.n	8008572 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008564:	4b15      	ldr	r3, [pc, #84]	; (80085bc <RCCEx_PLL2_Config+0x15c>)
 8008566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008568:	4a14      	ldr	r2, [pc, #80]	; (80085bc <RCCEx_PLL2_Config+0x15c>)
 800856a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800856e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008570:	e005      	b.n	800857e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008572:	4b12      	ldr	r3, [pc, #72]	; (80085bc <RCCEx_PLL2_Config+0x15c>)
 8008574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008576:	4a11      	ldr	r2, [pc, #68]	; (80085bc <RCCEx_PLL2_Config+0x15c>)
 8008578:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800857c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800857e:	4b0f      	ldr	r3, [pc, #60]	; (80085bc <RCCEx_PLL2_Config+0x15c>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a0e      	ldr	r2, [pc, #56]	; (80085bc <RCCEx_PLL2_Config+0x15c>)
 8008584:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008588:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800858a:	f7f9 fa07 	bl	800199c <HAL_GetTick>
 800858e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008590:	e008      	b.n	80085a4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008592:	f7f9 fa03 	bl	800199c <HAL_GetTick>
 8008596:	4602      	mov	r2, r0
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	2b02      	cmp	r3, #2
 800859e:	d901      	bls.n	80085a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e006      	b.n	80085b2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80085a4:	4b05      	ldr	r3, [pc, #20]	; (80085bc <RCCEx_PLL2_Config+0x15c>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d0f0      	beq.n	8008592 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80085b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	58024400 	.word	0x58024400
 80085c0:	ffff0007 	.word	0xffff0007

080085c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80085d2:	4b53      	ldr	r3, [pc, #332]	; (8008720 <RCCEx_PLL3_Config+0x15c>)
 80085d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d6:	f003 0303 	and.w	r3, r3, #3
 80085da:	2b03      	cmp	r3, #3
 80085dc:	d101      	bne.n	80085e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e099      	b.n	8008716 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80085e2:	4b4f      	ldr	r3, [pc, #316]	; (8008720 <RCCEx_PLL3_Config+0x15c>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a4e      	ldr	r2, [pc, #312]	; (8008720 <RCCEx_PLL3_Config+0x15c>)
 80085e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085ee:	f7f9 f9d5 	bl	800199c <HAL_GetTick>
 80085f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80085f4:	e008      	b.n	8008608 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80085f6:	f7f9 f9d1 	bl	800199c <HAL_GetTick>
 80085fa:	4602      	mov	r2, r0
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	2b02      	cmp	r3, #2
 8008602:	d901      	bls.n	8008608 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008604:	2303      	movs	r3, #3
 8008606:	e086      	b.n	8008716 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008608:	4b45      	ldr	r3, [pc, #276]	; (8008720 <RCCEx_PLL3_Config+0x15c>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1f0      	bne.n	80085f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008614:	4b42      	ldr	r3, [pc, #264]	; (8008720 <RCCEx_PLL3_Config+0x15c>)
 8008616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008618:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	051b      	lsls	r3, r3, #20
 8008622:	493f      	ldr	r1, [pc, #252]	; (8008720 <RCCEx_PLL3_Config+0x15c>)
 8008624:	4313      	orrs	r3, r2
 8008626:	628b      	str	r3, [r1, #40]	; 0x28
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	3b01      	subs	r3, #1
 800862e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	3b01      	subs	r3, #1
 8008638:	025b      	lsls	r3, r3, #9
 800863a:	b29b      	uxth	r3, r3
 800863c:	431a      	orrs	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	3b01      	subs	r3, #1
 8008644:	041b      	lsls	r3, r3, #16
 8008646:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800864a:	431a      	orrs	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	3b01      	subs	r3, #1
 8008652:	061b      	lsls	r3, r3, #24
 8008654:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008658:	4931      	ldr	r1, [pc, #196]	; (8008720 <RCCEx_PLL3_Config+0x15c>)
 800865a:	4313      	orrs	r3, r2
 800865c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800865e:	4b30      	ldr	r3, [pc, #192]	; (8008720 <RCCEx_PLL3_Config+0x15c>)
 8008660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008662:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	695b      	ldr	r3, [r3, #20]
 800866a:	492d      	ldr	r1, [pc, #180]	; (8008720 <RCCEx_PLL3_Config+0x15c>)
 800866c:	4313      	orrs	r3, r2
 800866e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008670:	4b2b      	ldr	r3, [pc, #172]	; (8008720 <RCCEx_PLL3_Config+0x15c>)
 8008672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008674:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	699b      	ldr	r3, [r3, #24]
 800867c:	4928      	ldr	r1, [pc, #160]	; (8008720 <RCCEx_PLL3_Config+0x15c>)
 800867e:	4313      	orrs	r3, r2
 8008680:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008682:	4b27      	ldr	r3, [pc, #156]	; (8008720 <RCCEx_PLL3_Config+0x15c>)
 8008684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008686:	4a26      	ldr	r2, [pc, #152]	; (8008720 <RCCEx_PLL3_Config+0x15c>)
 8008688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800868c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800868e:	4b24      	ldr	r3, [pc, #144]	; (8008720 <RCCEx_PLL3_Config+0x15c>)
 8008690:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008692:	4b24      	ldr	r3, [pc, #144]	; (8008724 <RCCEx_PLL3_Config+0x160>)
 8008694:	4013      	ands	r3, r2
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	69d2      	ldr	r2, [r2, #28]
 800869a:	00d2      	lsls	r2, r2, #3
 800869c:	4920      	ldr	r1, [pc, #128]	; (8008720 <RCCEx_PLL3_Config+0x15c>)
 800869e:	4313      	orrs	r3, r2
 80086a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80086a2:	4b1f      	ldr	r3, [pc, #124]	; (8008720 <RCCEx_PLL3_Config+0x15c>)
 80086a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a6:	4a1e      	ldr	r2, [pc, #120]	; (8008720 <RCCEx_PLL3_Config+0x15c>)
 80086a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d106      	bne.n	80086c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80086b4:	4b1a      	ldr	r3, [pc, #104]	; (8008720 <RCCEx_PLL3_Config+0x15c>)
 80086b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b8:	4a19      	ldr	r2, [pc, #100]	; (8008720 <RCCEx_PLL3_Config+0x15c>)
 80086ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80086be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086c0:	e00f      	b.n	80086e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d106      	bne.n	80086d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80086c8:	4b15      	ldr	r3, [pc, #84]	; (8008720 <RCCEx_PLL3_Config+0x15c>)
 80086ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086cc:	4a14      	ldr	r2, [pc, #80]	; (8008720 <RCCEx_PLL3_Config+0x15c>)
 80086ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80086d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086d4:	e005      	b.n	80086e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80086d6:	4b12      	ldr	r3, [pc, #72]	; (8008720 <RCCEx_PLL3_Config+0x15c>)
 80086d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086da:	4a11      	ldr	r2, [pc, #68]	; (8008720 <RCCEx_PLL3_Config+0x15c>)
 80086dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80086e2:	4b0f      	ldr	r3, [pc, #60]	; (8008720 <RCCEx_PLL3_Config+0x15c>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a0e      	ldr	r2, [pc, #56]	; (8008720 <RCCEx_PLL3_Config+0x15c>)
 80086e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086ee:	f7f9 f955 	bl	800199c <HAL_GetTick>
 80086f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80086f4:	e008      	b.n	8008708 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80086f6:	f7f9 f951 	bl	800199c <HAL_GetTick>
 80086fa:	4602      	mov	r2, r0
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	2b02      	cmp	r3, #2
 8008702:	d901      	bls.n	8008708 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008704:	2303      	movs	r3, #3
 8008706:	e006      	b.n	8008716 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008708:	4b05      	ldr	r3, [pc, #20]	; (8008720 <RCCEx_PLL3_Config+0x15c>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d0f0      	beq.n	80086f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008714:	7bfb      	ldrb	r3, [r7, #15]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	58024400 	.word	0x58024400
 8008724:	ffff0007 	.word	0xffff0007

08008728 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e042      	b.n	80087c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008740:	2b00      	cmp	r3, #0
 8008742:	d106      	bne.n	8008752 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f7f8 fedf 	bl	8001510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2224      	movs	r2, #36	; 0x24
 8008756:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f022 0201 	bic.w	r2, r2, #1
 8008768:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 fcd6 	bl	800911c <UART_SetConfig>
 8008770:	4603      	mov	r3, r0
 8008772:	2b01      	cmp	r3, #1
 8008774:	d101      	bne.n	800877a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e022      	b.n	80087c0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877e:	2b00      	cmp	r3, #0
 8008780:	d002      	beq.n	8008788 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f001 fa2a 	bl	8009bdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	685a      	ldr	r2, [r3, #4]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008796:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	689a      	ldr	r2, [r3, #8]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80087a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f042 0201 	orr.w	r2, r2, #1
 80087b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f001 fab1 	bl	8009d20 <UART_CheckIdleState>
 80087be:	4603      	mov	r3, r0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b08a      	sub	sp, #40	; 0x28
 80087cc:	af02      	add	r7, sp, #8
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	603b      	str	r3, [r7, #0]
 80087d4:	4613      	mov	r3, r2
 80087d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087de:	2b20      	cmp	r3, #32
 80087e0:	f040 8083 	bne.w	80088ea <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d002      	beq.n	80087f0 <HAL_UART_Transmit+0x28>
 80087ea:	88fb      	ldrh	r3, [r7, #6]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d101      	bne.n	80087f4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	e07b      	b.n	80088ec <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d101      	bne.n	8008802 <HAL_UART_Transmit+0x3a>
 80087fe:	2302      	movs	r3, #2
 8008800:	e074      	b.n	80088ec <HAL_UART_Transmit+0x124>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2201      	movs	r2, #1
 8008806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2221      	movs	r2, #33	; 0x21
 8008816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800881a:	f7f9 f8bf 	bl	800199c <HAL_GetTick>
 800881e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	88fa      	ldrh	r2, [r7, #6]
 8008824:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	88fa      	ldrh	r2, [r7, #6]
 800882c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008838:	d108      	bne.n	800884c <HAL_UART_Transmit+0x84>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d104      	bne.n	800884c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008842:	2300      	movs	r3, #0
 8008844:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	61bb      	str	r3, [r7, #24]
 800884a:	e003      	b.n	8008854 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008850:	2300      	movs	r3, #0
 8008852:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800885c:	e02c      	b.n	80088b8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	9300      	str	r3, [sp, #0]
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	2200      	movs	r2, #0
 8008866:	2180      	movs	r1, #128	; 0x80
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f001 faa4 	bl	8009db6 <UART_WaitOnFlagUntilTimeout>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d001      	beq.n	8008878 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008874:	2303      	movs	r3, #3
 8008876:	e039      	b.n	80088ec <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d10b      	bne.n	8008896 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	881b      	ldrh	r3, [r3, #0]
 8008882:	461a      	mov	r2, r3
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800888c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	3302      	adds	r3, #2
 8008892:	61bb      	str	r3, [r7, #24]
 8008894:	e007      	b.n	80088a6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	781a      	ldrb	r2, [r3, #0]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	3301      	adds	r3, #1
 80088a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	3b01      	subs	r3, #1
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80088be:	b29b      	uxth	r3, r3
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d1cc      	bne.n	800885e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	2200      	movs	r2, #0
 80088cc:	2140      	movs	r1, #64	; 0x40
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f001 fa71 	bl	8009db6 <UART_WaitOnFlagUntilTimeout>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d001      	beq.n	80088de <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80088da:	2303      	movs	r3, #3
 80088dc:	e006      	b.n	80088ec <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2220      	movs	r2, #32
 80088e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	e000      	b.n	80088ec <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80088ea:	2302      	movs	r3, #2
  }
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3720      	adds	r7, #32
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b08a      	sub	sp, #40	; 0x28
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	4613      	mov	r3, r2
 8008900:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008908:	2b20      	cmp	r3, #32
 800890a:	d142      	bne.n	8008992 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d002      	beq.n	8008918 <HAL_UART_Receive_IT+0x24>
 8008912:	88fb      	ldrh	r3, [r7, #6]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d101      	bne.n	800891c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	e03b      	b.n	8008994 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008922:	2b01      	cmp	r3, #1
 8008924:	d101      	bne.n	800892a <HAL_UART_Receive_IT+0x36>
 8008926:	2302      	movs	r3, #2
 8008928:	e034      	b.n	8008994 <HAL_UART_Receive_IT+0xa0>
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2201      	movs	r2, #1
 800892e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a17      	ldr	r2, [pc, #92]	; (800899c <HAL_UART_Receive_IT+0xa8>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d01f      	beq.n	8008982 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800894c:	2b00      	cmp	r3, #0
 800894e:	d018      	beq.n	8008982 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	e853 3f00 	ldrex	r3, [r3]
 800895c:	613b      	str	r3, [r7, #16]
   return(result);
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008964:	627b      	str	r3, [r7, #36]	; 0x24
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	461a      	mov	r2, r3
 800896c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896e:	623b      	str	r3, [r7, #32]
 8008970:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008972:	69f9      	ldr	r1, [r7, #28]
 8008974:	6a3a      	ldr	r2, [r7, #32]
 8008976:	e841 2300 	strex	r3, r2, [r1]
 800897a:	61bb      	str	r3, [r7, #24]
   return(result);
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1e6      	bne.n	8008950 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008982:	88fb      	ldrh	r3, [r7, #6]
 8008984:	461a      	mov	r2, r3
 8008986:	68b9      	ldr	r1, [r7, #8]
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f001 fadd 	bl	8009f48 <UART_Start_Receive_IT>
 800898e:	4603      	mov	r3, r0
 8008990:	e000      	b.n	8008994 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008992:	2302      	movs	r3, #2
  }
}
 8008994:	4618      	mov	r0, r3
 8008996:	3728      	adds	r7, #40	; 0x28
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	58000c00 	.word	0x58000c00

080089a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b0ba      	sub	sp, #232	; 0xe8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	69db      	ldr	r3, [r3, #28]
 80089ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80089c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80089ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80089ce:	4013      	ands	r3, r2
 80089d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80089d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d11b      	bne.n	8008a14 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80089dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089e0:	f003 0320 	and.w	r3, r3, #32
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d015      	beq.n	8008a14 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80089e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ec:	f003 0320 	and.w	r3, r3, #32
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d105      	bne.n	8008a00 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80089f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d009      	beq.n	8008a14 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f000 835a 	beq.w	80090be <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	4798      	blx	r3
      }
      return;
 8008a12:	e354      	b.n	80090be <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008a14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f000 811f 	beq.w	8008c5c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008a1e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008a22:	4b8b      	ldr	r3, [pc, #556]	; (8008c50 <HAL_UART_IRQHandler+0x2b0>)
 8008a24:	4013      	ands	r3, r2
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d106      	bne.n	8008a38 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008a2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008a2e:	4b89      	ldr	r3, [pc, #548]	; (8008c54 <HAL_UART_IRQHandler+0x2b4>)
 8008a30:	4013      	ands	r3, r2
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f000 8112 	beq.w	8008c5c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a3c:	f003 0301 	and.w	r3, r3, #1
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d011      	beq.n	8008a68 <HAL_UART_IRQHandler+0xc8>
 8008a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00b      	beq.n	8008a68 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2201      	movs	r2, #1
 8008a56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a5e:	f043 0201 	orr.w	r2, r3, #1
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a6c:	f003 0302 	and.w	r3, r3, #2
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d011      	beq.n	8008a98 <HAL_UART_IRQHandler+0xf8>
 8008a74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a78:	f003 0301 	and.w	r3, r3, #1
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00b      	beq.n	8008a98 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2202      	movs	r2, #2
 8008a86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a8e:	f043 0204 	orr.w	r2, r3, #4
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a9c:	f003 0304 	and.w	r3, r3, #4
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d011      	beq.n	8008ac8 <HAL_UART_IRQHandler+0x128>
 8008aa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008aa8:	f003 0301 	and.w	r3, r3, #1
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00b      	beq.n	8008ac8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2204      	movs	r2, #4
 8008ab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008abe:	f043 0202 	orr.w	r2, r3, #2
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008acc:	f003 0308 	and.w	r3, r3, #8
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d017      	beq.n	8008b04 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ad8:	f003 0320 	and.w	r3, r3, #32
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d105      	bne.n	8008aec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008ae0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008ae4:	4b5a      	ldr	r3, [pc, #360]	; (8008c50 <HAL_UART_IRQHandler+0x2b0>)
 8008ae6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00b      	beq.n	8008b04 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2208      	movs	r2, #8
 8008af2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008afa:	f043 0208 	orr.w	r2, r3, #8
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d012      	beq.n	8008b36 <HAL_UART_IRQHandler+0x196>
 8008b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00c      	beq.n	8008b36 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b2c:	f043 0220 	orr.w	r2, r3, #32
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f000 82c0 	beq.w	80090c2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b46:	f003 0320 	and.w	r3, r3, #32
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d013      	beq.n	8008b76 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b52:	f003 0320 	and.w	r3, r3, #32
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d105      	bne.n	8008b66 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008b5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d007      	beq.n	8008b76 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d003      	beq.n	8008b76 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b8a:	2b40      	cmp	r3, #64	; 0x40
 8008b8c:	d005      	beq.n	8008b9a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008b8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008b92:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d04f      	beq.n	8008c3a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f001 fafe 	bl	800a19c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008baa:	2b40      	cmp	r3, #64	; 0x40
 8008bac:	d141      	bne.n	8008c32 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	3308      	adds	r3, #8
 8008bb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008bbc:	e853 3f00 	ldrex	r3, [r3]
 8008bc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008bc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	3308      	adds	r3, #8
 8008bd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008bda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008bde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008be6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008bea:	e841 2300 	strex	r3, r2, [r1]
 8008bee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008bf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d1d9      	bne.n	8008bae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d013      	beq.n	8008c2a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c06:	4a14      	ldr	r2, [pc, #80]	; (8008c58 <HAL_UART_IRQHandler+0x2b8>)
 8008c08:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7f9 fb42 	bl	8002298 <HAL_DMA_Abort_IT>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d017      	beq.n	8008c4a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008c24:	4610      	mov	r0, r2
 8008c26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c28:	e00f      	b.n	8008c4a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fa60 	bl	80090f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c30:	e00b      	b.n	8008c4a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 fa5c 	bl	80090f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c38:	e007      	b.n	8008c4a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 fa58 	bl	80090f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008c48:	e23b      	b.n	80090c2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c4a:	bf00      	nop
    return;
 8008c4c:	e239      	b.n	80090c2 <HAL_UART_IRQHandler+0x722>
 8008c4e:	bf00      	nop
 8008c50:	10000001 	.word	0x10000001
 8008c54:	04000120 	.word	0x04000120
 8008c58:	0800a269 	.word	0x0800a269

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	f040 81ce 	bne.w	8009002 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c6a:	f003 0310 	and.w	r3, r3, #16
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	f000 81c7 	beq.w	8009002 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c78:	f003 0310 	and.w	r3, r3, #16
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f000 81c0 	beq.w	8009002 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2210      	movs	r2, #16
 8008c88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c94:	2b40      	cmp	r3, #64	; 0x40
 8008c96:	f040 813b 	bne.w	8008f10 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a8b      	ldr	r2, [pc, #556]	; (8008ed0 <HAL_UART_IRQHandler+0x530>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d059      	beq.n	8008d5a <HAL_UART_IRQHandler+0x3ba>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a89      	ldr	r2, [pc, #548]	; (8008ed4 <HAL_UART_IRQHandler+0x534>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d053      	beq.n	8008d5a <HAL_UART_IRQHandler+0x3ba>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a87      	ldr	r2, [pc, #540]	; (8008ed8 <HAL_UART_IRQHandler+0x538>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d04d      	beq.n	8008d5a <HAL_UART_IRQHandler+0x3ba>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a85      	ldr	r2, [pc, #532]	; (8008edc <HAL_UART_IRQHandler+0x53c>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d047      	beq.n	8008d5a <HAL_UART_IRQHandler+0x3ba>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a83      	ldr	r2, [pc, #524]	; (8008ee0 <HAL_UART_IRQHandler+0x540>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d041      	beq.n	8008d5a <HAL_UART_IRQHandler+0x3ba>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a81      	ldr	r2, [pc, #516]	; (8008ee4 <HAL_UART_IRQHandler+0x544>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d03b      	beq.n	8008d5a <HAL_UART_IRQHandler+0x3ba>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a7f      	ldr	r2, [pc, #508]	; (8008ee8 <HAL_UART_IRQHandler+0x548>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d035      	beq.n	8008d5a <HAL_UART_IRQHandler+0x3ba>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a7d      	ldr	r2, [pc, #500]	; (8008eec <HAL_UART_IRQHandler+0x54c>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d02f      	beq.n	8008d5a <HAL_UART_IRQHandler+0x3ba>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a7b      	ldr	r2, [pc, #492]	; (8008ef0 <HAL_UART_IRQHandler+0x550>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d029      	beq.n	8008d5a <HAL_UART_IRQHandler+0x3ba>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a79      	ldr	r2, [pc, #484]	; (8008ef4 <HAL_UART_IRQHandler+0x554>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d023      	beq.n	8008d5a <HAL_UART_IRQHandler+0x3ba>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a77      	ldr	r2, [pc, #476]	; (8008ef8 <HAL_UART_IRQHandler+0x558>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d01d      	beq.n	8008d5a <HAL_UART_IRQHandler+0x3ba>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a75      	ldr	r2, [pc, #468]	; (8008efc <HAL_UART_IRQHandler+0x55c>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d017      	beq.n	8008d5a <HAL_UART_IRQHandler+0x3ba>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a73      	ldr	r2, [pc, #460]	; (8008f00 <HAL_UART_IRQHandler+0x560>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d011      	beq.n	8008d5a <HAL_UART_IRQHandler+0x3ba>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a71      	ldr	r2, [pc, #452]	; (8008f04 <HAL_UART_IRQHandler+0x564>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d00b      	beq.n	8008d5a <HAL_UART_IRQHandler+0x3ba>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a6f      	ldr	r2, [pc, #444]	; (8008f08 <HAL_UART_IRQHandler+0x568>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d005      	beq.n	8008d5a <HAL_UART_IRQHandler+0x3ba>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a6d      	ldr	r2, [pc, #436]	; (8008f0c <HAL_UART_IRQHandler+0x56c>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d105      	bne.n	8008d66 <HAL_UART_IRQHandler+0x3c6>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	e004      	b.n	8008d70 <HAL_UART_IRQHandler+0x3d0>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008d74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f000 81a4 	beq.w	80090c6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	f080 819c 	bcs.w	80090c6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008d94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d9c:	69db      	ldr	r3, [r3, #28]
 8008d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008da2:	f000 8086 	beq.w	8008eb2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008db2:	e853 3f00 	ldrex	r3, [r3]
 8008db6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008dba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008dbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008dd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008dd4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008ddc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008de0:	e841 2300 	strex	r3, r2, [r1]
 8008de4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008de8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1da      	bne.n	8008da6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	3308      	adds	r3, #8
 8008df6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dfa:	e853 3f00 	ldrex	r3, [r3]
 8008dfe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008e00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e02:	f023 0301 	bic.w	r3, r3, #1
 8008e06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	3308      	adds	r3, #8
 8008e10:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008e14:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008e18:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008e1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008e20:	e841 2300 	strex	r3, r2, [r1]
 8008e24:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008e26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1e1      	bne.n	8008df0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	3308      	adds	r3, #8
 8008e32:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e36:	e853 3f00 	ldrex	r3, [r3]
 8008e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008e3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	3308      	adds	r3, #8
 8008e4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008e50:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008e52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e54:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008e56:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008e58:	e841 2300 	strex	r3, r2, [r1]
 8008e5c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008e5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1e3      	bne.n	8008e2c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2220      	movs	r2, #32
 8008e68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e7a:	e853 3f00 	ldrex	r3, [r3]
 8008e7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e82:	f023 0310 	bic.w	r3, r3, #16
 8008e86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e94:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e96:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e9c:	e841 2300 	strex	r3, r2, [r1]
 8008ea0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d1e4      	bne.n	8008e72 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008eac:	4618      	mov	r0, r3
 8008eae:	f7f8 fed5 	bl	8001c5c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f91c 	bl	8009104 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008ecc:	e0fb      	b.n	80090c6 <HAL_UART_IRQHandler+0x726>
 8008ece:	bf00      	nop
 8008ed0:	40020010 	.word	0x40020010
 8008ed4:	40020028 	.word	0x40020028
 8008ed8:	40020040 	.word	0x40020040
 8008edc:	40020058 	.word	0x40020058
 8008ee0:	40020070 	.word	0x40020070
 8008ee4:	40020088 	.word	0x40020088
 8008ee8:	400200a0 	.word	0x400200a0
 8008eec:	400200b8 	.word	0x400200b8
 8008ef0:	40020410 	.word	0x40020410
 8008ef4:	40020428 	.word	0x40020428
 8008ef8:	40020440 	.word	0x40020440
 8008efc:	40020458 	.word	0x40020458
 8008f00:	40020470 	.word	0x40020470
 8008f04:	40020488 	.word	0x40020488
 8008f08:	400204a0 	.word	0x400204a0
 8008f0c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	1ad3      	subs	r3, r2, r3
 8008f20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f000 80cc 	beq.w	80090ca <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8008f32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f000 80c7 	beq.w	80090ca <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f44:	e853 3f00 	ldrex	r3, [r3]
 8008f48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008f5e:	647b      	str	r3, [r7, #68]	; 0x44
 8008f60:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f66:	e841 2300 	strex	r3, r2, [r1]
 8008f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1e4      	bne.n	8008f3c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	3308      	adds	r3, #8
 8008f78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7c:	e853 3f00 	ldrex	r3, [r3]
 8008f80:	623b      	str	r3, [r7, #32]
   return(result);
 8008f82:	6a3a      	ldr	r2, [r7, #32]
 8008f84:	4b54      	ldr	r3, [pc, #336]	; (80090d8 <HAL_UART_IRQHandler+0x738>)
 8008f86:	4013      	ands	r3, r2
 8008f88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	3308      	adds	r3, #8
 8008f92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008f96:	633a      	str	r2, [r7, #48]	; 0x30
 8008f98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f9e:	e841 2300 	strex	r3, r2, [r1]
 8008fa2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d1e3      	bne.n	8008f72 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2220      	movs	r2, #32
 8008fae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	e853 3f00 	ldrex	r3, [r3]
 8008fca:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f023 0310 	bic.w	r3, r3, #16
 8008fd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	461a      	mov	r2, r3
 8008fdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008fe0:	61fb      	str	r3, [r7, #28]
 8008fe2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe4:	69b9      	ldr	r1, [r7, #24]
 8008fe6:	69fa      	ldr	r2, [r7, #28]
 8008fe8:	e841 2300 	strex	r3, r2, [r1]
 8008fec:	617b      	str	r3, [r7, #20]
   return(result);
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d1e4      	bne.n	8008fbe <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ff4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f882 	bl	8009104 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009000:	e063      	b.n	80090ca <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00e      	beq.n	800902c <HAL_UART_IRQHandler+0x68c>
 800900e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009016:	2b00      	cmp	r3, #0
 8009018:	d008      	beq.n	800902c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009022:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f001 fdbd 	bl	800aba4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800902a:	e051      	b.n	80090d0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800902c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009034:	2b00      	cmp	r3, #0
 8009036:	d014      	beq.n	8009062 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800903c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009040:	2b00      	cmp	r3, #0
 8009042:	d105      	bne.n	8009050 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009048:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800904c:	2b00      	cmp	r3, #0
 800904e:	d008      	beq.n	8009062 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009054:	2b00      	cmp	r3, #0
 8009056:	d03a      	beq.n	80090ce <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	4798      	blx	r3
    }
    return;
 8009060:	e035      	b.n	80090ce <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800906a:	2b00      	cmp	r3, #0
 800906c:	d009      	beq.n	8009082 <HAL_UART_IRQHandler+0x6e2>
 800906e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009076:	2b00      	cmp	r3, #0
 8009078:	d003      	beq.n	8009082 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f001 f90a 	bl	800a294 <UART_EndTransmit_IT>
    return;
 8009080:	e026      	b.n	80090d0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009086:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800908a:	2b00      	cmp	r3, #0
 800908c:	d009      	beq.n	80090a2 <HAL_UART_IRQHandler+0x702>
 800908e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009092:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009096:	2b00      	cmp	r3, #0
 8009098:	d003      	beq.n	80090a2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f001 fd96 	bl	800abcc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80090a0:	e016      	b.n	80090d0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80090a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d010      	beq.n	80090d0 <HAL_UART_IRQHandler+0x730>
 80090ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	da0c      	bge.n	80090d0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f001 fd7e 	bl	800abb8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80090bc:	e008      	b.n	80090d0 <HAL_UART_IRQHandler+0x730>
      return;
 80090be:	bf00      	nop
 80090c0:	e006      	b.n	80090d0 <HAL_UART_IRQHandler+0x730>
    return;
 80090c2:	bf00      	nop
 80090c4:	e004      	b.n	80090d0 <HAL_UART_IRQHandler+0x730>
      return;
 80090c6:	bf00      	nop
 80090c8:	e002      	b.n	80090d0 <HAL_UART_IRQHandler+0x730>
      return;
 80090ca:	bf00      	nop
 80090cc:	e000      	b.n	80090d0 <HAL_UART_IRQHandler+0x730>
    return;
 80090ce:	bf00      	nop
  }
}
 80090d0:	37e8      	adds	r7, #232	; 0xe8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	effffffe 	.word	0xeffffffe

080090dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80090e4:	bf00      	nop
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80090f8:	bf00      	nop
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	460b      	mov	r3, r1
 800910e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800911c:	b5b0      	push	{r4, r5, r7, lr}
 800911e:	b08e      	sub	sp, #56	; 0x38
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009124:	2300      	movs	r3, #0
 8009126:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	689a      	ldr	r2, [r3, #8]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	431a      	orrs	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	695b      	ldr	r3, [r3, #20]
 8009138:	431a      	orrs	r2, r3
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	69db      	ldr	r3, [r3, #28]
 800913e:	4313      	orrs	r3, r2
 8009140:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	4bbf      	ldr	r3, [pc, #764]	; (8009448 <UART_SetConfig+0x32c>)
 800914a:	4013      	ands	r3, r2
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	6812      	ldr	r2, [r2, #0]
 8009150:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009152:	430b      	orrs	r3, r1
 8009154:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	68da      	ldr	r2, [r3, #12]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	430a      	orrs	r2, r1
 800916a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	699b      	ldr	r3, [r3, #24]
 8009170:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4ab5      	ldr	r2, [pc, #724]	; (800944c <UART_SetConfig+0x330>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d004      	beq.n	8009186 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6a1b      	ldr	r3, [r3, #32]
 8009180:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009182:	4313      	orrs	r3, r2
 8009184:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	689a      	ldr	r2, [r3, #8]
 800918c:	4bb0      	ldr	r3, [pc, #704]	; (8009450 <UART_SetConfig+0x334>)
 800918e:	4013      	ands	r3, r2
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	6812      	ldr	r2, [r2, #0]
 8009194:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009196:	430b      	orrs	r3, r1
 8009198:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a0:	f023 010f 	bic.w	r1, r3, #15
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	430a      	orrs	r2, r1
 80091ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4aa7      	ldr	r2, [pc, #668]	; (8009454 <UART_SetConfig+0x338>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d176      	bne.n	80092a8 <UART_SetConfig+0x18c>
 80091ba:	4ba7      	ldr	r3, [pc, #668]	; (8009458 <UART_SetConfig+0x33c>)
 80091bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091c2:	2b28      	cmp	r3, #40	; 0x28
 80091c4:	d86c      	bhi.n	80092a0 <UART_SetConfig+0x184>
 80091c6:	a201      	add	r2, pc, #4	; (adr r2, 80091cc <UART_SetConfig+0xb0>)
 80091c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091cc:	08009271 	.word	0x08009271
 80091d0:	080092a1 	.word	0x080092a1
 80091d4:	080092a1 	.word	0x080092a1
 80091d8:	080092a1 	.word	0x080092a1
 80091dc:	080092a1 	.word	0x080092a1
 80091e0:	080092a1 	.word	0x080092a1
 80091e4:	080092a1 	.word	0x080092a1
 80091e8:	080092a1 	.word	0x080092a1
 80091ec:	08009279 	.word	0x08009279
 80091f0:	080092a1 	.word	0x080092a1
 80091f4:	080092a1 	.word	0x080092a1
 80091f8:	080092a1 	.word	0x080092a1
 80091fc:	080092a1 	.word	0x080092a1
 8009200:	080092a1 	.word	0x080092a1
 8009204:	080092a1 	.word	0x080092a1
 8009208:	080092a1 	.word	0x080092a1
 800920c:	08009281 	.word	0x08009281
 8009210:	080092a1 	.word	0x080092a1
 8009214:	080092a1 	.word	0x080092a1
 8009218:	080092a1 	.word	0x080092a1
 800921c:	080092a1 	.word	0x080092a1
 8009220:	080092a1 	.word	0x080092a1
 8009224:	080092a1 	.word	0x080092a1
 8009228:	080092a1 	.word	0x080092a1
 800922c:	08009289 	.word	0x08009289
 8009230:	080092a1 	.word	0x080092a1
 8009234:	080092a1 	.word	0x080092a1
 8009238:	080092a1 	.word	0x080092a1
 800923c:	080092a1 	.word	0x080092a1
 8009240:	080092a1 	.word	0x080092a1
 8009244:	080092a1 	.word	0x080092a1
 8009248:	080092a1 	.word	0x080092a1
 800924c:	08009291 	.word	0x08009291
 8009250:	080092a1 	.word	0x080092a1
 8009254:	080092a1 	.word	0x080092a1
 8009258:	080092a1 	.word	0x080092a1
 800925c:	080092a1 	.word	0x080092a1
 8009260:	080092a1 	.word	0x080092a1
 8009264:	080092a1 	.word	0x080092a1
 8009268:	080092a1 	.word	0x080092a1
 800926c:	08009299 	.word	0x08009299
 8009270:	2301      	movs	r3, #1
 8009272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009276:	e222      	b.n	80096be <UART_SetConfig+0x5a2>
 8009278:	2304      	movs	r3, #4
 800927a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800927e:	e21e      	b.n	80096be <UART_SetConfig+0x5a2>
 8009280:	2308      	movs	r3, #8
 8009282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009286:	e21a      	b.n	80096be <UART_SetConfig+0x5a2>
 8009288:	2310      	movs	r3, #16
 800928a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800928e:	e216      	b.n	80096be <UART_SetConfig+0x5a2>
 8009290:	2320      	movs	r3, #32
 8009292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009296:	e212      	b.n	80096be <UART_SetConfig+0x5a2>
 8009298:	2340      	movs	r3, #64	; 0x40
 800929a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800929e:	e20e      	b.n	80096be <UART_SetConfig+0x5a2>
 80092a0:	2380      	movs	r3, #128	; 0x80
 80092a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092a6:	e20a      	b.n	80096be <UART_SetConfig+0x5a2>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a6b      	ldr	r2, [pc, #428]	; (800945c <UART_SetConfig+0x340>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d130      	bne.n	8009314 <UART_SetConfig+0x1f8>
 80092b2:	4b69      	ldr	r3, [pc, #420]	; (8009458 <UART_SetConfig+0x33c>)
 80092b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092b6:	f003 0307 	and.w	r3, r3, #7
 80092ba:	2b05      	cmp	r3, #5
 80092bc:	d826      	bhi.n	800930c <UART_SetConfig+0x1f0>
 80092be:	a201      	add	r2, pc, #4	; (adr r2, 80092c4 <UART_SetConfig+0x1a8>)
 80092c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c4:	080092dd 	.word	0x080092dd
 80092c8:	080092e5 	.word	0x080092e5
 80092cc:	080092ed 	.word	0x080092ed
 80092d0:	080092f5 	.word	0x080092f5
 80092d4:	080092fd 	.word	0x080092fd
 80092d8:	08009305 	.word	0x08009305
 80092dc:	2300      	movs	r3, #0
 80092de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092e2:	e1ec      	b.n	80096be <UART_SetConfig+0x5a2>
 80092e4:	2304      	movs	r3, #4
 80092e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092ea:	e1e8      	b.n	80096be <UART_SetConfig+0x5a2>
 80092ec:	2308      	movs	r3, #8
 80092ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092f2:	e1e4      	b.n	80096be <UART_SetConfig+0x5a2>
 80092f4:	2310      	movs	r3, #16
 80092f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092fa:	e1e0      	b.n	80096be <UART_SetConfig+0x5a2>
 80092fc:	2320      	movs	r3, #32
 80092fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009302:	e1dc      	b.n	80096be <UART_SetConfig+0x5a2>
 8009304:	2340      	movs	r3, #64	; 0x40
 8009306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800930a:	e1d8      	b.n	80096be <UART_SetConfig+0x5a2>
 800930c:	2380      	movs	r3, #128	; 0x80
 800930e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009312:	e1d4      	b.n	80096be <UART_SetConfig+0x5a2>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a51      	ldr	r2, [pc, #324]	; (8009460 <UART_SetConfig+0x344>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d130      	bne.n	8009380 <UART_SetConfig+0x264>
 800931e:	4b4e      	ldr	r3, [pc, #312]	; (8009458 <UART_SetConfig+0x33c>)
 8009320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009322:	f003 0307 	and.w	r3, r3, #7
 8009326:	2b05      	cmp	r3, #5
 8009328:	d826      	bhi.n	8009378 <UART_SetConfig+0x25c>
 800932a:	a201      	add	r2, pc, #4	; (adr r2, 8009330 <UART_SetConfig+0x214>)
 800932c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009330:	08009349 	.word	0x08009349
 8009334:	08009351 	.word	0x08009351
 8009338:	08009359 	.word	0x08009359
 800933c:	08009361 	.word	0x08009361
 8009340:	08009369 	.word	0x08009369
 8009344:	08009371 	.word	0x08009371
 8009348:	2300      	movs	r3, #0
 800934a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800934e:	e1b6      	b.n	80096be <UART_SetConfig+0x5a2>
 8009350:	2304      	movs	r3, #4
 8009352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009356:	e1b2      	b.n	80096be <UART_SetConfig+0x5a2>
 8009358:	2308      	movs	r3, #8
 800935a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800935e:	e1ae      	b.n	80096be <UART_SetConfig+0x5a2>
 8009360:	2310      	movs	r3, #16
 8009362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009366:	e1aa      	b.n	80096be <UART_SetConfig+0x5a2>
 8009368:	2320      	movs	r3, #32
 800936a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800936e:	e1a6      	b.n	80096be <UART_SetConfig+0x5a2>
 8009370:	2340      	movs	r3, #64	; 0x40
 8009372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009376:	e1a2      	b.n	80096be <UART_SetConfig+0x5a2>
 8009378:	2380      	movs	r3, #128	; 0x80
 800937a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800937e:	e19e      	b.n	80096be <UART_SetConfig+0x5a2>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a37      	ldr	r2, [pc, #220]	; (8009464 <UART_SetConfig+0x348>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d130      	bne.n	80093ec <UART_SetConfig+0x2d0>
 800938a:	4b33      	ldr	r3, [pc, #204]	; (8009458 <UART_SetConfig+0x33c>)
 800938c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800938e:	f003 0307 	and.w	r3, r3, #7
 8009392:	2b05      	cmp	r3, #5
 8009394:	d826      	bhi.n	80093e4 <UART_SetConfig+0x2c8>
 8009396:	a201      	add	r2, pc, #4	; (adr r2, 800939c <UART_SetConfig+0x280>)
 8009398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800939c:	080093b5 	.word	0x080093b5
 80093a0:	080093bd 	.word	0x080093bd
 80093a4:	080093c5 	.word	0x080093c5
 80093a8:	080093cd 	.word	0x080093cd
 80093ac:	080093d5 	.word	0x080093d5
 80093b0:	080093dd 	.word	0x080093dd
 80093b4:	2300      	movs	r3, #0
 80093b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ba:	e180      	b.n	80096be <UART_SetConfig+0x5a2>
 80093bc:	2304      	movs	r3, #4
 80093be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093c2:	e17c      	b.n	80096be <UART_SetConfig+0x5a2>
 80093c4:	2308      	movs	r3, #8
 80093c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ca:	e178      	b.n	80096be <UART_SetConfig+0x5a2>
 80093cc:	2310      	movs	r3, #16
 80093ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093d2:	e174      	b.n	80096be <UART_SetConfig+0x5a2>
 80093d4:	2320      	movs	r3, #32
 80093d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093da:	e170      	b.n	80096be <UART_SetConfig+0x5a2>
 80093dc:	2340      	movs	r3, #64	; 0x40
 80093de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093e2:	e16c      	b.n	80096be <UART_SetConfig+0x5a2>
 80093e4:	2380      	movs	r3, #128	; 0x80
 80093e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ea:	e168      	b.n	80096be <UART_SetConfig+0x5a2>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a1d      	ldr	r2, [pc, #116]	; (8009468 <UART_SetConfig+0x34c>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d142      	bne.n	800947c <UART_SetConfig+0x360>
 80093f6:	4b18      	ldr	r3, [pc, #96]	; (8009458 <UART_SetConfig+0x33c>)
 80093f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093fa:	f003 0307 	and.w	r3, r3, #7
 80093fe:	2b05      	cmp	r3, #5
 8009400:	d838      	bhi.n	8009474 <UART_SetConfig+0x358>
 8009402:	a201      	add	r2, pc, #4	; (adr r2, 8009408 <UART_SetConfig+0x2ec>)
 8009404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009408:	08009421 	.word	0x08009421
 800940c:	08009429 	.word	0x08009429
 8009410:	08009431 	.word	0x08009431
 8009414:	08009439 	.word	0x08009439
 8009418:	08009441 	.word	0x08009441
 800941c:	0800946d 	.word	0x0800946d
 8009420:	2300      	movs	r3, #0
 8009422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009426:	e14a      	b.n	80096be <UART_SetConfig+0x5a2>
 8009428:	2304      	movs	r3, #4
 800942a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800942e:	e146      	b.n	80096be <UART_SetConfig+0x5a2>
 8009430:	2308      	movs	r3, #8
 8009432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009436:	e142      	b.n	80096be <UART_SetConfig+0x5a2>
 8009438:	2310      	movs	r3, #16
 800943a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800943e:	e13e      	b.n	80096be <UART_SetConfig+0x5a2>
 8009440:	2320      	movs	r3, #32
 8009442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009446:	e13a      	b.n	80096be <UART_SetConfig+0x5a2>
 8009448:	cfff69f3 	.word	0xcfff69f3
 800944c:	58000c00 	.word	0x58000c00
 8009450:	11fff4ff 	.word	0x11fff4ff
 8009454:	40011000 	.word	0x40011000
 8009458:	58024400 	.word	0x58024400
 800945c:	40004400 	.word	0x40004400
 8009460:	40004800 	.word	0x40004800
 8009464:	40004c00 	.word	0x40004c00
 8009468:	40005000 	.word	0x40005000
 800946c:	2340      	movs	r3, #64	; 0x40
 800946e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009472:	e124      	b.n	80096be <UART_SetConfig+0x5a2>
 8009474:	2380      	movs	r3, #128	; 0x80
 8009476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800947a:	e120      	b.n	80096be <UART_SetConfig+0x5a2>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4acc      	ldr	r2, [pc, #816]	; (80097b4 <UART_SetConfig+0x698>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d176      	bne.n	8009574 <UART_SetConfig+0x458>
 8009486:	4bcc      	ldr	r3, [pc, #816]	; (80097b8 <UART_SetConfig+0x69c>)
 8009488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800948a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800948e:	2b28      	cmp	r3, #40	; 0x28
 8009490:	d86c      	bhi.n	800956c <UART_SetConfig+0x450>
 8009492:	a201      	add	r2, pc, #4	; (adr r2, 8009498 <UART_SetConfig+0x37c>)
 8009494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009498:	0800953d 	.word	0x0800953d
 800949c:	0800956d 	.word	0x0800956d
 80094a0:	0800956d 	.word	0x0800956d
 80094a4:	0800956d 	.word	0x0800956d
 80094a8:	0800956d 	.word	0x0800956d
 80094ac:	0800956d 	.word	0x0800956d
 80094b0:	0800956d 	.word	0x0800956d
 80094b4:	0800956d 	.word	0x0800956d
 80094b8:	08009545 	.word	0x08009545
 80094bc:	0800956d 	.word	0x0800956d
 80094c0:	0800956d 	.word	0x0800956d
 80094c4:	0800956d 	.word	0x0800956d
 80094c8:	0800956d 	.word	0x0800956d
 80094cc:	0800956d 	.word	0x0800956d
 80094d0:	0800956d 	.word	0x0800956d
 80094d4:	0800956d 	.word	0x0800956d
 80094d8:	0800954d 	.word	0x0800954d
 80094dc:	0800956d 	.word	0x0800956d
 80094e0:	0800956d 	.word	0x0800956d
 80094e4:	0800956d 	.word	0x0800956d
 80094e8:	0800956d 	.word	0x0800956d
 80094ec:	0800956d 	.word	0x0800956d
 80094f0:	0800956d 	.word	0x0800956d
 80094f4:	0800956d 	.word	0x0800956d
 80094f8:	08009555 	.word	0x08009555
 80094fc:	0800956d 	.word	0x0800956d
 8009500:	0800956d 	.word	0x0800956d
 8009504:	0800956d 	.word	0x0800956d
 8009508:	0800956d 	.word	0x0800956d
 800950c:	0800956d 	.word	0x0800956d
 8009510:	0800956d 	.word	0x0800956d
 8009514:	0800956d 	.word	0x0800956d
 8009518:	0800955d 	.word	0x0800955d
 800951c:	0800956d 	.word	0x0800956d
 8009520:	0800956d 	.word	0x0800956d
 8009524:	0800956d 	.word	0x0800956d
 8009528:	0800956d 	.word	0x0800956d
 800952c:	0800956d 	.word	0x0800956d
 8009530:	0800956d 	.word	0x0800956d
 8009534:	0800956d 	.word	0x0800956d
 8009538:	08009565 	.word	0x08009565
 800953c:	2301      	movs	r3, #1
 800953e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009542:	e0bc      	b.n	80096be <UART_SetConfig+0x5a2>
 8009544:	2304      	movs	r3, #4
 8009546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800954a:	e0b8      	b.n	80096be <UART_SetConfig+0x5a2>
 800954c:	2308      	movs	r3, #8
 800954e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009552:	e0b4      	b.n	80096be <UART_SetConfig+0x5a2>
 8009554:	2310      	movs	r3, #16
 8009556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800955a:	e0b0      	b.n	80096be <UART_SetConfig+0x5a2>
 800955c:	2320      	movs	r3, #32
 800955e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009562:	e0ac      	b.n	80096be <UART_SetConfig+0x5a2>
 8009564:	2340      	movs	r3, #64	; 0x40
 8009566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800956a:	e0a8      	b.n	80096be <UART_SetConfig+0x5a2>
 800956c:	2380      	movs	r3, #128	; 0x80
 800956e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009572:	e0a4      	b.n	80096be <UART_SetConfig+0x5a2>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a90      	ldr	r2, [pc, #576]	; (80097bc <UART_SetConfig+0x6a0>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d130      	bne.n	80095e0 <UART_SetConfig+0x4c4>
 800957e:	4b8e      	ldr	r3, [pc, #568]	; (80097b8 <UART_SetConfig+0x69c>)
 8009580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009582:	f003 0307 	and.w	r3, r3, #7
 8009586:	2b05      	cmp	r3, #5
 8009588:	d826      	bhi.n	80095d8 <UART_SetConfig+0x4bc>
 800958a:	a201      	add	r2, pc, #4	; (adr r2, 8009590 <UART_SetConfig+0x474>)
 800958c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009590:	080095a9 	.word	0x080095a9
 8009594:	080095b1 	.word	0x080095b1
 8009598:	080095b9 	.word	0x080095b9
 800959c:	080095c1 	.word	0x080095c1
 80095a0:	080095c9 	.word	0x080095c9
 80095a4:	080095d1 	.word	0x080095d1
 80095a8:	2300      	movs	r3, #0
 80095aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ae:	e086      	b.n	80096be <UART_SetConfig+0x5a2>
 80095b0:	2304      	movs	r3, #4
 80095b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095b6:	e082      	b.n	80096be <UART_SetConfig+0x5a2>
 80095b8:	2308      	movs	r3, #8
 80095ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095be:	e07e      	b.n	80096be <UART_SetConfig+0x5a2>
 80095c0:	2310      	movs	r3, #16
 80095c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095c6:	e07a      	b.n	80096be <UART_SetConfig+0x5a2>
 80095c8:	2320      	movs	r3, #32
 80095ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ce:	e076      	b.n	80096be <UART_SetConfig+0x5a2>
 80095d0:	2340      	movs	r3, #64	; 0x40
 80095d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095d6:	e072      	b.n	80096be <UART_SetConfig+0x5a2>
 80095d8:	2380      	movs	r3, #128	; 0x80
 80095da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095de:	e06e      	b.n	80096be <UART_SetConfig+0x5a2>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a76      	ldr	r2, [pc, #472]	; (80097c0 <UART_SetConfig+0x6a4>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d130      	bne.n	800964c <UART_SetConfig+0x530>
 80095ea:	4b73      	ldr	r3, [pc, #460]	; (80097b8 <UART_SetConfig+0x69c>)
 80095ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ee:	f003 0307 	and.w	r3, r3, #7
 80095f2:	2b05      	cmp	r3, #5
 80095f4:	d826      	bhi.n	8009644 <UART_SetConfig+0x528>
 80095f6:	a201      	add	r2, pc, #4	; (adr r2, 80095fc <UART_SetConfig+0x4e0>)
 80095f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fc:	08009615 	.word	0x08009615
 8009600:	0800961d 	.word	0x0800961d
 8009604:	08009625 	.word	0x08009625
 8009608:	0800962d 	.word	0x0800962d
 800960c:	08009635 	.word	0x08009635
 8009610:	0800963d 	.word	0x0800963d
 8009614:	2300      	movs	r3, #0
 8009616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800961a:	e050      	b.n	80096be <UART_SetConfig+0x5a2>
 800961c:	2304      	movs	r3, #4
 800961e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009622:	e04c      	b.n	80096be <UART_SetConfig+0x5a2>
 8009624:	2308      	movs	r3, #8
 8009626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800962a:	e048      	b.n	80096be <UART_SetConfig+0x5a2>
 800962c:	2310      	movs	r3, #16
 800962e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009632:	e044      	b.n	80096be <UART_SetConfig+0x5a2>
 8009634:	2320      	movs	r3, #32
 8009636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800963a:	e040      	b.n	80096be <UART_SetConfig+0x5a2>
 800963c:	2340      	movs	r3, #64	; 0x40
 800963e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009642:	e03c      	b.n	80096be <UART_SetConfig+0x5a2>
 8009644:	2380      	movs	r3, #128	; 0x80
 8009646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800964a:	e038      	b.n	80096be <UART_SetConfig+0x5a2>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a5c      	ldr	r2, [pc, #368]	; (80097c4 <UART_SetConfig+0x6a8>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d130      	bne.n	80096b8 <UART_SetConfig+0x59c>
 8009656:	4b58      	ldr	r3, [pc, #352]	; (80097b8 <UART_SetConfig+0x69c>)
 8009658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800965a:	f003 0307 	and.w	r3, r3, #7
 800965e:	2b05      	cmp	r3, #5
 8009660:	d826      	bhi.n	80096b0 <UART_SetConfig+0x594>
 8009662:	a201      	add	r2, pc, #4	; (adr r2, 8009668 <UART_SetConfig+0x54c>)
 8009664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009668:	08009681 	.word	0x08009681
 800966c:	08009689 	.word	0x08009689
 8009670:	08009691 	.word	0x08009691
 8009674:	08009699 	.word	0x08009699
 8009678:	080096a1 	.word	0x080096a1
 800967c:	080096a9 	.word	0x080096a9
 8009680:	2302      	movs	r3, #2
 8009682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009686:	e01a      	b.n	80096be <UART_SetConfig+0x5a2>
 8009688:	2304      	movs	r3, #4
 800968a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800968e:	e016      	b.n	80096be <UART_SetConfig+0x5a2>
 8009690:	2308      	movs	r3, #8
 8009692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009696:	e012      	b.n	80096be <UART_SetConfig+0x5a2>
 8009698:	2310      	movs	r3, #16
 800969a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800969e:	e00e      	b.n	80096be <UART_SetConfig+0x5a2>
 80096a0:	2320      	movs	r3, #32
 80096a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096a6:	e00a      	b.n	80096be <UART_SetConfig+0x5a2>
 80096a8:	2340      	movs	r3, #64	; 0x40
 80096aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ae:	e006      	b.n	80096be <UART_SetConfig+0x5a2>
 80096b0:	2380      	movs	r3, #128	; 0x80
 80096b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096b6:	e002      	b.n	80096be <UART_SetConfig+0x5a2>
 80096b8:	2380      	movs	r3, #128	; 0x80
 80096ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a40      	ldr	r2, [pc, #256]	; (80097c4 <UART_SetConfig+0x6a8>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	f040 80ef 	bne.w	80098a8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80096ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80096ce:	2b20      	cmp	r3, #32
 80096d0:	dc46      	bgt.n	8009760 <UART_SetConfig+0x644>
 80096d2:	2b02      	cmp	r3, #2
 80096d4:	f2c0 8081 	blt.w	80097da <UART_SetConfig+0x6be>
 80096d8:	3b02      	subs	r3, #2
 80096da:	2b1e      	cmp	r3, #30
 80096dc:	d87d      	bhi.n	80097da <UART_SetConfig+0x6be>
 80096de:	a201      	add	r2, pc, #4	; (adr r2, 80096e4 <UART_SetConfig+0x5c8>)
 80096e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e4:	08009767 	.word	0x08009767
 80096e8:	080097db 	.word	0x080097db
 80096ec:	0800976f 	.word	0x0800976f
 80096f0:	080097db 	.word	0x080097db
 80096f4:	080097db 	.word	0x080097db
 80096f8:	080097db 	.word	0x080097db
 80096fc:	0800977f 	.word	0x0800977f
 8009700:	080097db 	.word	0x080097db
 8009704:	080097db 	.word	0x080097db
 8009708:	080097db 	.word	0x080097db
 800970c:	080097db 	.word	0x080097db
 8009710:	080097db 	.word	0x080097db
 8009714:	080097db 	.word	0x080097db
 8009718:	080097db 	.word	0x080097db
 800971c:	0800978f 	.word	0x0800978f
 8009720:	080097db 	.word	0x080097db
 8009724:	080097db 	.word	0x080097db
 8009728:	080097db 	.word	0x080097db
 800972c:	080097db 	.word	0x080097db
 8009730:	080097db 	.word	0x080097db
 8009734:	080097db 	.word	0x080097db
 8009738:	080097db 	.word	0x080097db
 800973c:	080097db 	.word	0x080097db
 8009740:	080097db 	.word	0x080097db
 8009744:	080097db 	.word	0x080097db
 8009748:	080097db 	.word	0x080097db
 800974c:	080097db 	.word	0x080097db
 8009750:	080097db 	.word	0x080097db
 8009754:	080097db 	.word	0x080097db
 8009758:	080097db 	.word	0x080097db
 800975c:	080097cd 	.word	0x080097cd
 8009760:	2b40      	cmp	r3, #64	; 0x40
 8009762:	d036      	beq.n	80097d2 <UART_SetConfig+0x6b6>
 8009764:	e039      	b.n	80097da <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009766:	f7fe fbbd 	bl	8007ee4 <HAL_RCCEx_GetD3PCLK1Freq>
 800976a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800976c:	e03b      	b.n	80097e6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800976e:	f107 0314 	add.w	r3, r7, #20
 8009772:	4618      	mov	r0, r3
 8009774:	f7fe fbcc 	bl	8007f10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800977c:	e033      	b.n	80097e6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800977e:	f107 0308 	add.w	r3, r7, #8
 8009782:	4618      	mov	r0, r3
 8009784:	f7fe fd18 	bl	80081b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800978c:	e02b      	b.n	80097e6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800978e:	4b0a      	ldr	r3, [pc, #40]	; (80097b8 <UART_SetConfig+0x69c>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f003 0320 	and.w	r3, r3, #32
 8009796:	2b00      	cmp	r3, #0
 8009798:	d009      	beq.n	80097ae <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800979a:	4b07      	ldr	r3, [pc, #28]	; (80097b8 <UART_SetConfig+0x69c>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	08db      	lsrs	r3, r3, #3
 80097a0:	f003 0303 	and.w	r3, r3, #3
 80097a4:	4a08      	ldr	r2, [pc, #32]	; (80097c8 <UART_SetConfig+0x6ac>)
 80097a6:	fa22 f303 	lsr.w	r3, r2, r3
 80097aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80097ac:	e01b      	b.n	80097e6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80097ae:	4b06      	ldr	r3, [pc, #24]	; (80097c8 <UART_SetConfig+0x6ac>)
 80097b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097b2:	e018      	b.n	80097e6 <UART_SetConfig+0x6ca>
 80097b4:	40011400 	.word	0x40011400
 80097b8:	58024400 	.word	0x58024400
 80097bc:	40007800 	.word	0x40007800
 80097c0:	40007c00 	.word	0x40007c00
 80097c4:	58000c00 	.word	0x58000c00
 80097c8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80097cc:	4bc4      	ldr	r3, [pc, #784]	; (8009ae0 <UART_SetConfig+0x9c4>)
 80097ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097d0:	e009      	b.n	80097e6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097d8:	e005      	b.n	80097e6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80097da:	2300      	movs	r3, #0
 80097dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80097e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80097e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	f000 81da 	beq.w	8009ba2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f2:	4abc      	ldr	r2, [pc, #752]	; (8009ae4 <UART_SetConfig+0x9c8>)
 80097f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097f8:	461a      	mov	r2, r3
 80097fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009800:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	685a      	ldr	r2, [r3, #4]
 8009806:	4613      	mov	r3, r2
 8009808:	005b      	lsls	r3, r3, #1
 800980a:	4413      	add	r3, r2
 800980c:	6a3a      	ldr	r2, [r7, #32]
 800980e:	429a      	cmp	r2, r3
 8009810:	d305      	bcc.n	800981e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009818:	6a3a      	ldr	r2, [r7, #32]
 800981a:	429a      	cmp	r2, r3
 800981c:	d903      	bls.n	8009826 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009824:	e1bd      	b.n	8009ba2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009828:	4618      	mov	r0, r3
 800982a:	f04f 0100 	mov.w	r1, #0
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009832:	4aac      	ldr	r2, [pc, #688]	; (8009ae4 <UART_SetConfig+0x9c8>)
 8009834:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009838:	b29a      	uxth	r2, r3
 800983a:	f04f 0300 	mov.w	r3, #0
 800983e:	f7f6 fda7 	bl	8000390 <__aeabi_uldivmod>
 8009842:	4602      	mov	r2, r0
 8009844:	460b      	mov	r3, r1
 8009846:	4610      	mov	r0, r2
 8009848:	4619      	mov	r1, r3
 800984a:	f04f 0200 	mov.w	r2, #0
 800984e:	f04f 0300 	mov.w	r3, #0
 8009852:	020b      	lsls	r3, r1, #8
 8009854:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009858:	0202      	lsls	r2, r0, #8
 800985a:	6879      	ldr	r1, [r7, #4]
 800985c:	6849      	ldr	r1, [r1, #4]
 800985e:	0849      	lsrs	r1, r1, #1
 8009860:	4608      	mov	r0, r1
 8009862:	f04f 0100 	mov.w	r1, #0
 8009866:	1814      	adds	r4, r2, r0
 8009868:	eb43 0501 	adc.w	r5, r3, r1
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	461a      	mov	r2, r3
 8009872:	f04f 0300 	mov.w	r3, #0
 8009876:	4620      	mov	r0, r4
 8009878:	4629      	mov	r1, r5
 800987a:	f7f6 fd89 	bl	8000390 <__aeabi_uldivmod>
 800987e:	4602      	mov	r2, r0
 8009880:	460b      	mov	r3, r1
 8009882:	4613      	mov	r3, r2
 8009884:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009888:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800988c:	d308      	bcc.n	80098a0 <UART_SetConfig+0x784>
 800988e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009890:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009894:	d204      	bcs.n	80098a0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800989c:	60da      	str	r2, [r3, #12]
 800989e:	e180      	b.n	8009ba2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80098a6:	e17c      	b.n	8009ba2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	69db      	ldr	r3, [r3, #28]
 80098ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098b0:	f040 80be 	bne.w	8009a30 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 80098b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80098b8:	2b20      	cmp	r3, #32
 80098ba:	dc49      	bgt.n	8009950 <UART_SetConfig+0x834>
 80098bc:	2b00      	cmp	r3, #0
 80098be:	db7c      	blt.n	80099ba <UART_SetConfig+0x89e>
 80098c0:	2b20      	cmp	r3, #32
 80098c2:	d87a      	bhi.n	80099ba <UART_SetConfig+0x89e>
 80098c4:	a201      	add	r2, pc, #4	; (adr r2, 80098cc <UART_SetConfig+0x7b0>)
 80098c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ca:	bf00      	nop
 80098cc:	08009957 	.word	0x08009957
 80098d0:	0800995f 	.word	0x0800995f
 80098d4:	080099bb 	.word	0x080099bb
 80098d8:	080099bb 	.word	0x080099bb
 80098dc:	08009967 	.word	0x08009967
 80098e0:	080099bb 	.word	0x080099bb
 80098e4:	080099bb 	.word	0x080099bb
 80098e8:	080099bb 	.word	0x080099bb
 80098ec:	08009977 	.word	0x08009977
 80098f0:	080099bb 	.word	0x080099bb
 80098f4:	080099bb 	.word	0x080099bb
 80098f8:	080099bb 	.word	0x080099bb
 80098fc:	080099bb 	.word	0x080099bb
 8009900:	080099bb 	.word	0x080099bb
 8009904:	080099bb 	.word	0x080099bb
 8009908:	080099bb 	.word	0x080099bb
 800990c:	08009987 	.word	0x08009987
 8009910:	080099bb 	.word	0x080099bb
 8009914:	080099bb 	.word	0x080099bb
 8009918:	080099bb 	.word	0x080099bb
 800991c:	080099bb 	.word	0x080099bb
 8009920:	080099bb 	.word	0x080099bb
 8009924:	080099bb 	.word	0x080099bb
 8009928:	080099bb 	.word	0x080099bb
 800992c:	080099bb 	.word	0x080099bb
 8009930:	080099bb 	.word	0x080099bb
 8009934:	080099bb 	.word	0x080099bb
 8009938:	080099bb 	.word	0x080099bb
 800993c:	080099bb 	.word	0x080099bb
 8009940:	080099bb 	.word	0x080099bb
 8009944:	080099bb 	.word	0x080099bb
 8009948:	080099bb 	.word	0x080099bb
 800994c:	080099ad 	.word	0x080099ad
 8009950:	2b40      	cmp	r3, #64	; 0x40
 8009952:	d02e      	beq.n	80099b2 <UART_SetConfig+0x896>
 8009954:	e031      	b.n	80099ba <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009956:	f7fd fb59 	bl	800700c <HAL_RCC_GetPCLK1Freq>
 800995a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800995c:	e033      	b.n	80099c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800995e:	f7fd fb6b 	bl	8007038 <HAL_RCC_GetPCLK2Freq>
 8009962:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009964:	e02f      	b.n	80099c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009966:	f107 0314 	add.w	r3, r7, #20
 800996a:	4618      	mov	r0, r3
 800996c:	f7fe fad0 	bl	8007f10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009970:	69bb      	ldr	r3, [r7, #24]
 8009972:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009974:	e027      	b.n	80099c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009976:	f107 0308 	add.w	r3, r7, #8
 800997a:	4618      	mov	r0, r3
 800997c:	f7fe fc1c 	bl	80081b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009984:	e01f      	b.n	80099c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009986:	4b58      	ldr	r3, [pc, #352]	; (8009ae8 <UART_SetConfig+0x9cc>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 0320 	and.w	r3, r3, #32
 800998e:	2b00      	cmp	r3, #0
 8009990:	d009      	beq.n	80099a6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009992:	4b55      	ldr	r3, [pc, #340]	; (8009ae8 <UART_SetConfig+0x9cc>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	08db      	lsrs	r3, r3, #3
 8009998:	f003 0303 	and.w	r3, r3, #3
 800999c:	4a53      	ldr	r2, [pc, #332]	; (8009aec <UART_SetConfig+0x9d0>)
 800999e:	fa22 f303 	lsr.w	r3, r2, r3
 80099a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80099a4:	e00f      	b.n	80099c6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80099a6:	4b51      	ldr	r3, [pc, #324]	; (8009aec <UART_SetConfig+0x9d0>)
 80099a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099aa:	e00c      	b.n	80099c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80099ac:	4b4c      	ldr	r3, [pc, #304]	; (8009ae0 <UART_SetConfig+0x9c4>)
 80099ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099b0:	e009      	b.n	80099c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099b8:	e005      	b.n	80099c6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80099ba:	2300      	movs	r3, #0
 80099bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80099be:	2301      	movs	r3, #1
 80099c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80099c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80099c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f000 80ea 	beq.w	8009ba2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d2:	4a44      	ldr	r2, [pc, #272]	; (8009ae4 <UART_SetConfig+0x9c8>)
 80099d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099d8:	461a      	mov	r2, r3
 80099da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80099e0:	005a      	lsls	r2, r3, #1
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	085b      	lsrs	r3, r3, #1
 80099e8:	441a      	add	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80099f2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f6:	2b0f      	cmp	r3, #15
 80099f8:	d916      	bls.n	8009a28 <UART_SetConfig+0x90c>
 80099fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a00:	d212      	bcs.n	8009a28 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	f023 030f 	bic.w	r3, r3, #15
 8009a0a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0e:	085b      	lsrs	r3, r3, #1
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	f003 0307 	and.w	r3, r3, #7
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009a24:	60da      	str	r2, [r3, #12]
 8009a26:	e0bc      	b.n	8009ba2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009a2e:	e0b8      	b.n	8009ba2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a34:	2b20      	cmp	r3, #32
 8009a36:	dc4b      	bgt.n	8009ad0 <UART_SetConfig+0x9b4>
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	f2c0 8087 	blt.w	8009b4c <UART_SetConfig+0xa30>
 8009a3e:	2b20      	cmp	r3, #32
 8009a40:	f200 8084 	bhi.w	8009b4c <UART_SetConfig+0xa30>
 8009a44:	a201      	add	r2, pc, #4	; (adr r2, 8009a4c <UART_SetConfig+0x930>)
 8009a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a4a:	bf00      	nop
 8009a4c:	08009ad7 	.word	0x08009ad7
 8009a50:	08009af1 	.word	0x08009af1
 8009a54:	08009b4d 	.word	0x08009b4d
 8009a58:	08009b4d 	.word	0x08009b4d
 8009a5c:	08009af9 	.word	0x08009af9
 8009a60:	08009b4d 	.word	0x08009b4d
 8009a64:	08009b4d 	.word	0x08009b4d
 8009a68:	08009b4d 	.word	0x08009b4d
 8009a6c:	08009b09 	.word	0x08009b09
 8009a70:	08009b4d 	.word	0x08009b4d
 8009a74:	08009b4d 	.word	0x08009b4d
 8009a78:	08009b4d 	.word	0x08009b4d
 8009a7c:	08009b4d 	.word	0x08009b4d
 8009a80:	08009b4d 	.word	0x08009b4d
 8009a84:	08009b4d 	.word	0x08009b4d
 8009a88:	08009b4d 	.word	0x08009b4d
 8009a8c:	08009b19 	.word	0x08009b19
 8009a90:	08009b4d 	.word	0x08009b4d
 8009a94:	08009b4d 	.word	0x08009b4d
 8009a98:	08009b4d 	.word	0x08009b4d
 8009a9c:	08009b4d 	.word	0x08009b4d
 8009aa0:	08009b4d 	.word	0x08009b4d
 8009aa4:	08009b4d 	.word	0x08009b4d
 8009aa8:	08009b4d 	.word	0x08009b4d
 8009aac:	08009b4d 	.word	0x08009b4d
 8009ab0:	08009b4d 	.word	0x08009b4d
 8009ab4:	08009b4d 	.word	0x08009b4d
 8009ab8:	08009b4d 	.word	0x08009b4d
 8009abc:	08009b4d 	.word	0x08009b4d
 8009ac0:	08009b4d 	.word	0x08009b4d
 8009ac4:	08009b4d 	.word	0x08009b4d
 8009ac8:	08009b4d 	.word	0x08009b4d
 8009acc:	08009b3f 	.word	0x08009b3f
 8009ad0:	2b40      	cmp	r3, #64	; 0x40
 8009ad2:	d037      	beq.n	8009b44 <UART_SetConfig+0xa28>
 8009ad4:	e03a      	b.n	8009b4c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ad6:	f7fd fa99 	bl	800700c <HAL_RCC_GetPCLK1Freq>
 8009ada:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009adc:	e03c      	b.n	8009b58 <UART_SetConfig+0xa3c>
 8009ade:	bf00      	nop
 8009ae0:	003d0900 	.word	0x003d0900
 8009ae4:	0800ef5c 	.word	0x0800ef5c
 8009ae8:	58024400 	.word	0x58024400
 8009aec:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009af0:	f7fd faa2 	bl	8007038 <HAL_RCC_GetPCLK2Freq>
 8009af4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009af6:	e02f      	b.n	8009b58 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009af8:	f107 0314 	add.w	r3, r7, #20
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7fe fa07 	bl	8007f10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009b02:	69bb      	ldr	r3, [r7, #24]
 8009b04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b06:	e027      	b.n	8009b58 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b08:	f107 0308 	add.w	r3, r7, #8
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7fe fb53 	bl	80081b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b16:	e01f      	b.n	8009b58 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b18:	4b2c      	ldr	r3, [pc, #176]	; (8009bcc <UART_SetConfig+0xab0>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 0320 	and.w	r3, r3, #32
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d009      	beq.n	8009b38 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b24:	4b29      	ldr	r3, [pc, #164]	; (8009bcc <UART_SetConfig+0xab0>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	08db      	lsrs	r3, r3, #3
 8009b2a:	f003 0303 	and.w	r3, r3, #3
 8009b2e:	4a28      	ldr	r2, [pc, #160]	; (8009bd0 <UART_SetConfig+0xab4>)
 8009b30:	fa22 f303 	lsr.w	r3, r2, r3
 8009b34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b36:	e00f      	b.n	8009b58 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009b38:	4b25      	ldr	r3, [pc, #148]	; (8009bd0 <UART_SetConfig+0xab4>)
 8009b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b3c:	e00c      	b.n	8009b58 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b3e:	4b25      	ldr	r3, [pc, #148]	; (8009bd4 <UART_SetConfig+0xab8>)
 8009b40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b42:	e009      	b.n	8009b58 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b4a:	e005      	b.n	8009b58 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009b50:	2301      	movs	r3, #1
 8009b52:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009b56:	bf00      	nop
    }

    if (pclk != 0U)
 8009b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d021      	beq.n	8009ba2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b62:	4a1d      	ldr	r2, [pc, #116]	; (8009bd8 <UART_SetConfig+0xabc>)
 8009b64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b68:	461a      	mov	r2, r3
 8009b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b6c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	085b      	lsrs	r3, r3, #1
 8009b76:	441a      	add	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b80:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b84:	2b0f      	cmp	r3, #15
 8009b86:	d909      	bls.n	8009b9c <UART_SetConfig+0xa80>
 8009b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b8e:	d205      	bcs.n	8009b9c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b92:	b29a      	uxth	r2, r3
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	60da      	str	r2, [r3, #12]
 8009b9a:	e002      	b.n	8009ba2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2201      	movs	r2, #1
 8009bae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009bbe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3738      	adds	r7, #56	; 0x38
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bdb0      	pop	{r4, r5, r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	58024400 	.word	0x58024400
 8009bd0:	03d09000 	.word	0x03d09000
 8009bd4:	003d0900 	.word	0x003d0900
 8009bd8:	0800ef5c 	.word	0x0800ef5c

08009bdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009be8:	f003 0301 	and.w	r3, r3, #1
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d00a      	beq.n	8009c06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	430a      	orrs	r2, r1
 8009c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c0a:	f003 0302 	and.w	r3, r3, #2
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00a      	beq.n	8009c28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	430a      	orrs	r2, r1
 8009c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c2c:	f003 0304 	and.w	r3, r3, #4
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d00a      	beq.n	8009c4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	430a      	orrs	r2, r1
 8009c48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c4e:	f003 0308 	and.w	r3, r3, #8
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00a      	beq.n	8009c6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	430a      	orrs	r2, r1
 8009c6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c70:	f003 0310 	and.w	r3, r3, #16
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00a      	beq.n	8009c8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	430a      	orrs	r2, r1
 8009c8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c92:	f003 0320 	and.w	r3, r3, #32
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00a      	beq.n	8009cb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	430a      	orrs	r2, r1
 8009cae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d01a      	beq.n	8009cf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	430a      	orrs	r2, r1
 8009cd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cda:	d10a      	bne.n	8009cf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	430a      	orrs	r2, r1
 8009cf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d00a      	beq.n	8009d14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	430a      	orrs	r2, r1
 8009d12:	605a      	str	r2, [r3, #4]
  }
}
 8009d14:	bf00      	nop
 8009d16:	370c      	adds	r7, #12
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b086      	sub	sp, #24
 8009d24:	af02      	add	r7, sp, #8
 8009d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d30:	f7f7 fe34 	bl	800199c <HAL_GetTick>
 8009d34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f003 0308 	and.w	r3, r3, #8
 8009d40:	2b08      	cmp	r3, #8
 8009d42:	d10e      	bne.n	8009d62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d48:	9300      	str	r3, [sp, #0]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f82f 	bl	8009db6 <UART_WaitOnFlagUntilTimeout>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d001      	beq.n	8009d62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d5e:	2303      	movs	r3, #3
 8009d60:	e025      	b.n	8009dae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f003 0304 	and.w	r3, r3, #4
 8009d6c:	2b04      	cmp	r3, #4
 8009d6e:	d10e      	bne.n	8009d8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d74:	9300      	str	r3, [sp, #0]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f819 	bl	8009db6 <UART_WaitOnFlagUntilTimeout>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d001      	beq.n	8009d8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d8a:	2303      	movs	r3, #3
 8009d8c:	e00f      	b.n	8009dae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2220      	movs	r2, #32
 8009d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2220      	movs	r2, #32
 8009d9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b09c      	sub	sp, #112	; 0x70
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	60f8      	str	r0, [r7, #12]
 8009dbe:	60b9      	str	r1, [r7, #8]
 8009dc0:	603b      	str	r3, [r7, #0]
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009dc6:	e0a9      	b.n	8009f1c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dce:	f000 80a5 	beq.w	8009f1c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dd2:	f7f7 fde3 	bl	800199c <HAL_GetTick>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	1ad3      	subs	r3, r2, r3
 8009ddc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d302      	bcc.n	8009de8 <UART_WaitOnFlagUntilTimeout+0x32>
 8009de2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d140      	bne.n	8009e6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009df0:	e853 3f00 	ldrex	r3, [r3]
 8009df4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009df8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009dfc:	667b      	str	r3, [r7, #100]	; 0x64
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	461a      	mov	r2, r3
 8009e04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e08:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009e0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009e0e:	e841 2300 	strex	r3, r2, [r1]
 8009e12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d1e6      	bne.n	8009de8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	3308      	adds	r3, #8
 8009e20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e24:	e853 3f00 	ldrex	r3, [r3]
 8009e28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e2c:	f023 0301 	bic.w	r3, r3, #1
 8009e30:	663b      	str	r3, [r7, #96]	; 0x60
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	3308      	adds	r3, #8
 8009e38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009e3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8009e3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009e40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e42:	e841 2300 	strex	r3, r2, [r1]
 8009e46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d1e5      	bne.n	8009e1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2220      	movs	r2, #32
 8009e52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2220      	movs	r2, #32
 8009e5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009e66:	2303      	movs	r3, #3
 8009e68:	e069      	b.n	8009f3e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f003 0304 	and.w	r3, r3, #4
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d051      	beq.n	8009f1c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	69db      	ldr	r3, [r3, #28]
 8009e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e86:	d149      	bne.n	8009f1c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e90:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9a:	e853 3f00 	ldrex	r3, [r3]
 8009e9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009ea6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	461a      	mov	r2, r3
 8009eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8009eb2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009eb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009eb8:	e841 2300 	strex	r3, r2, [r1]
 8009ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d1e6      	bne.n	8009e92 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	3308      	adds	r3, #8
 8009eca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	e853 3f00 	ldrex	r3, [r3]
 8009ed2:	613b      	str	r3, [r7, #16]
   return(result);
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	f023 0301 	bic.w	r3, r3, #1
 8009eda:	66bb      	str	r3, [r7, #104]	; 0x68
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	3308      	adds	r3, #8
 8009ee2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009ee4:	623a      	str	r2, [r7, #32]
 8009ee6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee8:	69f9      	ldr	r1, [r7, #28]
 8009eea:	6a3a      	ldr	r2, [r7, #32]
 8009eec:	e841 2300 	strex	r3, r2, [r1]
 8009ef0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1e5      	bne.n	8009ec4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2220      	movs	r2, #32
 8009efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2220      	movs	r2, #32
 8009f04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2220      	movs	r2, #32
 8009f0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009f18:	2303      	movs	r3, #3
 8009f1a:	e010      	b.n	8009f3e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	69da      	ldr	r2, [r3, #28]
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	4013      	ands	r3, r2
 8009f26:	68ba      	ldr	r2, [r7, #8]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	bf0c      	ite	eq
 8009f2c:	2301      	moveq	r3, #1
 8009f2e:	2300      	movne	r3, #0
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	461a      	mov	r2, r3
 8009f34:	79fb      	ldrb	r3, [r7, #7]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	f43f af46 	beq.w	8009dc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3770      	adds	r7, #112	; 0x70
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
	...

08009f48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b0a3      	sub	sp, #140	; 0x8c
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	4613      	mov	r3, r2
 8009f54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	68ba      	ldr	r2, [r7, #8]
 8009f5a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	88fa      	ldrh	r2, [r7, #6]
 8009f60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	88fa      	ldrh	r2, [r7, #6]
 8009f68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f7a:	d10e      	bne.n	8009f9a <UART_Start_Receive_IT+0x52>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	691b      	ldr	r3, [r3, #16]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d105      	bne.n	8009f90 <UART_Start_Receive_IT+0x48>
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009f8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009f8e:	e02d      	b.n	8009fec <UART_Start_Receive_IT+0xa4>
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	22ff      	movs	r2, #255	; 0xff
 8009f94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009f98:	e028      	b.n	8009fec <UART_Start_Receive_IT+0xa4>
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d10d      	bne.n	8009fbe <UART_Start_Receive_IT+0x76>
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d104      	bne.n	8009fb4 <UART_Start_Receive_IT+0x6c>
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	22ff      	movs	r2, #255	; 0xff
 8009fae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009fb2:	e01b      	b.n	8009fec <UART_Start_Receive_IT+0xa4>
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	227f      	movs	r2, #127	; 0x7f
 8009fb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009fbc:	e016      	b.n	8009fec <UART_Start_Receive_IT+0xa4>
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fc6:	d10d      	bne.n	8009fe4 <UART_Start_Receive_IT+0x9c>
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d104      	bne.n	8009fda <UART_Start_Receive_IT+0x92>
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	227f      	movs	r2, #127	; 0x7f
 8009fd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009fd8:	e008      	b.n	8009fec <UART_Start_Receive_IT+0xa4>
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	223f      	movs	r2, #63	; 0x3f
 8009fde:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009fe2:	e003      	b.n	8009fec <UART_Start_Receive_IT+0xa4>
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2222      	movs	r2, #34	; 0x22
 8009ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	3308      	adds	r3, #8
 800a002:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a004:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a006:	e853 3f00 	ldrex	r3, [r3]
 800a00a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a00c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a00e:	f043 0301 	orr.w	r3, r3, #1
 800a012:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	3308      	adds	r3, #8
 800a01c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a020:	673a      	str	r2, [r7, #112]	; 0x70
 800a022:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a024:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a026:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a028:	e841 2300 	strex	r3, r2, [r1]
 800a02c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800a02e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a030:	2b00      	cmp	r3, #0
 800a032:	d1e3      	bne.n	8009ffc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a03c:	d153      	bne.n	800a0e6 <UART_Start_Receive_IT+0x19e>
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a044:	88fa      	ldrh	r2, [r7, #6]
 800a046:	429a      	cmp	r2, r3
 800a048:	d34d      	bcc.n	800a0e6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a052:	d107      	bne.n	800a064 <UART_Start_Receive_IT+0x11c>
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d103      	bne.n	800a064 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	4a4b      	ldr	r2, [pc, #300]	; (800a18c <UART_Start_Receive_IT+0x244>)
 800a060:	671a      	str	r2, [r3, #112]	; 0x70
 800a062:	e002      	b.n	800a06a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	4a4a      	ldr	r2, [pc, #296]	; (800a190 <UART_Start_Receive_IT+0x248>)
 800a068:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2200      	movs	r2, #0
 800a06e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	691b      	ldr	r3, [r3, #16]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d01a      	beq.n	800a0b0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a082:	e853 3f00 	ldrex	r3, [r3]
 800a086:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a08a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a08e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	461a      	mov	r2, r3
 800a098:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a09c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a09e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a0a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a0a4:	e841 2300 	strex	r3, r2, [r1]
 800a0a8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a0aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d1e4      	bne.n	800a07a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	3308      	adds	r3, #8
 800a0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0ba:	e853 3f00 	ldrex	r3, [r3]
 800a0be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	3308      	adds	r3, #8
 800a0ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a0d0:	64ba      	str	r2, [r7, #72]	; 0x48
 800a0d2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a0d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0d8:	e841 2300 	strex	r3, r2, [r1]
 800a0dc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a0de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d1e5      	bne.n	800a0b0 <UART_Start_Receive_IT+0x168>
 800a0e4:	e04a      	b.n	800a17c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0ee:	d107      	bne.n	800a100 <UART_Start_Receive_IT+0x1b8>
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	691b      	ldr	r3, [r3, #16]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d103      	bne.n	800a100 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	4a26      	ldr	r2, [pc, #152]	; (800a194 <UART_Start_Receive_IT+0x24c>)
 800a0fc:	671a      	str	r2, [r3, #112]	; 0x70
 800a0fe:	e002      	b.n	800a106 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	4a25      	ldr	r2, [pc, #148]	; (800a198 <UART_Start_Receive_IT+0x250>)
 800a104:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2200      	movs	r2, #0
 800a10a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	691b      	ldr	r3, [r3, #16]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d019      	beq.n	800a14a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11e:	e853 3f00 	ldrex	r3, [r3]
 800a122:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a126:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a12a:	677b      	str	r3, [r7, #116]	; 0x74
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	461a      	mov	r2, r3
 800a132:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a134:	637b      	str	r3, [r7, #52]	; 0x34
 800a136:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a138:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a13a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a13c:	e841 2300 	strex	r3, r2, [r1]
 800a140:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a144:	2b00      	cmp	r3, #0
 800a146:	d1e6      	bne.n	800a116 <UART_Start_Receive_IT+0x1ce>
 800a148:	e018      	b.n	800a17c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	e853 3f00 	ldrex	r3, [r3]
 800a156:	613b      	str	r3, [r7, #16]
   return(result);
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	f043 0320 	orr.w	r3, r3, #32
 800a15e:	67bb      	str	r3, [r7, #120]	; 0x78
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	461a      	mov	r2, r3
 800a166:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a168:	623b      	str	r3, [r7, #32]
 800a16a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a16c:	69f9      	ldr	r1, [r7, #28]
 800a16e:	6a3a      	ldr	r2, [r7, #32]
 800a170:	e841 2300 	strex	r3, r2, [r1]
 800a174:	61bb      	str	r3, [r7, #24]
   return(result);
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d1e6      	bne.n	800a14a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	378c      	adds	r7, #140	; 0x8c
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	0800a8a5 	.word	0x0800a8a5
 800a190:	0800a5ad 	.word	0x0800a5ad
 800a194:	0800a44b 	.word	0x0800a44b
 800a198:	0800a2eb 	.word	0x0800a2eb

0800a19c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b095      	sub	sp, #84	; 0x54
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ac:	e853 3f00 	ldrex	r3, [r3]
 800a1b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	461a      	mov	r2, r3
 800a1c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1c2:	643b      	str	r3, [r7, #64]	; 0x40
 800a1c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a1c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a1ca:	e841 2300 	strex	r3, r2, [r1]
 800a1ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d1e6      	bne.n	800a1a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	3308      	adds	r3, #8
 800a1dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1de:	6a3b      	ldr	r3, [r7, #32]
 800a1e0:	e853 3f00 	ldrex	r3, [r3]
 800a1e4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1e6:	69fa      	ldr	r2, [r7, #28]
 800a1e8:	4b1e      	ldr	r3, [pc, #120]	; (800a264 <UART_EndRxTransfer+0xc8>)
 800a1ea:	4013      	ands	r3, r2
 800a1ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	3308      	adds	r3, #8
 800a1f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a1f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1fe:	e841 2300 	strex	r3, r2, [r1]
 800a202:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a206:	2b00      	cmp	r3, #0
 800a208:	d1e5      	bne.n	800a1d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d118      	bne.n	800a244 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	e853 3f00 	ldrex	r3, [r3]
 800a21e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	f023 0310 	bic.w	r3, r3, #16
 800a226:	647b      	str	r3, [r7, #68]	; 0x44
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	461a      	mov	r2, r3
 800a22e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a230:	61bb      	str	r3, [r7, #24]
 800a232:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a234:	6979      	ldr	r1, [r7, #20]
 800a236:	69ba      	ldr	r2, [r7, #24]
 800a238:	e841 2300 	strex	r3, r2, [r1]
 800a23c:	613b      	str	r3, [r7, #16]
   return(result);
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d1e6      	bne.n	800a212 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2220      	movs	r2, #32
 800a248:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2200      	movs	r2, #0
 800a256:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a258:	bf00      	nop
 800a25a:	3754      	adds	r7, #84	; 0x54
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr
 800a264:	effffffe 	.word	0xeffffffe

0800a268 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a274:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2200      	movs	r2, #0
 800a27a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2200      	movs	r2, #0
 800a282:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f7fe ff32 	bl	80090f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a28c:	bf00      	nop
 800a28e:	3710      	adds	r7, #16
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b088      	sub	sp, #32
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	e853 3f00 	ldrex	r3, [r3]
 800a2a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2b0:	61fb      	str	r3, [r7, #28]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	61bb      	str	r3, [r7, #24]
 800a2bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2be:	6979      	ldr	r1, [r7, #20]
 800a2c0:	69ba      	ldr	r2, [r7, #24]
 800a2c2:	e841 2300 	strex	r3, r2, [r1]
 800a2c6:	613b      	str	r3, [r7, #16]
   return(result);
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d1e6      	bne.n	800a29c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2220      	movs	r2, #32
 800a2d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f7fe fefd 	bl	80090dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2e2:	bf00      	nop
 800a2e4:	3720      	adds	r7, #32
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}

0800a2ea <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b096      	sub	sp, #88	; 0x58
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a2f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a302:	2b22      	cmp	r3, #34	; 0x22
 800a304:	f040 8095 	bne.w	800a432 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a312:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a316:	b2d9      	uxtb	r1, r3
 800a318:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a31c:	b2da      	uxtb	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a322:	400a      	ands	r2, r1
 800a324:	b2d2      	uxtb	r2, r2
 800a326:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a32c:	1c5a      	adds	r2, r3, #1
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a338:	b29b      	uxth	r3, r3
 800a33a:	3b01      	subs	r3, #1
 800a33c:	b29a      	uxth	r2, r3
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d178      	bne.n	800a442 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a358:	e853 3f00 	ldrex	r3, [r3]
 800a35c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a35e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a360:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a364:	653b      	str	r3, [r7, #80]	; 0x50
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	461a      	mov	r2, r3
 800a36c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a36e:	647b      	str	r3, [r7, #68]	; 0x44
 800a370:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a372:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a374:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a376:	e841 2300 	strex	r3, r2, [r1]
 800a37a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a37c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1e6      	bne.n	800a350 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	3308      	adds	r3, #8
 800a388:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38c:	e853 3f00 	ldrex	r3, [r3]
 800a390:	623b      	str	r3, [r7, #32]
   return(result);
 800a392:	6a3b      	ldr	r3, [r7, #32]
 800a394:	f023 0301 	bic.w	r3, r3, #1
 800a398:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	3308      	adds	r3, #8
 800a3a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a3a2:	633a      	str	r2, [r7, #48]	; 0x30
 800a3a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a3a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3aa:	e841 2300 	strex	r3, r2, [r1]
 800a3ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1e5      	bne.n	800a382 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2220      	movs	r2, #32
 800a3ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d12e      	bne.n	800a42a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	e853 3f00 	ldrex	r3, [r3]
 800a3de:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f023 0310 	bic.w	r3, r3, #16
 800a3e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3f0:	61fb      	str	r3, [r7, #28]
 800a3f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f4:	69b9      	ldr	r1, [r7, #24]
 800a3f6:	69fa      	ldr	r2, [r7, #28]
 800a3f8:	e841 2300 	strex	r3, r2, [r1]
 800a3fc:	617b      	str	r3, [r7, #20]
   return(result);
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d1e6      	bne.n	800a3d2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	69db      	ldr	r3, [r3, #28]
 800a40a:	f003 0310 	and.w	r3, r3, #16
 800a40e:	2b10      	cmp	r3, #16
 800a410:	d103      	bne.n	800a41a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2210      	movs	r2, #16
 800a418:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a420:	4619      	mov	r1, r3
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f7fe fe6e 	bl	8009104 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a428:	e00b      	b.n	800a442 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f7f6 fc06 	bl	8000c3c <HAL_UART_RxCpltCallback>
}
 800a430:	e007      	b.n	800a442 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	699a      	ldr	r2, [r3, #24]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f042 0208 	orr.w	r2, r2, #8
 800a440:	619a      	str	r2, [r3, #24]
}
 800a442:	bf00      	nop
 800a444:	3758      	adds	r7, #88	; 0x58
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b096      	sub	sp, #88	; 0x58
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a458:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a462:	2b22      	cmp	r3, #34	; 0x22
 800a464:	f040 8095 	bne.w	800a592 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a46e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a476:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a478:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a47c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a480:	4013      	ands	r3, r2
 800a482:	b29a      	uxth	r2, r3
 800a484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a486:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a48c:	1c9a      	adds	r2, r3, #2
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a498:	b29b      	uxth	r3, r3
 800a49a:	3b01      	subs	r3, #1
 800a49c:	b29a      	uxth	r2, r3
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d178      	bne.n	800a5a2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4b8:	e853 3f00 	ldrex	r3, [r3]
 800a4bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a4c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4ce:	643b      	str	r3, [r7, #64]	; 0x40
 800a4d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a4d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a4d6:	e841 2300 	strex	r3, r2, [r1]
 800a4da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d1e6      	bne.n	800a4b0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	3308      	adds	r3, #8
 800a4e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ea:	6a3b      	ldr	r3, [r7, #32]
 800a4ec:	e853 3f00 	ldrex	r3, [r3]
 800a4f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4f2:	69fb      	ldr	r3, [r7, #28]
 800a4f4:	f023 0301 	bic.w	r3, r3, #1
 800a4f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	3308      	adds	r3, #8
 800a500:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a502:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a504:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a506:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a50a:	e841 2300 	strex	r3, r2, [r1]
 800a50e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a512:	2b00      	cmp	r3, #0
 800a514:	d1e5      	bne.n	800a4e2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2220      	movs	r2, #32
 800a51a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d12e      	bne.n	800a58a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	e853 3f00 	ldrex	r3, [r3]
 800a53e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	f023 0310 	bic.w	r3, r3, #16
 800a546:	647b      	str	r3, [r7, #68]	; 0x44
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	461a      	mov	r2, r3
 800a54e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a550:	61bb      	str	r3, [r7, #24]
 800a552:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a554:	6979      	ldr	r1, [r7, #20]
 800a556:	69ba      	ldr	r2, [r7, #24]
 800a558:	e841 2300 	strex	r3, r2, [r1]
 800a55c:	613b      	str	r3, [r7, #16]
   return(result);
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d1e6      	bne.n	800a532 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	69db      	ldr	r3, [r3, #28]
 800a56a:	f003 0310 	and.w	r3, r3, #16
 800a56e:	2b10      	cmp	r3, #16
 800a570:	d103      	bne.n	800a57a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	2210      	movs	r2, #16
 800a578:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a580:	4619      	mov	r1, r3
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f7fe fdbe 	bl	8009104 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a588:	e00b      	b.n	800a5a2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f7f6 fb56 	bl	8000c3c <HAL_UART_RxCpltCallback>
}
 800a590:	e007      	b.n	800a5a2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	699a      	ldr	r2, [r3, #24]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f042 0208 	orr.w	r2, r2, #8
 800a5a0:	619a      	str	r2, [r3, #24]
}
 800a5a2:	bf00      	nop
 800a5a4:	3758      	adds	r7, #88	; 0x58
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
	...

0800a5ac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b0a6      	sub	sp, #152	; 0x98
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a5ba:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	69db      	ldr	r3, [r3, #28]
 800a5c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5e2:	2b22      	cmp	r3, #34	; 0x22
 800a5e4:	f040 814d 	bne.w	800a882 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a5ee:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a5f2:	e0f4      	b.n	800a7de <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fa:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a5fe:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800a602:	b2d9      	uxtb	r1, r3
 800a604:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800a608:	b2da      	uxtb	r2, r3
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a60e:	400a      	ands	r2, r1
 800a610:	b2d2      	uxtb	r2, r2
 800a612:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a618:	1c5a      	adds	r2, r3, #1
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a624:	b29b      	uxth	r3, r3
 800a626:	3b01      	subs	r3, #1
 800a628:	b29a      	uxth	r2, r3
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	69db      	ldr	r3, [r3, #28]
 800a636:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a63a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a63e:	f003 0307 	and.w	r3, r3, #7
 800a642:	2b00      	cmp	r3, #0
 800a644:	d053      	beq.n	800a6ee <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a646:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a64a:	f003 0301 	and.w	r3, r3, #1
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d011      	beq.n	800a676 <UART_RxISR_8BIT_FIFOEN+0xca>
 800a652:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00b      	beq.n	800a676 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2201      	movs	r2, #1
 800a664:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a66c:	f043 0201 	orr.w	r2, r3, #1
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a676:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a67a:	f003 0302 	and.w	r3, r3, #2
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d011      	beq.n	800a6a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a682:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a686:	f003 0301 	and.w	r3, r3, #1
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d00b      	beq.n	800a6a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	2202      	movs	r2, #2
 800a694:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a69c:	f043 0204 	orr.w	r2, r3, #4
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a6aa:	f003 0304 	and.w	r3, r3, #4
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d011      	beq.n	800a6d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a6b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a6b6:	f003 0301 	and.w	r3, r3, #1
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00b      	beq.n	800a6d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	2204      	movs	r2, #4
 800a6c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6cc:	f043 0202 	orr.w	r2, r3, #2
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d006      	beq.n	800a6ee <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f7fe fd05 	bl	80090f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d171      	bne.n	800a7de <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a700:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a702:	e853 3f00 	ldrex	r3, [r3]
 800a706:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800a708:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a70a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a70e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	461a      	mov	r2, r3
 800a718:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a71c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a71e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a720:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a722:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a724:	e841 2300 	strex	r3, r2, [r1]
 800a728:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a72a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d1e4      	bne.n	800a6fa <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	3308      	adds	r3, #8
 800a736:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a73a:	e853 3f00 	ldrex	r3, [r3]
 800a73e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a740:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a742:	4b56      	ldr	r3, [pc, #344]	; (800a89c <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800a744:	4013      	ands	r3, r2
 800a746:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	3308      	adds	r3, #8
 800a74e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a750:	657a      	str	r2, [r7, #84]	; 0x54
 800a752:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a754:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a756:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a758:	e841 2300 	strex	r3, r2, [r1]
 800a75c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a75e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a760:	2b00      	cmp	r3, #0
 800a762:	d1e5      	bne.n	800a730 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2220      	movs	r2, #32
 800a768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a776:	2b01      	cmp	r3, #1
 800a778:	d12e      	bne.n	800a7d8 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a788:	e853 3f00 	ldrex	r3, [r3]
 800a78c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a790:	f023 0310 	bic.w	r3, r3, #16
 800a794:	67bb      	str	r3, [r7, #120]	; 0x78
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	461a      	mov	r2, r3
 800a79c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a79e:	643b      	str	r3, [r7, #64]	; 0x40
 800a7a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a7a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a7a6:	e841 2300 	strex	r3, r2, [r1]
 800a7aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d1e6      	bne.n	800a780 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	69db      	ldr	r3, [r3, #28]
 800a7b8:	f003 0310 	and.w	r3, r3, #16
 800a7bc:	2b10      	cmp	r3, #16
 800a7be:	d103      	bne.n	800a7c8 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2210      	movs	r2, #16
 800a7c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f7fe fc97 	bl	8009104 <HAL_UARTEx_RxEventCallback>
 800a7d6:	e002      	b.n	800a7de <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f7f6 fa2f 	bl	8000c3c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a7de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d006      	beq.n	800a7f4 <UART_RxISR_8BIT_FIFOEN+0x248>
 800a7e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a7ea:	f003 0320 	and.w	r3, r3, #32
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	f47f af00 	bne.w	800a5f4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a7fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a7fe:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800a802:	2b00      	cmp	r3, #0
 800a804:	d045      	beq.n	800a892 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a80c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a810:	429a      	cmp	r2, r3
 800a812:	d23e      	bcs.n	800a892 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	3308      	adds	r3, #8
 800a81a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a81c:	6a3b      	ldr	r3, [r7, #32]
 800a81e:	e853 3f00 	ldrex	r3, [r3]
 800a822:	61fb      	str	r3, [r7, #28]
   return(result);
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a82a:	673b      	str	r3, [r7, #112]	; 0x70
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	3308      	adds	r3, #8
 800a832:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a834:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a836:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a838:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a83a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a83c:	e841 2300 	strex	r3, r2, [r1]
 800a840:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a844:	2b00      	cmp	r3, #0
 800a846:	d1e5      	bne.n	800a814 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	4a15      	ldr	r2, [pc, #84]	; (800a8a0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800a84c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	e853 3f00 	ldrex	r3, [r3]
 800a85a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	f043 0320 	orr.w	r3, r3, #32
 800a862:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	461a      	mov	r2, r3
 800a86a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a86c:	61bb      	str	r3, [r7, #24]
 800a86e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a870:	6979      	ldr	r1, [r7, #20]
 800a872:	69ba      	ldr	r2, [r7, #24]
 800a874:	e841 2300 	strex	r3, r2, [r1]
 800a878:	613b      	str	r3, [r7, #16]
   return(result);
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d1e6      	bne.n	800a84e <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a880:	e007      	b.n	800a892 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	699a      	ldr	r2, [r3, #24]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f042 0208 	orr.w	r2, r2, #8
 800a890:	619a      	str	r2, [r3, #24]
}
 800a892:	bf00      	nop
 800a894:	3798      	adds	r7, #152	; 0x98
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	effffffe 	.word	0xeffffffe
 800a8a0:	0800a2eb 	.word	0x0800a2eb

0800a8a4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b0a8      	sub	sp, #160	; 0xa0
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a8b2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	69db      	ldr	r3, [r3, #28]
 800a8bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	689b      	ldr	r3, [r3, #8]
 800a8d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8da:	2b22      	cmp	r3, #34	; 0x22
 800a8dc:	f040 8151 	bne.w	800ab82 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a8e6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a8ea:	e0f8      	b.n	800aade <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800a8fe:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800a902:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a906:	4013      	ands	r3, r2
 800a908:	b29a      	uxth	r2, r3
 800a90a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a90e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a914:	1c9a      	adds	r2, r3, #2
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a920:	b29b      	uxth	r3, r3
 800a922:	3b01      	subs	r3, #1
 800a924:	b29a      	uxth	r2, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	69db      	ldr	r3, [r3, #28]
 800a932:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a936:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a93a:	f003 0307 	and.w	r3, r3, #7
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d053      	beq.n	800a9ea <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a942:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a946:	f003 0301 	and.w	r3, r3, #1
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d011      	beq.n	800a972 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a94e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00b      	beq.n	800a972 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	2201      	movs	r2, #1
 800a960:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a968:	f043 0201 	orr.w	r2, r3, #1
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a972:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a976:	f003 0302 	and.w	r3, r3, #2
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d011      	beq.n	800a9a2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a97e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a982:	f003 0301 	and.w	r3, r3, #1
 800a986:	2b00      	cmp	r3, #0
 800a988:	d00b      	beq.n	800a9a2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	2202      	movs	r2, #2
 800a990:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a998:	f043 0204 	orr.w	r2, r3, #4
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a9a6:	f003 0304 	and.w	r3, r3, #4
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d011      	beq.n	800a9d2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a9ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a9b2:	f003 0301 	and.w	r3, r3, #1
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00b      	beq.n	800a9d2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	2204      	movs	r2, #4
 800a9c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9c8:	f043 0202 	orr.w	r2, r3, #2
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d006      	beq.n	800a9ea <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f7fe fb87 	bl	80090f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d173      	bne.n	800aade <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9fe:	e853 3f00 	ldrex	r3, [r3]
 800aa02:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aa04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	461a      	mov	r2, r3
 800aa14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aa18:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa1a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa1c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aa1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aa20:	e841 2300 	strex	r3, r2, [r1]
 800aa24:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aa26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d1e4      	bne.n	800a9f6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	3308      	adds	r3, #8
 800aa32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa36:	e853 3f00 	ldrex	r3, [r3]
 800aa3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aa3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa3e:	4b57      	ldr	r3, [pc, #348]	; (800ab9c <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800aa40:	4013      	ands	r3, r2
 800aa42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	3308      	adds	r3, #8
 800aa4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aa50:	65ba      	str	r2, [r7, #88]	; 0x58
 800aa52:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aa56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa58:	e841 2300 	strex	r3, r2, [r1]
 800aa5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aa5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d1e3      	bne.n	800aa2c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2220      	movs	r2, #32
 800aa68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d12e      	bne.n	800aad8 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa88:	e853 3f00 	ldrex	r3, [r3]
 800aa8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aa8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa90:	f023 0310 	bic.w	r3, r3, #16
 800aa94:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa9e:	647b      	str	r3, [r7, #68]	; 0x44
 800aaa0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aaa4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aaa6:	e841 2300 	strex	r3, r2, [r1]
 800aaaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aaac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d1e6      	bne.n	800aa80 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	69db      	ldr	r3, [r3, #28]
 800aab8:	f003 0310 	and.w	r3, r3, #16
 800aabc:	2b10      	cmp	r3, #16
 800aabe:	d103      	bne.n	800aac8 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	2210      	movs	r2, #16
 800aac6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aace:	4619      	mov	r1, r3
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f7fe fb17 	bl	8009104 <HAL_UARTEx_RxEventCallback>
 800aad6:	e002      	b.n	800aade <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f7f6 f8af 	bl	8000c3c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aade:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d006      	beq.n	800aaf4 <UART_RxISR_16BIT_FIFOEN+0x250>
 800aae6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aaea:	f003 0320 	and.w	r3, r3, #32
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f47f aefc 	bne.w	800a8ec <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aafa:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800aafe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d045      	beq.n	800ab92 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ab0c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d23e      	bcs.n	800ab92 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	3308      	adds	r3, #8
 800ab1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1e:	e853 3f00 	ldrex	r3, [r3]
 800ab22:	623b      	str	r3, [r7, #32]
   return(result);
 800ab24:	6a3b      	ldr	r3, [r7, #32]
 800ab26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab2a:	677b      	str	r3, [r7, #116]	; 0x74
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	3308      	adds	r3, #8
 800ab32:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ab34:	633a      	str	r2, [r7, #48]	; 0x30
 800ab36:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab3c:	e841 2300 	strex	r3, r2, [r1]
 800ab40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d1e5      	bne.n	800ab14 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	4a15      	ldr	r2, [pc, #84]	; (800aba0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800ab4c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	e853 3f00 	ldrex	r3, [r3]
 800ab5a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f043 0320 	orr.w	r3, r3, #32
 800ab62:	673b      	str	r3, [r7, #112]	; 0x70
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	461a      	mov	r2, r3
 800ab6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ab6c:	61fb      	str	r3, [r7, #28]
 800ab6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab70:	69b9      	ldr	r1, [r7, #24]
 800ab72:	69fa      	ldr	r2, [r7, #28]
 800ab74:	e841 2300 	strex	r3, r2, [r1]
 800ab78:	617b      	str	r3, [r7, #20]
   return(result);
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d1e6      	bne.n	800ab4e <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ab80:	e007      	b.n	800ab92 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	699a      	ldr	r2, [r3, #24]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f042 0208 	orr.w	r2, r2, #8
 800ab90:	619a      	str	r2, [r3, #24]
}
 800ab92:	bf00      	nop
 800ab94:	37a0      	adds	r7, #160	; 0xa0
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	effffffe 	.word	0xeffffffe
 800aba0:	0800a44b 	.word	0x0800a44b

0800aba4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800abac:	bf00      	nop
 800abae:	370c      	adds	r7, #12
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800abc0:	bf00      	nop
 800abc2:	370c      	adds	r7, #12
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800abd4:	bf00      	nop
 800abd6:	370c      	adds	r7, #12
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d101      	bne.n	800abf6 <HAL_UARTEx_DisableFifoMode+0x16>
 800abf2:	2302      	movs	r3, #2
 800abf4:	e027      	b.n	800ac46 <HAL_UARTEx_DisableFifoMode+0x66>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2201      	movs	r2, #1
 800abfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2224      	movs	r2, #36	; 0x24
 800ac02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f022 0201 	bic.w	r2, r2, #1
 800ac1c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ac24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68fa      	ldr	r2, [r7, #12]
 800ac32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2220      	movs	r2, #32
 800ac38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ac44:	2300      	movs	r3, #0
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3714      	adds	r7, #20
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr

0800ac52 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b084      	sub	sp, #16
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
 800ac5a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d101      	bne.n	800ac6a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ac66:	2302      	movs	r3, #2
 800ac68:	e02d      	b.n	800acc6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2224      	movs	r2, #36	; 0x24
 800ac76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f022 0201 	bic.w	r2, r2, #1
 800ac90:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	683a      	ldr	r2, [r7, #0]
 800aca2:	430a      	orrs	r2, r1
 800aca4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 f850 	bl	800ad4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68fa      	ldr	r2, [r7, #12]
 800acb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2220      	movs	r2, #32
 800acb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2200      	movs	r2, #0
 800acc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800acc4:	2300      	movs	r3, #0
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3710      	adds	r7, #16
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b084      	sub	sp, #16
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
 800acd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d101      	bne.n	800ace6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ace2:	2302      	movs	r3, #2
 800ace4:	e02d      	b.n	800ad42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2201      	movs	r2, #1
 800acea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2224      	movs	r2, #36	; 0x24
 800acf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f022 0201 	bic.w	r2, r2, #1
 800ad0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	689b      	ldr	r3, [r3, #8]
 800ad14:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	683a      	ldr	r2, [r7, #0]
 800ad1e:	430a      	orrs	r2, r1
 800ad20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 f812 	bl	800ad4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2220      	movs	r2, #32
 800ad34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3710      	adds	r7, #16
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
	...

0800ad4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b085      	sub	sp, #20
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d108      	bne.n	800ad6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2201      	movs	r2, #1
 800ad68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ad6c:	e031      	b.n	800add2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ad6e:	2310      	movs	r3, #16
 800ad70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ad72:	2310      	movs	r3, #16
 800ad74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	689b      	ldr	r3, [r3, #8]
 800ad7c:	0e5b      	lsrs	r3, r3, #25
 800ad7e:	b2db      	uxtb	r3, r3
 800ad80:	f003 0307 	and.w	r3, r3, #7
 800ad84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	0f5b      	lsrs	r3, r3, #29
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	f003 0307 	and.w	r3, r3, #7
 800ad94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad96:	7bbb      	ldrb	r3, [r7, #14]
 800ad98:	7b3a      	ldrb	r2, [r7, #12]
 800ad9a:	4911      	ldr	r1, [pc, #68]	; (800ade0 <UARTEx_SetNbDataToProcess+0x94>)
 800ad9c:	5c8a      	ldrb	r2, [r1, r2]
 800ad9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ada2:	7b3a      	ldrb	r2, [r7, #12]
 800ada4:	490f      	ldr	r1, [pc, #60]	; (800ade4 <UARTEx_SetNbDataToProcess+0x98>)
 800ada6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ada8:	fb93 f3f2 	sdiv	r3, r3, r2
 800adac:	b29a      	uxth	r2, r3
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800adb4:	7bfb      	ldrb	r3, [r7, #15]
 800adb6:	7b7a      	ldrb	r2, [r7, #13]
 800adb8:	4909      	ldr	r1, [pc, #36]	; (800ade0 <UARTEx_SetNbDataToProcess+0x94>)
 800adba:	5c8a      	ldrb	r2, [r1, r2]
 800adbc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800adc0:	7b7a      	ldrb	r2, [r7, #13]
 800adc2:	4908      	ldr	r1, [pc, #32]	; (800ade4 <UARTEx_SetNbDataToProcess+0x98>)
 800adc4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800adc6:	fb93 f3f2 	sdiv	r3, r3, r2
 800adca:	b29a      	uxth	r2, r3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800add2:	bf00      	nop
 800add4:	3714      	adds	r7, #20
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr
 800adde:	bf00      	nop
 800ade0:	0800ef74 	.word	0x0800ef74
 800ade4:	0800ef7c 	.word	0x0800ef7c

0800ade8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ade8:	b084      	sub	sp, #16
 800adea:	b580      	push	{r7, lr}
 800adec:	b084      	sub	sp, #16
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
 800adf2:	f107 001c 	add.w	r0, r7, #28
 800adf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800adfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfc:	2b01      	cmp	r3, #1
 800adfe:	d120      	bne.n	800ae42 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	68da      	ldr	r2, [r3, #12]
 800ae10:	4b2a      	ldr	r3, [pc, #168]	; (800aebc <USB_CoreInit+0xd4>)
 800ae12:	4013      	ands	r3, r2
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	68db      	ldr	r3, [r3, #12]
 800ae1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ae24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d105      	bne.n	800ae36 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 f9ca 	bl	800b1d0 <USB_CoreReset>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	73fb      	strb	r3, [r7, #15]
 800ae40:	e01a      	b.n	800ae78 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 f9be 	bl	800b1d0 <USB_CoreReset>
 800ae54:	4603      	mov	r3, r0
 800ae56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ae58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d106      	bne.n	800ae6c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	639a      	str	r2, [r3, #56]	; 0x38
 800ae6a:	e005      	b.n	800ae78 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ae78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d116      	bne.n	800aeac <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae82:	b29a      	uxth	r2, r3
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ae8c:	4b0c      	ldr	r3, [pc, #48]	; (800aec0 <USB_CoreInit+0xd8>)
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	689b      	ldr	r3, [r3, #8]
 800ae98:	f043 0206 	orr.w	r2, r3, #6
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	689b      	ldr	r3, [r3, #8]
 800aea4:	f043 0220 	orr.w	r2, r3, #32
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800aeac:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aeb8:	b004      	add	sp, #16
 800aeba:	4770      	bx	lr
 800aebc:	ffbdffbf 	.word	0xffbdffbf
 800aec0:	03ee0000 	.word	0x03ee0000

0800aec4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b083      	sub	sp, #12
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	f043 0201 	orr.w	r2, r3, #1
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aed8:	2300      	movs	r3, #0
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	370c      	adds	r7, #12
 800aede:	46bd      	mov	sp, r7
 800aee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee4:	4770      	bx	lr

0800aee6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aee6:	b480      	push	{r7}
 800aee8:	b083      	sub	sp, #12
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	f023 0201 	bic.w	r2, r3, #1
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aefa:	2300      	movs	r3, #0
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	370c      	adds	r7, #12
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	460b      	mov	r3, r1
 800af12:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800af14:	2300      	movs	r3, #0
 800af16:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800af24:	78fb      	ldrb	r3, [r7, #3]
 800af26:	2b01      	cmp	r3, #1
 800af28:	d115      	bne.n	800af56 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800af36:	2001      	movs	r0, #1
 800af38:	f7f6 fd3c 	bl	80019b4 <HAL_Delay>
      ms++;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	3301      	adds	r3, #1
 800af40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 f935 	bl	800b1b2 <USB_GetMode>
 800af48:	4603      	mov	r3, r0
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d01e      	beq.n	800af8c <USB_SetCurrentMode+0x84>
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2b31      	cmp	r3, #49	; 0x31
 800af52:	d9f0      	bls.n	800af36 <USB_SetCurrentMode+0x2e>
 800af54:	e01a      	b.n	800af8c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800af56:	78fb      	ldrb	r3, [r7, #3]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d115      	bne.n	800af88 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800af68:	2001      	movs	r0, #1
 800af6a:	f7f6 fd23 	bl	80019b4 <HAL_Delay>
      ms++;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	3301      	adds	r3, #1
 800af72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 f91c 	bl	800b1b2 <USB_GetMode>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d005      	beq.n	800af8c <USB_SetCurrentMode+0x84>
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2b31      	cmp	r3, #49	; 0x31
 800af84:	d9f0      	bls.n	800af68 <USB_SetCurrentMode+0x60>
 800af86:	e001      	b.n	800af8c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800af88:	2301      	movs	r3, #1
 800af8a:	e005      	b.n	800af98 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2b32      	cmp	r3, #50	; 0x32
 800af90:	d101      	bne.n	800af96 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800af92:	2301      	movs	r3, #1
 800af94:	e000      	b.n	800af98 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800af96:	2300      	movs	r3, #0
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3710      	adds	r7, #16
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b085      	sub	sp, #20
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800afaa:	2300      	movs	r3, #0
 800afac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	3301      	adds	r3, #1
 800afb2:	60fb      	str	r3, [r7, #12]
 800afb4:	4a12      	ldr	r2, [pc, #72]	; (800b000 <USB_FlushTxFifo+0x60>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d901      	bls.n	800afbe <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800afba:	2303      	movs	r3, #3
 800afbc:	e01a      	b.n	800aff4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	691b      	ldr	r3, [r3, #16]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	daf3      	bge.n	800afae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800afc6:	2300      	movs	r3, #0
 800afc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	019b      	lsls	r3, r3, #6
 800afce:	f043 0220 	orr.w	r2, r3, #32
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	3301      	adds	r3, #1
 800afda:	60fb      	str	r3, [r7, #12]
 800afdc:	4a08      	ldr	r2, [pc, #32]	; (800b000 <USB_FlushTxFifo+0x60>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d901      	bls.n	800afe6 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800afe2:	2303      	movs	r3, #3
 800afe4:	e006      	b.n	800aff4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	691b      	ldr	r3, [r3, #16]
 800afea:	f003 0320 	and.w	r3, r3, #32
 800afee:	2b20      	cmp	r3, #32
 800aff0:	d0f1      	beq.n	800afd6 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800aff2:	2300      	movs	r3, #0
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3714      	adds	r7, #20
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr
 800b000:	00030d40 	.word	0x00030d40

0800b004 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b004:	b480      	push	{r7}
 800b006:	b085      	sub	sp, #20
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b00c:	2300      	movs	r3, #0
 800b00e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	3301      	adds	r3, #1
 800b014:	60fb      	str	r3, [r7, #12]
 800b016:	4a11      	ldr	r2, [pc, #68]	; (800b05c <USB_FlushRxFifo+0x58>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d901      	bls.n	800b020 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800b01c:	2303      	movs	r3, #3
 800b01e:	e017      	b.n	800b050 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	691b      	ldr	r3, [r3, #16]
 800b024:	2b00      	cmp	r3, #0
 800b026:	daf3      	bge.n	800b010 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b028:	2300      	movs	r3, #0
 800b02a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2210      	movs	r2, #16
 800b030:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	3301      	adds	r3, #1
 800b036:	60fb      	str	r3, [r7, #12]
 800b038:	4a08      	ldr	r2, [pc, #32]	; (800b05c <USB_FlushRxFifo+0x58>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d901      	bls.n	800b042 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800b03e:	2303      	movs	r3, #3
 800b040:	e006      	b.n	800b050 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	f003 0310 	and.w	r3, r3, #16
 800b04a:	2b10      	cmp	r3, #16
 800b04c:	d0f1      	beq.n	800b032 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800b04e:	2300      	movs	r3, #0
}
 800b050:	4618      	mov	r0, r3
 800b052:	3714      	adds	r7, #20
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr
 800b05c:	00030d40 	.word	0x00030d40

0800b060 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b060:	b480      	push	{r7}
 800b062:	b089      	sub	sp, #36	; 0x24
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	4611      	mov	r1, r2
 800b06c:	461a      	mov	r2, r3
 800b06e:	460b      	mov	r3, r1
 800b070:	71fb      	strb	r3, [r7, #7]
 800b072:	4613      	mov	r3, r2
 800b074:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b07e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b082:	2b00      	cmp	r3, #0
 800b084:	d123      	bne.n	800b0ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b086:	88bb      	ldrh	r3, [r7, #4]
 800b088:	3303      	adds	r3, #3
 800b08a:	089b      	lsrs	r3, r3, #2
 800b08c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b08e:	2300      	movs	r3, #0
 800b090:	61bb      	str	r3, [r7, #24]
 800b092:	e018      	b.n	800b0c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b094:	79fb      	ldrb	r3, [r7, #7]
 800b096:	031a      	lsls	r2, r3, #12
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	4413      	add	r3, r2
 800b09c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	69fb      	ldr	r3, [r7, #28]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b0a8:	69fb      	ldr	r3, [r7, #28]
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b0b4:	69fb      	ldr	r3, [r7, #28]
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b0ba:	69fb      	ldr	r3, [r7, #28]
 800b0bc:	3301      	adds	r3, #1
 800b0be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b0c0:	69bb      	ldr	r3, [r7, #24]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	61bb      	str	r3, [r7, #24]
 800b0c6:	69ba      	ldr	r2, [r7, #24]
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d3e2      	bcc.n	800b094 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b0ce:	2300      	movs	r3, #0
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3724      	adds	r7, #36	; 0x24
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr

0800b0dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b08b      	sub	sp, #44	; 0x2c
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b0f2:	88fb      	ldrh	r3, [r7, #6]
 800b0f4:	089b      	lsrs	r3, r3, #2
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b0fa:	88fb      	ldrh	r3, [r7, #6]
 800b0fc:	f003 0303 	and.w	r3, r3, #3
 800b100:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b102:	2300      	movs	r3, #0
 800b104:	623b      	str	r3, [r7, #32]
 800b106:	e014      	b.n	800b132 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b108:	69bb      	ldr	r3, [r7, #24]
 800b10a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b112:	601a      	str	r2, [r3, #0]
    pDest++;
 800b114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b116:	3301      	adds	r3, #1
 800b118:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11c:	3301      	adds	r3, #1
 800b11e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b122:	3301      	adds	r3, #1
 800b124:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b128:	3301      	adds	r3, #1
 800b12a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b12c:	6a3b      	ldr	r3, [r7, #32]
 800b12e:	3301      	adds	r3, #1
 800b130:	623b      	str	r3, [r7, #32]
 800b132:	6a3a      	ldr	r2, [r7, #32]
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	429a      	cmp	r2, r3
 800b138:	d3e6      	bcc.n	800b108 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b13a:	8bfb      	ldrh	r3, [r7, #30]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d01e      	beq.n	800b17e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b140:	2300      	movs	r3, #0
 800b142:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b144:	69bb      	ldr	r3, [r7, #24]
 800b146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b14a:	461a      	mov	r2, r3
 800b14c:	f107 0310 	add.w	r3, r7, #16
 800b150:	6812      	ldr	r2, [r2, #0]
 800b152:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b154:	693a      	ldr	r2, [r7, #16]
 800b156:	6a3b      	ldr	r3, [r7, #32]
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	00db      	lsls	r3, r3, #3
 800b15c:	fa22 f303 	lsr.w	r3, r2, r3
 800b160:	b2da      	uxtb	r2, r3
 800b162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b164:	701a      	strb	r2, [r3, #0]
      i++;
 800b166:	6a3b      	ldr	r3, [r7, #32]
 800b168:	3301      	adds	r3, #1
 800b16a:	623b      	str	r3, [r7, #32]
      pDest++;
 800b16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16e:	3301      	adds	r3, #1
 800b170:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b172:	8bfb      	ldrh	r3, [r7, #30]
 800b174:	3b01      	subs	r3, #1
 800b176:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b178:	8bfb      	ldrh	r3, [r7, #30]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d1ea      	bne.n	800b154 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b180:	4618      	mov	r0, r3
 800b182:	372c      	adds	r7, #44	; 0x2c
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b085      	sub	sp, #20
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	695b      	ldr	r3, [r3, #20]
 800b198:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	699b      	ldr	r3, [r3, #24]
 800b19e:	68fa      	ldr	r2, [r7, #12]
 800b1a0:	4013      	ands	r3, r2
 800b1a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3714      	adds	r7, #20
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr

0800b1b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b1b2:	b480      	push	{r7}
 800b1b4:	b083      	sub	sp, #12
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	695b      	ldr	r3, [r3, #20]
 800b1be:	f003 0301 	and.w	r3, r3, #1
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	370c      	adds	r7, #12
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr
	...

0800b1d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b085      	sub	sp, #20
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	3301      	adds	r3, #1
 800b1e0:	60fb      	str	r3, [r7, #12]
 800b1e2:	4a13      	ldr	r2, [pc, #76]	; (800b230 <USB_CoreReset+0x60>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d901      	bls.n	800b1ec <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800b1e8:	2303      	movs	r3, #3
 800b1ea:	e01a      	b.n	800b222 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	691b      	ldr	r3, [r3, #16]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	daf3      	bge.n	800b1dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	691b      	ldr	r3, [r3, #16]
 800b1fc:	f043 0201 	orr.w	r2, r3, #1
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	3301      	adds	r3, #1
 800b208:	60fb      	str	r3, [r7, #12]
 800b20a:	4a09      	ldr	r2, [pc, #36]	; (800b230 <USB_CoreReset+0x60>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d901      	bls.n	800b214 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800b210:	2303      	movs	r3, #3
 800b212:	e006      	b.n	800b222 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	691b      	ldr	r3, [r3, #16]
 800b218:	f003 0301 	and.w	r3, r3, #1
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d0f1      	beq.n	800b204 <USB_CoreReset+0x34>

  return HAL_OK;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	3714      	adds	r7, #20
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr
 800b22e:	bf00      	nop
 800b230:	00030d40 	.word	0x00030d40

0800b234 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b234:	b084      	sub	sp, #16
 800b236:	b580      	push	{r7, lr}
 800b238:	b086      	sub	sp, #24
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
 800b23e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b242:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b246:	2300      	movs	r3, #0
 800b248:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b254:	461a      	mov	r2, r3
 800b256:	2300      	movs	r3, #0
 800b258:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b25e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b26a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d018      	beq.n	800b2b0 <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b280:	2b01      	cmp	r3, #1
 800b282:	d10a      	bne.n	800b29a <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	68fa      	ldr	r2, [r7, #12]
 800b28e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b292:	f043 0304 	orr.w	r3, r3, #4
 800b296:	6013      	str	r3, [r2, #0]
 800b298:	e014      	b.n	800b2c4 <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b2a8:	f023 0304 	bic.w	r3, r3, #4
 800b2ac:	6013      	str	r3, [r2, #0]
 800b2ae:	e009      	b.n	800b2c4 <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b2be:	f023 0304 	bic.w	r3, r3, #4
 800b2c2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b2c4:	2110      	movs	r1, #16
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f7ff fe6a 	bl	800afa0 <USB_FlushTxFifo>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d001      	beq.n	800b2d6 <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f7ff fe94 	bl	800b004 <USB_FlushRxFifo>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d001      	beq.n	800b2e6 <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	613b      	str	r3, [r7, #16]
 800b2ea:	e015      	b.n	800b318 <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	015a      	lsls	r2, r3, #5
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b2fe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	015a      	lsls	r2, r3, #5
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	4413      	add	r3, r2
 800b308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b30c:	461a      	mov	r2, r3
 800b30e:	2300      	movs	r3, #0
 800b310:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	3301      	adds	r3, #1
 800b316:	613b      	str	r3, [r7, #16]
 800b318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b31a:	693a      	ldr	r2, [r7, #16]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d3e5      	bcc.n	800b2ec <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2200      	movs	r2, #0
 800b324:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f04f 32ff 	mov.w	r2, #4294967295
 800b32c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b336:	2b00      	cmp	r3, #0
 800b338:	d00b      	beq.n	800b352 <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b340:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4a13      	ldr	r2, [pc, #76]	; (800b394 <USB_HostInit+0x160>)
 800b346:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	4a13      	ldr	r2, [pc, #76]	; (800b398 <USB_HostInit+0x164>)
 800b34c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800b350:	e009      	b.n	800b366 <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2280      	movs	r2, #128	; 0x80
 800b356:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	4a10      	ldr	r2, [pc, #64]	; (800b39c <USB_HostInit+0x168>)
 800b35c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4a0f      	ldr	r2, [pc, #60]	; (800b3a0 <USB_HostInit+0x16c>)
 800b362:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d105      	bne.n	800b378 <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	699b      	ldr	r3, [r3, #24]
 800b370:	f043 0210 	orr.w	r2, r3, #16
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	699a      	ldr	r2, [r3, #24]
 800b37c:	4b09      	ldr	r3, [pc, #36]	; (800b3a4 <USB_HostInit+0x170>)
 800b37e:	4313      	orrs	r3, r2
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800b384:	7dfb      	ldrb	r3, [r7, #23]
}
 800b386:	4618      	mov	r0, r3
 800b388:	3718      	adds	r7, #24
 800b38a:	46bd      	mov	sp, r7
 800b38c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b390:	b004      	add	sp, #16
 800b392:	4770      	bx	lr
 800b394:	01000200 	.word	0x01000200
 800b398:	00e00300 	.word	0x00e00300
 800b39c:	00600080 	.word	0x00600080
 800b3a0:	004000e0 	.word	0x004000e0
 800b3a4:	a3200008 	.word	0xa3200008

0800b3a8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b085      	sub	sp, #20
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	68fa      	ldr	r2, [r7, #12]
 800b3c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b3c6:	f023 0303 	bic.w	r3, r3, #3
 800b3ca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	78fb      	ldrb	r3, [r7, #3]
 800b3d6:	f003 0303 	and.w	r3, r3, #3
 800b3da:	68f9      	ldr	r1, [r7, #12]
 800b3dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b3e4:	78fb      	ldrb	r3, [r7, #3]
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	d107      	bne.n	800b3fa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b3f6:	6053      	str	r3, [r2, #4]
 800b3f8:	e009      	b.n	800b40e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800b3fa:	78fb      	ldrb	r3, [r7, #3]
 800b3fc:	2b02      	cmp	r3, #2
 800b3fe:	d106      	bne.n	800b40e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b406:	461a      	mov	r2, r3
 800b408:	f241 7370 	movw	r3, #6000	; 0x1770
 800b40c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800b40e:	2300      	movs	r3, #0
}
 800b410:	4618      	mov	r0, r3
 800b412:	3714      	adds	r7, #20
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b428:	2300      	movs	r3, #0
 800b42a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b43c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	68fa      	ldr	r2, [r7, #12]
 800b442:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b44a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b44c:	2064      	movs	r0, #100	; 0x64
 800b44e:	f7f6 fab1 	bl	80019b4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	68fa      	ldr	r2, [r7, #12]
 800b456:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b45a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b45e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b460:	200a      	movs	r0, #10
 800b462:	f7f6 faa7 	bl	80019b4 <HAL_Delay>

  return HAL_OK;
 800b466:	2300      	movs	r3, #0
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3710      	adds	r7, #16
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	460b      	mov	r3, r1
 800b47a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b480:	2300      	movs	r3, #0
 800b482:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b494:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d109      	bne.n	800b4b4 <USB_DriveVbus+0x44>
 800b4a0:	78fb      	ldrb	r3, [r7, #3]
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d106      	bne.n	800b4b4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	68fa      	ldr	r2, [r7, #12]
 800b4aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b4ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b4b2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b4ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4be:	d109      	bne.n	800b4d4 <USB_DriveVbus+0x64>
 800b4c0:	78fb      	ldrb	r3, [r7, #3]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d106      	bne.n	800b4d4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b4ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4d2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b4d4:	2300      	movs	r3, #0
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3714      	adds	r7, #20
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr

0800b4e2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b4e2:	b480      	push	{r7}
 800b4e4:	b085      	sub	sp, #20
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	0c5b      	lsrs	r3, r3, #17
 800b500:	f003 0303 	and.w	r3, r3, #3
}
 800b504:	4618      	mov	r0, r3
 800b506:	3714      	adds	r7, #20
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr

0800b510 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800b510:	b480      	push	{r7}
 800b512:	b085      	sub	sp, #20
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	b29b      	uxth	r3, r3
}
 800b526:	4618      	mov	r0, r3
 800b528:	3714      	adds	r7, #20
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr
	...

0800b534 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b088      	sub	sp, #32
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	4608      	mov	r0, r1
 800b53e:	4611      	mov	r1, r2
 800b540:	461a      	mov	r2, r3
 800b542:	4603      	mov	r3, r0
 800b544:	70fb      	strb	r3, [r7, #3]
 800b546:	460b      	mov	r3, r1
 800b548:	70bb      	strb	r3, [r7, #2]
 800b54a:	4613      	mov	r3, r2
 800b54c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b54e:	2300      	movs	r3, #0
 800b550:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800b556:	78fb      	ldrb	r3, [r7, #3]
 800b558:	015a      	lsls	r2, r3, #5
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	4413      	add	r3, r2
 800b55e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b562:	461a      	mov	r2, r3
 800b564:	f04f 33ff 	mov.w	r3, #4294967295
 800b568:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b56a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b56e:	2b03      	cmp	r3, #3
 800b570:	d87e      	bhi.n	800b670 <USB_HC_Init+0x13c>
 800b572:	a201      	add	r2, pc, #4	; (adr r2, 800b578 <USB_HC_Init+0x44>)
 800b574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b578:	0800b589 	.word	0x0800b589
 800b57c:	0800b633 	.word	0x0800b633
 800b580:	0800b589 	.word	0x0800b589
 800b584:	0800b5f5 	.word	0x0800b5f5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b588:	78fb      	ldrb	r3, [r7, #3]
 800b58a:	015a      	lsls	r2, r3, #5
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	4413      	add	r3, r2
 800b590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b594:	461a      	mov	r2, r3
 800b596:	f240 439d 	movw	r3, #1181	; 0x49d
 800b59a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b59c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	da10      	bge.n	800b5c6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b5a4:	78fb      	ldrb	r3, [r7, #3]
 800b5a6:	015a      	lsls	r2, r3, #5
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	4413      	add	r3, r2
 800b5ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	78fa      	ldrb	r2, [r7, #3]
 800b5b4:	0151      	lsls	r1, r2, #5
 800b5b6:	693a      	ldr	r2, [r7, #16]
 800b5b8:	440a      	add	r2, r1
 800b5ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b5be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5c2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800b5c4:	e057      	b.n	800b676 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d051      	beq.n	800b676 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800b5d2:	78fb      	ldrb	r3, [r7, #3]
 800b5d4:	015a      	lsls	r2, r3, #5
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	4413      	add	r3, r2
 800b5da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b5de:	68db      	ldr	r3, [r3, #12]
 800b5e0:	78fa      	ldrb	r2, [r7, #3]
 800b5e2:	0151      	lsls	r1, r2, #5
 800b5e4:	693a      	ldr	r2, [r7, #16]
 800b5e6:	440a      	add	r2, r1
 800b5e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b5ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b5f0:	60d3      	str	r3, [r2, #12]
      break;
 800b5f2:	e040      	b.n	800b676 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b5f4:	78fb      	ldrb	r3, [r7, #3]
 800b5f6:	015a      	lsls	r2, r3, #5
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	4413      	add	r3, r2
 800b5fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b600:	461a      	mov	r2, r3
 800b602:	f240 639d 	movw	r3, #1693	; 0x69d
 800b606:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b608:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	da34      	bge.n	800b67a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b610:	78fb      	ldrb	r3, [r7, #3]
 800b612:	015a      	lsls	r2, r3, #5
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	4413      	add	r3, r2
 800b618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	78fa      	ldrb	r2, [r7, #3]
 800b620:	0151      	lsls	r1, r2, #5
 800b622:	693a      	ldr	r2, [r7, #16]
 800b624:	440a      	add	r2, r1
 800b626:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b62a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b62e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800b630:	e023      	b.n	800b67a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b632:	78fb      	ldrb	r3, [r7, #3]
 800b634:	015a      	lsls	r2, r3, #5
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	4413      	add	r3, r2
 800b63a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b63e:	461a      	mov	r2, r3
 800b640:	f240 2325 	movw	r3, #549	; 0x225
 800b644:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b646:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	da17      	bge.n	800b67e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800b64e:	78fb      	ldrb	r3, [r7, #3]
 800b650:	015a      	lsls	r2, r3, #5
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	4413      	add	r3, r2
 800b656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b65a:	68db      	ldr	r3, [r3, #12]
 800b65c:	78fa      	ldrb	r2, [r7, #3]
 800b65e:	0151      	lsls	r1, r2, #5
 800b660:	693a      	ldr	r2, [r7, #16]
 800b662:	440a      	add	r2, r1
 800b664:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b668:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800b66c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800b66e:	e006      	b.n	800b67e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800b670:	2301      	movs	r3, #1
 800b672:	77fb      	strb	r3, [r7, #31]
      break;
 800b674:	e004      	b.n	800b680 <USB_HC_Init+0x14c>
      break;
 800b676:	bf00      	nop
 800b678:	e002      	b.n	800b680 <USB_HC_Init+0x14c>
      break;
 800b67a:	bf00      	nop
 800b67c:	e000      	b.n	800b680 <USB_HC_Init+0x14c>
      break;
 800b67e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800b680:	78fb      	ldrb	r3, [r7, #3]
 800b682:	015a      	lsls	r2, r3, #5
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	4413      	add	r3, r2
 800b688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	78fa      	ldrb	r2, [r7, #3]
 800b690:	0151      	lsls	r1, r2, #5
 800b692:	693a      	ldr	r2, [r7, #16]
 800b694:	440a      	add	r2, r1
 800b696:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b69a:	f043 0302 	orr.w	r3, r3, #2
 800b69e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b6a6:	699a      	ldr	r2, [r3, #24]
 800b6a8:	78fb      	ldrb	r3, [r7, #3]
 800b6aa:	f003 030f 	and.w	r3, r3, #15
 800b6ae:	2101      	movs	r1, #1
 800b6b0:	fa01 f303 	lsl.w	r3, r1, r3
 800b6b4:	6939      	ldr	r1, [r7, #16]
 800b6b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	699b      	ldr	r3, [r3, #24]
 800b6c2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b6ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	da03      	bge.n	800b6da <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b6d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6d6:	61bb      	str	r3, [r7, #24]
 800b6d8:	e001      	b.n	800b6de <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f7ff feff 	bl	800b4e2 <USB_GetHostSpeed>
 800b6e4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800b6e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b6ea:	2b02      	cmp	r3, #2
 800b6ec:	d106      	bne.n	800b6fc <USB_HC_Init+0x1c8>
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2b02      	cmp	r3, #2
 800b6f2:	d003      	beq.n	800b6fc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b6f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b6f8:	617b      	str	r3, [r7, #20]
 800b6fa:	e001      	b.n	800b700 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b700:	787b      	ldrb	r3, [r7, #1]
 800b702:	059b      	lsls	r3, r3, #22
 800b704:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b708:	78bb      	ldrb	r3, [r7, #2]
 800b70a:	02db      	lsls	r3, r3, #11
 800b70c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b710:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b712:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b716:	049b      	lsls	r3, r3, #18
 800b718:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b71c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b71e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b720:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b724:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b726:	69bb      	ldr	r3, [r7, #24]
 800b728:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b72a:	78fb      	ldrb	r3, [r7, #3]
 800b72c:	0159      	lsls	r1, r3, #5
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	440b      	add	r3, r1
 800b732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b736:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b73c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800b73e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b742:	2b03      	cmp	r3, #3
 800b744:	d10f      	bne.n	800b766 <USB_HC_Init+0x232>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800b746:	78fb      	ldrb	r3, [r7, #3]
 800b748:	015a      	lsls	r2, r3, #5
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	4413      	add	r3, r2
 800b74e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	78fa      	ldrb	r2, [r7, #3]
 800b756:	0151      	lsls	r1, r2, #5
 800b758:	693a      	ldr	r2, [r7, #16]
 800b75a:	440a      	add	r2, r1
 800b75c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b760:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b764:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b766:	7ffb      	ldrb	r3, [r7, #31]
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3720      	adds	r7, #32
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b08c      	sub	sp, #48	; 0x30
 800b774:	af02      	add	r7, sp, #8
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	60b9      	str	r1, [r7, #8]
 800b77a:	4613      	mov	r3, r2
 800b77c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	785b      	ldrb	r3, [r3, #1]
 800b786:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800b788:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b78c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b796:	2b00      	cmp	r3, #0
 800b798:	d02d      	beq.n	800b7f6 <USB_HC_StartXfer+0x86>
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	791b      	ldrb	r3, [r3, #4]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d129      	bne.n	800b7f6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800b7a2:	79fb      	ldrb	r3, [r7, #7]
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d117      	bne.n	800b7d8 <USB_HC_StartXfer+0x68>
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	79db      	ldrb	r3, [r3, #7]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d003      	beq.n	800b7b8 <USB_HC_StartXfer+0x48>
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	79db      	ldrb	r3, [r3, #7]
 800b7b4:	2b02      	cmp	r3, #2
 800b7b6:	d10f      	bne.n	800b7d8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800b7b8:	69fb      	ldr	r3, [r7, #28]
 800b7ba:	015a      	lsls	r2, r3, #5
 800b7bc:	6a3b      	ldr	r3, [r7, #32]
 800b7be:	4413      	add	r3, r2
 800b7c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b7c4:	68db      	ldr	r3, [r3, #12]
 800b7c6:	69fa      	ldr	r2, [r7, #28]
 800b7c8:	0151      	lsls	r1, r2, #5
 800b7ca:	6a3a      	ldr	r2, [r7, #32]
 800b7cc:	440a      	add	r2, r1
 800b7ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b7d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7d6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800b7d8:	79fb      	ldrb	r3, [r7, #7]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d10b      	bne.n	800b7f6 <USB_HC_StartXfer+0x86>
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	795b      	ldrb	r3, [r3, #5]
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d107      	bne.n	800b7f6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	785b      	ldrb	r3, [r3, #1]
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	68f8      	ldr	r0, [r7, #12]
 800b7ee:	f000 fa0d 	bl	800bc0c <USB_DoPing>
      return HAL_OK;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	e0f8      	b.n	800b9e8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	695b      	ldr	r3, [r3, #20]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d018      	beq.n	800b830 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	695b      	ldr	r3, [r3, #20]
 800b802:	68ba      	ldr	r2, [r7, #8]
 800b804:	8912      	ldrh	r2, [r2, #8]
 800b806:	4413      	add	r3, r2
 800b808:	3b01      	subs	r3, #1
 800b80a:	68ba      	ldr	r2, [r7, #8]
 800b80c:	8912      	ldrh	r2, [r2, #8]
 800b80e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b812:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800b814:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b816:	8b7b      	ldrh	r3, [r7, #26]
 800b818:	429a      	cmp	r2, r3
 800b81a:	d90b      	bls.n	800b834 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800b81c:	8b7b      	ldrh	r3, [r7, #26]
 800b81e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b820:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b822:	68ba      	ldr	r2, [r7, #8]
 800b824:	8912      	ldrh	r2, [r2, #8]
 800b826:	fb02 f203 	mul.w	r2, r2, r3
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	611a      	str	r2, [r3, #16]
 800b82e:	e001      	b.n	800b834 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800b830:	2301      	movs	r3, #1
 800b832:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	78db      	ldrb	r3, [r3, #3]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d007      	beq.n	800b84c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b83c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b83e:	68ba      	ldr	r2, [r7, #8]
 800b840:	8912      	ldrh	r2, [r2, #8]
 800b842:	fb02 f203 	mul.w	r2, r2, r3
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	611a      	str	r2, [r3, #16]
 800b84a:	e003      	b.n	800b854 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	695a      	ldr	r2, [r3, #20]
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	691b      	ldr	r3, [r3, #16]
 800b858:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b85c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b85e:	04d9      	lsls	r1, r3, #19
 800b860:	4b63      	ldr	r3, [pc, #396]	; (800b9f0 <USB_HC_StartXfer+0x280>)
 800b862:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b864:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	7a9b      	ldrb	r3, [r3, #10]
 800b86a:	075b      	lsls	r3, r3, #29
 800b86c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b870:	69f9      	ldr	r1, [r7, #28]
 800b872:	0148      	lsls	r0, r1, #5
 800b874:	6a39      	ldr	r1, [r7, #32]
 800b876:	4401      	add	r1, r0
 800b878:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b87c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b87e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b880:	79fb      	ldrb	r3, [r7, #7]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d009      	beq.n	800b89a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	68d9      	ldr	r1, [r3, #12]
 800b88a:	69fb      	ldr	r3, [r7, #28]
 800b88c:	015a      	lsls	r2, r3, #5
 800b88e:	6a3b      	ldr	r3, [r7, #32]
 800b890:	4413      	add	r3, r2
 800b892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b896:	460a      	mov	r2, r1
 800b898:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b89a:	6a3b      	ldr	r3, [r7, #32]
 800b89c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8a0:	689b      	ldr	r3, [r3, #8]
 800b8a2:	f003 0301 	and.w	r3, r3, #1
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	bf0c      	ite	eq
 800b8aa:	2301      	moveq	r3, #1
 800b8ac:	2300      	movne	r3, #0
 800b8ae:	b2db      	uxtb	r3, r3
 800b8b0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b8b2:	69fb      	ldr	r3, [r7, #28]
 800b8b4:	015a      	lsls	r2, r3, #5
 800b8b6:	6a3b      	ldr	r3, [r7, #32]
 800b8b8:	4413      	add	r3, r2
 800b8ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	69fa      	ldr	r2, [r7, #28]
 800b8c2:	0151      	lsls	r1, r2, #5
 800b8c4:	6a3a      	ldr	r2, [r7, #32]
 800b8c6:	440a      	add	r2, r1
 800b8c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b8cc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b8d0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b8d2:	69fb      	ldr	r3, [r7, #28]
 800b8d4:	015a      	lsls	r2, r3, #5
 800b8d6:	6a3b      	ldr	r3, [r7, #32]
 800b8d8:	4413      	add	r3, r2
 800b8da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	7e7b      	ldrb	r3, [r7, #25]
 800b8e2:	075b      	lsls	r3, r3, #29
 800b8e4:	69f9      	ldr	r1, [r7, #28]
 800b8e6:	0148      	lsls	r0, r1, #5
 800b8e8:	6a39      	ldr	r1, [r7, #32]
 800b8ea:	4401      	add	r1, r0
 800b8ec:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800b8f0:	4313      	orrs	r3, r2
 800b8f2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b8f4:	69fb      	ldr	r3, [r7, #28]
 800b8f6:	015a      	lsls	r2, r3, #5
 800b8f8:	6a3b      	ldr	r3, [r7, #32]
 800b8fa:	4413      	add	r3, r2
 800b8fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b90a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	78db      	ldrb	r3, [r3, #3]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d004      	beq.n	800b91e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b91a:	613b      	str	r3, [r7, #16]
 800b91c:	e003      	b.n	800b926 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b924:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b92c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	015a      	lsls	r2, r3, #5
 800b932:	6a3b      	ldr	r3, [r7, #32]
 800b934:	4413      	add	r3, r2
 800b936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b93a:	461a      	mov	r2, r3
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b940:	79fb      	ldrb	r3, [r7, #7]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d001      	beq.n	800b94a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800b946:	2300      	movs	r3, #0
 800b948:	e04e      	b.n	800b9e8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	78db      	ldrb	r3, [r3, #3]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d149      	bne.n	800b9e6 <USB_HC_StartXfer+0x276>
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	695b      	ldr	r3, [r3, #20]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d045      	beq.n	800b9e6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	79db      	ldrb	r3, [r3, #7]
 800b95e:	2b03      	cmp	r3, #3
 800b960:	d830      	bhi.n	800b9c4 <USB_HC_StartXfer+0x254>
 800b962:	a201      	add	r2, pc, #4	; (adr r2, 800b968 <USB_HC_StartXfer+0x1f8>)
 800b964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b968:	0800b979 	.word	0x0800b979
 800b96c:	0800b99d 	.word	0x0800b99d
 800b970:	0800b979 	.word	0x0800b979
 800b974:	0800b99d 	.word	0x0800b99d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	695b      	ldr	r3, [r3, #20]
 800b97c:	3303      	adds	r3, #3
 800b97e:	089b      	lsrs	r3, r3, #2
 800b980:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b982:	8afa      	ldrh	r2, [r7, #22]
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b988:	b29b      	uxth	r3, r3
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d91c      	bls.n	800b9c8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	699b      	ldr	r3, [r3, #24]
 800b992:	f043 0220 	orr.w	r2, r3, #32
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	619a      	str	r2, [r3, #24]
        }
        break;
 800b99a:	e015      	b.n	800b9c8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	695b      	ldr	r3, [r3, #20]
 800b9a0:	3303      	adds	r3, #3
 800b9a2:	089b      	lsrs	r3, r3, #2
 800b9a4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b9a6:	8afa      	ldrh	r2, [r7, #22]
 800b9a8:	6a3b      	ldr	r3, [r7, #32]
 800b9aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9ae:	691b      	ldr	r3, [r3, #16]
 800b9b0:	b29b      	uxth	r3, r3
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d90a      	bls.n	800b9cc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	699b      	ldr	r3, [r3, #24]
 800b9ba:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	619a      	str	r2, [r3, #24]
        }
        break;
 800b9c2:	e003      	b.n	800b9cc <USB_HC_StartXfer+0x25c>

      default:
        break;
 800b9c4:	bf00      	nop
 800b9c6:	e002      	b.n	800b9ce <USB_HC_StartXfer+0x25e>
        break;
 800b9c8:	bf00      	nop
 800b9ca:	e000      	b.n	800b9ce <USB_HC_StartXfer+0x25e>
        break;
 800b9cc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	68d9      	ldr	r1, [r3, #12]
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	785a      	ldrb	r2, [r3, #1]
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	695b      	ldr	r3, [r3, #20]
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	2000      	movs	r0, #0
 800b9de:	9000      	str	r0, [sp, #0]
 800b9e0:	68f8      	ldr	r0, [r7, #12]
 800b9e2:	f7ff fb3d 	bl	800b060 <USB_WritePacket>
  }

  return HAL_OK;
 800b9e6:	2300      	movs	r3, #0
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3728      	adds	r7, #40	; 0x28
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}
 800b9f0:	1ff80000 	.word	0x1ff80000

0800b9f4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b085      	sub	sp, #20
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba06:	695b      	ldr	r3, [r3, #20]
 800ba08:	b29b      	uxth	r3, r3
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3714      	adds	r7, #20
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr

0800ba16 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ba16:	b480      	push	{r7}
 800ba18:	b089      	sub	sp, #36	; 0x24
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6078      	str	r0, [r7, #4]
 800ba1e:	460b      	mov	r3, r1
 800ba20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800ba26:	78fb      	ldrb	r3, [r7, #3]
 800ba28:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ba2e:	69bb      	ldr	r3, [r7, #24]
 800ba30:	015a      	lsls	r2, r3, #5
 800ba32:	69fb      	ldr	r3, [r7, #28]
 800ba34:	4413      	add	r3, r2
 800ba36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	0c9b      	lsrs	r3, r3, #18
 800ba3e:	f003 0303 	and.w	r3, r3, #3
 800ba42:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800ba44:	69bb      	ldr	r3, [r7, #24]
 800ba46:	015a      	lsls	r2, r3, #5
 800ba48:	69fb      	ldr	r3, [r7, #28]
 800ba4a:	4413      	add	r3, r2
 800ba4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	0fdb      	lsrs	r3, r3, #31
 800ba54:	f003 0301 	and.w	r3, r3, #1
 800ba58:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	f003 0320 	and.w	r3, r3, #32
 800ba62:	2b20      	cmp	r3, #32
 800ba64:	d104      	bne.n	800ba70 <USB_HC_Halt+0x5a>
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d101      	bne.n	800ba70 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	e0c6      	b.n	800bbfe <USB_HC_Halt+0x1e8>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d002      	beq.n	800ba7c <USB_HC_Halt+0x66>
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	2b02      	cmp	r3, #2
 800ba7a:	d162      	bne.n	800bb42 <USB_HC_Halt+0x12c>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ba7c:	69bb      	ldr	r3, [r7, #24]
 800ba7e:	015a      	lsls	r2, r3, #5
 800ba80:	69fb      	ldr	r3, [r7, #28]
 800ba82:	4413      	add	r3, r2
 800ba84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	69ba      	ldr	r2, [r7, #24]
 800ba8c:	0151      	lsls	r1, r2, #5
 800ba8e:	69fa      	ldr	r2, [r7, #28]
 800ba90:	440a      	add	r2, r1
 800ba92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ba96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ba9a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	f003 0320 	and.w	r3, r3, #32
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	f040 80a9 	bne.w	800bbfc <USB_HC_Halt+0x1e6>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d132      	bne.n	800bb1c <USB_HC_Halt+0x106>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bab6:	69bb      	ldr	r3, [r7, #24]
 800bab8:	015a      	lsls	r2, r3, #5
 800baba:	69fb      	ldr	r3, [r7, #28]
 800babc:	4413      	add	r3, r2
 800babe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	69ba      	ldr	r2, [r7, #24]
 800bac6:	0151      	lsls	r1, r2, #5
 800bac8:	69fa      	ldr	r2, [r7, #28]
 800baca:	440a      	add	r2, r1
 800bacc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bad0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bad4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bad6:	69bb      	ldr	r3, [r7, #24]
 800bad8:	015a      	lsls	r2, r3, #5
 800bada:	69fb      	ldr	r3, [r7, #28]
 800badc:	4413      	add	r3, r2
 800bade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	69ba      	ldr	r2, [r7, #24]
 800bae6:	0151      	lsls	r1, r2, #5
 800bae8:	69fa      	ldr	r2, [r7, #28]
 800baea:	440a      	add	r2, r1
 800baec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800baf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800baf4:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	3301      	adds	r3, #1
 800bafa:	60fb      	str	r3, [r7, #12]
 800bafc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb00:	d81d      	bhi.n	800bb3e <USB_HC_Halt+0x128>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	015a      	lsls	r2, r3, #5
 800bb06:	69fb      	ldr	r3, [r7, #28]
 800bb08:	4413      	add	r3, r2
 800bb0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb18:	d0ed      	beq.n	800baf6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bb1a:	e06f      	b.n	800bbfc <USB_HC_Halt+0x1e6>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bb1c:	69bb      	ldr	r3, [r7, #24]
 800bb1e:	015a      	lsls	r2, r3, #5
 800bb20:	69fb      	ldr	r3, [r7, #28]
 800bb22:	4413      	add	r3, r2
 800bb24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	69ba      	ldr	r2, [r7, #24]
 800bb2c:	0151      	lsls	r1, r2, #5
 800bb2e:	69fa      	ldr	r2, [r7, #28]
 800bb30:	440a      	add	r2, r1
 800bb32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bb3a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bb3c:	e05e      	b.n	800bbfc <USB_HC_Halt+0x1e6>
            break;
 800bb3e:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bb40:	e05c      	b.n	800bbfc <USB_HC_Halt+0x1e6>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bb42:	69bb      	ldr	r3, [r7, #24]
 800bb44:	015a      	lsls	r2, r3, #5
 800bb46:	69fb      	ldr	r3, [r7, #28]
 800bb48:	4413      	add	r3, r2
 800bb4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	69ba      	ldr	r2, [r7, #24]
 800bb52:	0151      	lsls	r1, r2, #5
 800bb54:	69fa      	ldr	r2, [r7, #28]
 800bb56:	440a      	add	r2, r1
 800bb58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb60:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800bb62:	69fb      	ldr	r3, [r7, #28]
 800bb64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb68:	691b      	ldr	r3, [r3, #16]
 800bb6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d132      	bne.n	800bbd8 <USB_HC_Halt+0x1c2>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bb72:	69bb      	ldr	r3, [r7, #24]
 800bb74:	015a      	lsls	r2, r3, #5
 800bb76:	69fb      	ldr	r3, [r7, #28]
 800bb78:	4413      	add	r3, r2
 800bb7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	69ba      	ldr	r2, [r7, #24]
 800bb82:	0151      	lsls	r1, r2, #5
 800bb84:	69fa      	ldr	r2, [r7, #28]
 800bb86:	440a      	add	r2, r1
 800bb88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb90:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bb92:	69bb      	ldr	r3, [r7, #24]
 800bb94:	015a      	lsls	r2, r3, #5
 800bb96:	69fb      	ldr	r3, [r7, #28]
 800bb98:	4413      	add	r3, r2
 800bb9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	69ba      	ldr	r2, [r7, #24]
 800bba2:	0151      	lsls	r1, r2, #5
 800bba4:	69fa      	ldr	r2, [r7, #28]
 800bba6:	440a      	add	r2, r1
 800bba8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bbac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bbb0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	60fb      	str	r3, [r7, #12]
 800bbb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bbbc:	d81d      	bhi.n	800bbfa <USB_HC_Halt+0x1e4>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bbbe:	69bb      	ldr	r3, [r7, #24]
 800bbc0:	015a      	lsls	r2, r3, #5
 800bbc2:	69fb      	ldr	r3, [r7, #28]
 800bbc4:	4413      	add	r3, r2
 800bbc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bbd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bbd4:	d0ed      	beq.n	800bbb2 <USB_HC_Halt+0x19c>
 800bbd6:	e011      	b.n	800bbfc <USB_HC_Halt+0x1e6>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	015a      	lsls	r2, r3, #5
 800bbdc:	69fb      	ldr	r3, [r7, #28]
 800bbde:	4413      	add	r3, r2
 800bbe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	69ba      	ldr	r2, [r7, #24]
 800bbe8:	0151      	lsls	r1, r2, #5
 800bbea:	69fa      	ldr	r2, [r7, #28]
 800bbec:	440a      	add	r2, r1
 800bbee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bbf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bbf6:	6013      	str	r3, [r2, #0]
 800bbf8:	e000      	b.n	800bbfc <USB_HC_Halt+0x1e6>
          break;
 800bbfa:	bf00      	nop
    }
  }

  return HAL_OK;
 800bbfc:	2300      	movs	r3, #0
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3724      	adds	r7, #36	; 0x24
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr
	...

0800bc0c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b087      	sub	sp, #28
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	460b      	mov	r3, r1
 800bc16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800bc1c:	78fb      	ldrb	r3, [r7, #3]
 800bc1e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800bc20:	2301      	movs	r3, #1
 800bc22:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	04da      	lsls	r2, r3, #19
 800bc28:	4b15      	ldr	r3, [pc, #84]	; (800bc80 <USB_DoPing+0x74>)
 800bc2a:	4013      	ands	r3, r2
 800bc2c:	693a      	ldr	r2, [r7, #16]
 800bc2e:	0151      	lsls	r1, r2, #5
 800bc30:	697a      	ldr	r2, [r7, #20]
 800bc32:	440a      	add	r2, r1
 800bc34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bc3c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	015a      	lsls	r2, r3, #5
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	4413      	add	r3, r2
 800bc46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bc54:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bc5c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	015a      	lsls	r2, r3, #5
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	4413      	add	r3, r2
 800bc66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800bc70:	2300      	movs	r3, #0
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	371c      	adds	r7, #28
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr
 800bc7e:	bf00      	nop
 800bc80:	1ff80000 	.word	0x1ff80000

0800bc84 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b088      	sub	sp, #32
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800bc94:	2300      	movs	r3, #0
 800bc96:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f7ff f924 	bl	800aee6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bc9e:	2110      	movs	r1, #16
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f7ff f97d 	bl	800afa0 <USB_FlushTxFifo>
 800bca6:	4603      	mov	r3, r0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d001      	beq.n	800bcb0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800bcac:	2301      	movs	r3, #1
 800bcae:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f7ff f9a7 	bl	800b004 <USB_FlushRxFifo>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d001      	beq.n	800bcc0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	61bb      	str	r3, [r7, #24]
 800bcc4:	e01f      	b.n	800bd06 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800bcc6:	69bb      	ldr	r3, [r7, #24]
 800bcc8:	015a      	lsls	r2, r3, #5
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	4413      	add	r3, r2
 800bcce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bcdc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bce4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bcec:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800bcee:	69bb      	ldr	r3, [r7, #24]
 800bcf0:	015a      	lsls	r2, r3, #5
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	3301      	adds	r3, #1
 800bd04:	61bb      	str	r3, [r7, #24]
 800bd06:	69bb      	ldr	r3, [r7, #24]
 800bd08:	2b0f      	cmp	r3, #15
 800bd0a:	d9dc      	bls.n	800bcc6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	61bb      	str	r3, [r7, #24]
 800bd10:	e033      	b.n	800bd7a <USB_StopHost+0xf6>
  {
    value = USBx_HC(i)->HCCHAR;
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	015a      	lsls	r2, r3, #5
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	4413      	add	r3, r2
 800bd1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd28:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bd30:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bd38:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	015a      	lsls	r2, r3, #5
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	4413      	add	r3, r2
 800bd42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd46:	461a      	mov	r2, r3
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	3301      	adds	r3, #1
 800bd50:	60fb      	str	r3, [r7, #12]
 800bd52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd56:	d80c      	bhi.n	800bd72 <USB_StopHost+0xee>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bd58:	69bb      	ldr	r3, [r7, #24]
 800bd5a:	015a      	lsls	r2, r3, #5
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	4413      	add	r3, r2
 800bd60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd6e:	d0ed      	beq.n	800bd4c <USB_StopHost+0xc8>
 800bd70:	e000      	b.n	800bd74 <USB_StopHost+0xf0>
        break;
 800bd72:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800bd74:	69bb      	ldr	r3, [r7, #24]
 800bd76:	3301      	adds	r3, #1
 800bd78:	61bb      	str	r3, [r7, #24]
 800bd7a:	69bb      	ldr	r3, [r7, #24]
 800bd7c:	2b0f      	cmp	r3, #15
 800bd7e:	d9c8      	bls.n	800bd12 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd86:	461a      	mov	r2, r3
 800bd88:	f04f 33ff 	mov.w	r3, #4294967295
 800bd8c:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f04f 32ff 	mov.w	r2, #4294967295
 800bd94:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f7ff f894 	bl	800aec4 <USB_EnableGlobalInt>

  return ret;
 800bd9c:	7ffb      	ldrb	r3, [r7, #31]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3720      	adds	r7, #32
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}

0800bda6 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800bda6:	b590      	push	{r4, r7, lr}
 800bda8:	b089      	sub	sp, #36	; 0x24
 800bdaa:	af04      	add	r7, sp, #16
 800bdac:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800bdae:	2301      	movs	r3, #1
 800bdb0:	2202      	movs	r2, #2
 800bdb2:	2102      	movs	r1, #2
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f000 fccd 	bl	800c754 <USBH_FindInterface>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800bdbe:	7bfb      	ldrb	r3, [r7, #15]
 800bdc0:	2bff      	cmp	r3, #255	; 0xff
 800bdc2:	d002      	beq.n	800bdca <USBH_CDC_InterfaceInit+0x24>
 800bdc4:	7bfb      	ldrb	r3, [r7, #15]
 800bdc6:	2b01      	cmp	r3, #1
 800bdc8:	d901      	bls.n	800bdce <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800bdca:	2302      	movs	r3, #2
 800bdcc:	e13d      	b.n	800c04a <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800bdce:	7bfb      	ldrb	r3, [r7, #15]
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 fca2 	bl	800c71c <USBH_SelectInterface>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800bddc:	7bbb      	ldrb	r3, [r7, #14]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d001      	beq.n	800bde6 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800bde2:	2302      	movs	r3, #2
 800bde4:	e131      	b.n	800c04a <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800bdec:	2050      	movs	r0, #80	; 0x50
 800bdee:	f002 fb47 	bl	800e480 <malloc>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bdfc:	69db      	ldr	r3, [r3, #28]
 800bdfe:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d101      	bne.n	800be0a <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800be06:	2302      	movs	r3, #2
 800be08:	e11f      	b.n	800c04a <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800be0a:	2250      	movs	r2, #80	; 0x50
 800be0c:	2100      	movs	r1, #0
 800be0e:	68b8      	ldr	r0, [r7, #8]
 800be10:	f002 fb46 	bl	800e4a0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800be14:	7bfb      	ldrb	r3, [r7, #15]
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	211a      	movs	r1, #26
 800be1a:	fb01 f303 	mul.w	r3, r1, r3
 800be1e:	4413      	add	r3, r2
 800be20:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	b25b      	sxtb	r3, r3
 800be28:	2b00      	cmp	r3, #0
 800be2a:	da15      	bge.n	800be58 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800be2c:	7bfb      	ldrb	r3, [r7, #15]
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	211a      	movs	r1, #26
 800be32:	fb01 f303 	mul.w	r3, r1, r3
 800be36:	4413      	add	r3, r2
 800be38:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800be3c:	781a      	ldrb	r2, [r3, #0]
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800be42:	7bfb      	ldrb	r3, [r7, #15]
 800be44:	687a      	ldr	r2, [r7, #4]
 800be46:	211a      	movs	r1, #26
 800be48:	fb01 f303 	mul.w	r3, r1, r3
 800be4c:	4413      	add	r3, r2
 800be4e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800be52:	881a      	ldrh	r2, [r3, #0]
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	785b      	ldrb	r3, [r3, #1]
 800be5c:	4619      	mov	r1, r3
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f001 fe99 	bl	800db96 <USBH_AllocPipe>
 800be64:	4603      	mov	r3, r0
 800be66:	461a      	mov	r2, r3
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	7819      	ldrb	r1, [r3, #0]
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	7858      	ldrb	r0, [r3, #1]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800be80:	68ba      	ldr	r2, [r7, #8]
 800be82:	8952      	ldrh	r2, [r2, #10]
 800be84:	9202      	str	r2, [sp, #8]
 800be86:	2203      	movs	r2, #3
 800be88:	9201      	str	r2, [sp, #4]
 800be8a:	9300      	str	r3, [sp, #0]
 800be8c:	4623      	mov	r3, r4
 800be8e:	4602      	mov	r2, r0
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f001 fe51 	bl	800db38 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	781b      	ldrb	r3, [r3, #0]
 800be9a:	2200      	movs	r2, #0
 800be9c:	4619      	mov	r1, r3
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f002 fa40 	bl	800e324 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800bea4:	2300      	movs	r3, #0
 800bea6:	2200      	movs	r2, #0
 800bea8:	210a      	movs	r1, #10
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 fc52 	bl	800c754 <USBH_FindInterface>
 800beb0:	4603      	mov	r3, r0
 800beb2:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800beb4:	7bfb      	ldrb	r3, [r7, #15]
 800beb6:	2bff      	cmp	r3, #255	; 0xff
 800beb8:	d002      	beq.n	800bec0 <USBH_CDC_InterfaceInit+0x11a>
 800beba:	7bfb      	ldrb	r3, [r7, #15]
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d901      	bls.n	800bec4 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800bec0:	2302      	movs	r3, #2
 800bec2:	e0c2      	b.n	800c04a <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800bec4:	7bfb      	ldrb	r3, [r7, #15]
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	211a      	movs	r1, #26
 800beca:	fb01 f303 	mul.w	r3, r1, r3
 800bece:	4413      	add	r3, r2
 800bed0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	b25b      	sxtb	r3, r3
 800bed8:	2b00      	cmp	r3, #0
 800beda:	da16      	bge.n	800bf0a <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bedc:	7bfb      	ldrb	r3, [r7, #15]
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	211a      	movs	r1, #26
 800bee2:	fb01 f303 	mul.w	r3, r1, r3
 800bee6:	4413      	add	r3, r2
 800bee8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800beec:	781a      	ldrb	r2, [r3, #0]
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bef2:	7bfb      	ldrb	r3, [r7, #15]
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	211a      	movs	r1, #26
 800bef8:	fb01 f303 	mul.w	r3, r1, r3
 800befc:	4413      	add	r3, r2
 800befe:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800bf02:	881a      	ldrh	r2, [r3, #0]
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	835a      	strh	r2, [r3, #26]
 800bf08:	e015      	b.n	800bf36 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bf0a:	7bfb      	ldrb	r3, [r7, #15]
 800bf0c:	687a      	ldr	r2, [r7, #4]
 800bf0e:	211a      	movs	r1, #26
 800bf10:	fb01 f303 	mul.w	r3, r1, r3
 800bf14:	4413      	add	r3, r2
 800bf16:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bf1a:	781a      	ldrb	r2, [r3, #0]
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bf20:	7bfb      	ldrb	r3, [r7, #15]
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	211a      	movs	r1, #26
 800bf26:	fb01 f303 	mul.w	r3, r1, r3
 800bf2a:	4413      	add	r3, r2
 800bf2c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800bf30:	881a      	ldrh	r2, [r3, #0]
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800bf36:	7bfb      	ldrb	r3, [r7, #15]
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	211a      	movs	r1, #26
 800bf3c:	fb01 f303 	mul.w	r3, r1, r3
 800bf40:	4413      	add	r3, r2
 800bf42:	f203 3356 	addw	r3, r3, #854	; 0x356
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	b25b      	sxtb	r3, r3
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	da16      	bge.n	800bf7c <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800bf4e:	7bfb      	ldrb	r3, [r7, #15]
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	211a      	movs	r1, #26
 800bf54:	fb01 f303 	mul.w	r3, r1, r3
 800bf58:	4413      	add	r3, r2
 800bf5a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800bf5e:	781a      	ldrb	r2, [r3, #0]
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800bf64:	7bfb      	ldrb	r3, [r7, #15]
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	211a      	movs	r1, #26
 800bf6a:	fb01 f303 	mul.w	r3, r1, r3
 800bf6e:	4413      	add	r3, r2
 800bf70:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800bf74:	881a      	ldrh	r2, [r3, #0]
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	835a      	strh	r2, [r3, #26]
 800bf7a:	e015      	b.n	800bfa8 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800bf7c:	7bfb      	ldrb	r3, [r7, #15]
 800bf7e:	687a      	ldr	r2, [r7, #4]
 800bf80:	211a      	movs	r1, #26
 800bf82:	fb01 f303 	mul.w	r3, r1, r3
 800bf86:	4413      	add	r3, r2
 800bf88:	f203 3356 	addw	r3, r3, #854	; 0x356
 800bf8c:	781a      	ldrb	r2, [r3, #0]
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800bf92:	7bfb      	ldrb	r3, [r7, #15]
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	211a      	movs	r1, #26
 800bf98:	fb01 f303 	mul.w	r3, r1, r3
 800bf9c:	4413      	add	r3, r2
 800bf9e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800bfa2:	881a      	ldrh	r2, [r3, #0]
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	7b9b      	ldrb	r3, [r3, #14]
 800bfac:	4619      	mov	r1, r3
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f001 fdf1 	bl	800db96 <USBH_AllocPipe>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	7bdb      	ldrb	r3, [r3, #15]
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f001 fde7 	bl	800db96 <USBH_AllocPipe>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	461a      	mov	r2, r3
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	7b59      	ldrb	r1, [r3, #13]
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	7b98      	ldrb	r0, [r3, #14]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bfe4:	68ba      	ldr	r2, [r7, #8]
 800bfe6:	8b12      	ldrh	r2, [r2, #24]
 800bfe8:	9202      	str	r2, [sp, #8]
 800bfea:	2202      	movs	r2, #2
 800bfec:	9201      	str	r2, [sp, #4]
 800bfee:	9300      	str	r3, [sp, #0]
 800bff0:	4623      	mov	r3, r4
 800bff2:	4602      	mov	r2, r0
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f001 fd9f 	bl	800db38 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	7b19      	ldrb	r1, [r3, #12]
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	7bd8      	ldrb	r0, [r3, #15]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c00e:	68ba      	ldr	r2, [r7, #8]
 800c010:	8b52      	ldrh	r2, [r2, #26]
 800c012:	9202      	str	r2, [sp, #8]
 800c014:	2202      	movs	r2, #2
 800c016:	9201      	str	r2, [sp, #4]
 800c018:	9300      	str	r3, [sp, #0]
 800c01a:	4623      	mov	r3, r4
 800c01c:	4602      	mov	r2, r0
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f001 fd8a 	bl	800db38 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	2200      	movs	r2, #0
 800c028:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	7b5b      	ldrb	r3, [r3, #13]
 800c030:	2200      	movs	r2, #0
 800c032:	4619      	mov	r1, r3
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f002 f975 	bl	800e324 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	7b1b      	ldrb	r3, [r3, #12]
 800c03e:	2200      	movs	r2, #0
 800c040:	4619      	mov	r1, r3
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f002 f96e 	bl	800e324 <USBH_LL_SetToggle>

  return USBH_OK;
 800c048:	2300      	movs	r3, #0
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3714      	adds	r7, #20
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd90      	pop	{r4, r7, pc}

0800c052 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800c052:	b580      	push	{r7, lr}
 800c054:	b084      	sub	sp, #16
 800c056:	af00      	add	r7, sp, #0
 800c058:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c060:	69db      	ldr	r3, [r3, #28]
 800c062:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d00e      	beq.n	800c08a <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	781b      	ldrb	r3, [r3, #0]
 800c070:	4619      	mov	r1, r3
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f001 fd7f 	bl	800db76 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	4619      	mov	r1, r3
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f001 fdaa 	bl	800dbd8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2200      	movs	r2, #0
 800c088:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	7b1b      	ldrb	r3, [r3, #12]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d00e      	beq.n	800c0b0 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	7b1b      	ldrb	r3, [r3, #12]
 800c096:	4619      	mov	r1, r3
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f001 fd6c 	bl	800db76 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	7b1b      	ldrb	r3, [r3, #12]
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f001 fd97 	bl	800dbd8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	7b5b      	ldrb	r3, [r3, #13]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d00e      	beq.n	800c0d6 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	7b5b      	ldrb	r3, [r3, #13]
 800c0bc:	4619      	mov	r1, r3
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f001 fd59 	bl	800db76 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	7b5b      	ldrb	r3, [r3, #13]
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f001 fd84 	bl	800dbd8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0dc:	69db      	ldr	r3, [r3, #28]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d00b      	beq.n	800c0fa <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0e8:	69db      	ldr	r3, [r3, #28]
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f002 f9d0 	bl	800e490 <free>
    phost->pActiveClass->pData = 0U;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c0fa:	2300      	movs	r3, #0
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3710      	adds	r7, #16
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c112:	69db      	ldr	r3, [r3, #28]
 800c114:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	3340      	adds	r3, #64	; 0x40
 800c11a:	4619      	mov	r1, r3
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f000 f8b2 	bl	800c286 <GetLineCoding>
 800c122:	4603      	mov	r3, r0
 800c124:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800c126:	7afb      	ldrb	r3, [r7, #11]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d105      	bne.n	800c138 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c132:	2102      	movs	r1, #2
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800c138:	7afb      	ldrb	r3, [r7, #11]
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3710      	adds	r7, #16
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
	...

0800c144 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b084      	sub	sp, #16
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c14c:	2301      	movs	r3, #1
 800c14e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800c150:	2300      	movs	r3, #0
 800c152:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c15a:	69db      	ldr	r3, [r3, #28]
 800c15c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c164:	2b04      	cmp	r3, #4
 800c166:	d877      	bhi.n	800c258 <USBH_CDC_Process+0x114>
 800c168:	a201      	add	r2, pc, #4	; (adr r2, 800c170 <USBH_CDC_Process+0x2c>)
 800c16a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c16e:	bf00      	nop
 800c170:	0800c185 	.word	0x0800c185
 800c174:	0800c18b 	.word	0x0800c18b
 800c178:	0800c1bb 	.word	0x0800c1bb
 800c17c:	0800c22f 	.word	0x0800c22f
 800c180:	0800c23d 	.word	0x0800c23d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800c184:	2300      	movs	r3, #0
 800c186:	73fb      	strb	r3, [r7, #15]
      break;
 800c188:	e06d      	b.n	800c266 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c18e:	4619      	mov	r1, r3
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f000 f897 	bl	800c2c4 <SetLineCoding>
 800c196:	4603      	mov	r3, r0
 800c198:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c19a:	7bbb      	ldrb	r3, [r7, #14]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d104      	bne.n	800c1aa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	2202      	movs	r2, #2
 800c1a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c1a8:	e058      	b.n	800c25c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800c1aa:	7bbb      	ldrb	r3, [r7, #14]
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d055      	beq.n	800c25c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	2204      	movs	r2, #4
 800c1b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c1b8:	e050      	b.n	800c25c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	3340      	adds	r3, #64	; 0x40
 800c1be:	4619      	mov	r1, r3
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 f860 	bl	800c286 <GetLineCoding>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c1ca:	7bbb      	ldrb	r3, [r7, #14]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d126      	bne.n	800c21e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1e2:	791b      	ldrb	r3, [r3, #4]
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d13b      	bne.n	800c260 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1f2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d133      	bne.n	800c260 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c202:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c204:	429a      	cmp	r2, r3
 800c206:	d12b      	bne.n	800c260 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c210:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c212:	429a      	cmp	r2, r3
 800c214:	d124      	bne.n	800c260 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f000 f9be 	bl	800c598 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c21c:	e020      	b.n	800c260 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800c21e:	7bbb      	ldrb	r3, [r7, #14]
 800c220:	2b01      	cmp	r3, #1
 800c222:	d01d      	beq.n	800c260 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	2204      	movs	r2, #4
 800c228:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c22c:	e018      	b.n	800c260 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 f8e1 	bl	800c3f6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 f954 	bl	800c4e2 <CDC_ProcessReception>
      break;
 800c23a:	e014      	b.n	800c266 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800c23c:	2100      	movs	r1, #0
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f001 f849 	bl	800d2d6 <USBH_ClrFeature>
 800c244:	4603      	mov	r3, r0
 800c246:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c248:	7bbb      	ldrb	r3, [r7, #14]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d10a      	bne.n	800c264 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	2200      	movs	r2, #0
 800c252:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800c256:	e005      	b.n	800c264 <USBH_CDC_Process+0x120>

    default:
      break;
 800c258:	bf00      	nop
 800c25a:	e004      	b.n	800c266 <USBH_CDC_Process+0x122>
      break;
 800c25c:	bf00      	nop
 800c25e:	e002      	b.n	800c266 <USBH_CDC_Process+0x122>
      break;
 800c260:	bf00      	nop
 800c262:	e000      	b.n	800c266 <USBH_CDC_Process+0x122>
      break;
 800c264:	bf00      	nop

  }

  return status;
 800c266:	7bfb      	ldrb	r3, [r7, #15]
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3710      	adds	r7, #16
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c270:	b480      	push	{r7}
 800c272:	b083      	sub	sp, #12
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c278:	2300      	movs	r3, #0
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	370c      	adds	r7, #12
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr

0800c286 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c286:	b580      	push	{r7, lr}
 800c288:	b082      	sub	sp, #8
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	6078      	str	r0, [r7, #4]
 800c28e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	22a1      	movs	r2, #161	; 0xa1
 800c294:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2221      	movs	r2, #33	; 0x21
 800c29a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2207      	movs	r2, #7
 800c2ac:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	2207      	movs	r2, #7
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f001 f9ee 	bl	800d696 <USBH_CtlReq>
 800c2ba:	4603      	mov	r3, r0
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3708      	adds	r7, #8
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2221      	movs	r2, #33	; 0x21
 800c2d2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2220      	movs	r2, #32
 800c2d8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2207      	movs	r2, #7
 800c2ea:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	2207      	movs	r2, #7
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f001 f9cf 	bl	800d696 <USBH_CtlReq>
 800c2f8:	4603      	mov	r3, r0
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3708      	adds	r7, #8
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}

0800c302 <USBH_CDC_GetLastReceivedDataSize>:
  * @brief  This function return last received data size
  * @param  None
  * @retval None
  */
uint16_t USBH_CDC_GetLastReceivedDataSize(USBH_HandleTypeDef *phost)
{
 800c302:	b580      	push	{r7, lr}
 800c304:	b084      	sub	sp, #16
 800c306:	af00      	add	r7, sp, #0
 800c308:	6078      	str	r0, [r7, #4]
  uint32_t dataSize;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c310:	69db      	ldr	r3, [r3, #28]
 800c312:	60bb      	str	r3, [r7, #8]

  if (phost->gState == HOST_CLASS)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	781b      	ldrb	r3, [r3, #0]
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	2b0b      	cmp	r3, #11
 800c31c:	d107      	bne.n	800c32e <USBH_CDC_GetLastReceivedDataSize+0x2c>
  {
    dataSize = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	7b1b      	ldrb	r3, [r3, #12]
 800c322:	4619      	mov	r1, r3
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f001 ff41 	bl	800e1ac <USBH_LL_GetLastXferSize>
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	e001      	b.n	800c332 <USBH_CDC_GetLastReceivedDataSize+0x30>
  }
  else
  {
    dataSize =  0U;
 800c32e:	2300      	movs	r3, #0
 800c330:	60fb      	str	r3, [r7, #12]
  }

  return (uint16_t)dataSize;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	b29b      	uxth	r3, r3
}
 800c336:	4618      	mov	r0, r3
 800c338:	3710      	adds	r7, #16
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}

0800c33e <USBH_CDC_Transmit>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800c33e:	b480      	push	{r7}
 800c340:	b087      	sub	sp, #28
 800c342:	af00      	add	r7, sp, #0
 800c344:	60f8      	str	r0, [r7, #12]
 800c346:	60b9      	str	r1, [r7, #8]
 800c348:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c34a:	2301      	movs	r3, #1
 800c34c:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c354:	69db      	ldr	r3, [r3, #28]
 800c356:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d004      	beq.n	800c36c <USBH_CDC_Transmit+0x2e>
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c368:	2b03      	cmp	r3, #3
 800c36a:	d10f      	bne.n	800c38c <USBH_CDC_Transmit+0x4e>
  {
    CDC_Handle->pTxData = pbuff;
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	68ba      	ldr	r2, [r7, #8]
 800c370:	61da      	str	r2, [r3, #28]
    CDC_Handle->TxDataLength = length;
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	625a      	str	r2, [r3, #36]	; 0x24
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	2203      	movs	r2, #3
 800c37c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	2201      	movs	r2, #1
 800c384:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    Status = USBH_OK;
 800c388:	2300      	movs	r3, #0
 800c38a:	75fb      	strb	r3, [r7, #23]
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 800c38c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c38e:	4618      	mov	r0, r3
 800c390:	371c      	adds	r7, #28
 800c392:	46bd      	mov	sp, r7
 800c394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c398:	4770      	bx	lr

0800c39a <USBH_CDC_Receive>:
* @brief  This function prepares the state before issuing the class specific commands
* @param  None
* @retval None
*/
USBH_StatusTypeDef  USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800c39a:	b480      	push	{r7}
 800c39c:	b087      	sub	sp, #28
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	60f8      	str	r0, [r7, #12]
 800c3a2:	60b9      	str	r1, [r7, #8]
 800c3a4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c3b0:	69db      	ldr	r3, [r3, #28]
 800c3b2:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d004      	beq.n	800c3c8 <USBH_CDC_Receive+0x2e>
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c3c4:	2b03      	cmp	r3, #3
 800c3c6:	d10f      	bne.n	800c3e8 <USBH_CDC_Receive+0x4e>
  {
    CDC_Handle->pRxData = pbuff;
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	68ba      	ldr	r2, [r7, #8]
 800c3cc:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	629a      	str	r2, [r3, #40]	; 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	2203      	movs	r2, #3
 800c3d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	2203      	movs	r2, #3
 800c3e0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    Status = USBH_OK;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	75fb      	strb	r3, [r7, #23]
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 800c3e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	371c      	adds	r7, #28
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f4:	4770      	bx	lr

0800c3f6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c3f6:	b580      	push	{r7, lr}
 800c3f8:	b086      	sub	sp, #24
 800c3fa:	af02      	add	r7, sp, #8
 800c3fc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c404:	69db      	ldr	r3, [r3, #28]
 800c406:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c408:	2300      	movs	r3, #0
 800c40a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800c412:	2b01      	cmp	r3, #1
 800c414:	d002      	beq.n	800c41c <CDC_ProcessTransmission+0x26>
 800c416:	2b02      	cmp	r3, #2
 800c418:	d023      	beq.n	800c462 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800c41a:	e05e      	b.n	800c4da <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c420:	68fa      	ldr	r2, [r7, #12]
 800c422:	8b12      	ldrh	r2, [r2, #24]
 800c424:	4293      	cmp	r3, r2
 800c426:	d90b      	bls.n	800c440 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	69d9      	ldr	r1, [r3, #28]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	8b1a      	ldrh	r2, [r3, #24]
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	7b5b      	ldrb	r3, [r3, #13]
 800c434:	2001      	movs	r0, #1
 800c436:	9000      	str	r0, [sp, #0]
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f001 fb3a 	bl	800dab2 <USBH_BulkSendData>
 800c43e:	e00b      	b.n	800c458 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800c448:	b29a      	uxth	r2, r3
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	7b5b      	ldrb	r3, [r3, #13]
 800c44e:	2001      	movs	r0, #1
 800c450:	9000      	str	r0, [sp, #0]
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f001 fb2d 	bl	800dab2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	2202      	movs	r2, #2
 800c45c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800c460:	e03b      	b.n	800c4da <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	7b5b      	ldrb	r3, [r3, #13]
 800c466:	4619      	mov	r1, r3
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f001 ff31 	bl	800e2d0 <USBH_LL_GetURBState>
 800c46e:	4603      	mov	r3, r0
 800c470:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800c472:	7afb      	ldrb	r3, [r7, #11]
 800c474:	2b01      	cmp	r3, #1
 800c476:	d128      	bne.n	800c4ca <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c47c:	68fa      	ldr	r2, [r7, #12]
 800c47e:	8b12      	ldrh	r2, [r2, #24]
 800c480:	4293      	cmp	r3, r2
 800c482:	d90e      	bls.n	800c4a2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c488:	68fa      	ldr	r2, [r7, #12]
 800c48a:	8b12      	ldrh	r2, [r2, #24]
 800c48c:	1a9a      	subs	r2, r3, r2
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	69db      	ldr	r3, [r3, #28]
 800c496:	68fa      	ldr	r2, [r7, #12]
 800c498:	8b12      	ldrh	r2, [r2, #24]
 800c49a:	441a      	add	r2, r3
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	61da      	str	r2, [r3, #28]
 800c4a0:	e002      	b.n	800c4a8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d004      	beq.n	800c4ba <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800c4b8:	e00e      	b.n	800c4d8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2200      	movs	r2, #0
 800c4be:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f001 fbca 	bl	800dc5c <USBH_CDC_TransmitCallback>
      break;
 800c4c8:	e006      	b.n	800c4d8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800c4ca:	7afb      	ldrb	r3, [r7, #11]
 800c4cc:	2b02      	cmp	r3, #2
 800c4ce:	d103      	bne.n	800c4d8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800c4d8:	bf00      	nop
  }
}
 800c4da:	bf00      	nop
 800c4dc:	3710      	adds	r7, #16
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800c4e2:	b580      	push	{r7, lr}
 800c4e4:	b086      	sub	sp, #24
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c4f0:	69db      	ldr	r3, [r3, #28]
 800c4f2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800c4fe:	2b03      	cmp	r3, #3
 800c500:	d002      	beq.n	800c508 <CDC_ProcessReception+0x26>
 800c502:	2b04      	cmp	r3, #4
 800c504:	d00e      	beq.n	800c524 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800c506:	e043      	b.n	800c590 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	6a19      	ldr	r1, [r3, #32]
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	8b5a      	ldrh	r2, [r3, #26]
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	7b1b      	ldrb	r3, [r3, #12]
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f001 faf1 	bl	800dafc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	2204      	movs	r2, #4
 800c51e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800c522:	e035      	b.n	800c590 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	7b1b      	ldrb	r3, [r3, #12]
 800c528:	4619      	mov	r1, r3
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f001 fed0 	bl	800e2d0 <USBH_LL_GetURBState>
 800c530:	4603      	mov	r3, r0
 800c532:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800c534:	7cfb      	ldrb	r3, [r7, #19]
 800c536:	2b01      	cmp	r3, #1
 800c538:	d129      	bne.n	800c58e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	7b1b      	ldrb	r3, [r3, #12]
 800c53e:	4619      	mov	r1, r3
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f001 fe33 	bl	800e1ac <USBH_LL_GetLastXferSize>
 800c546:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c54c:	68fa      	ldr	r2, [r7, #12]
 800c54e:	429a      	cmp	r2, r3
 800c550:	d016      	beq.n	800c580 <CDC_ProcessReception+0x9e>
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	8b5b      	ldrh	r3, [r3, #26]
 800c556:	461a      	mov	r2, r3
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d910      	bls.n	800c580 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	1ad2      	subs	r2, r2, r3
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	6a1a      	ldr	r2, [r3, #32]
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	441a      	add	r2, r3
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	2203      	movs	r2, #3
 800c57a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800c57e:	e006      	b.n	800c58e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	2200      	movs	r2, #0
 800c584:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f001 fb71 	bl	800dc70 <USBH_CDC_ReceiveCallback>
      break;
 800c58e:	bf00      	nop
  }
}
 800c590:	bf00      	nop
 800c592:	3718      	adds	r7, #24
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}

0800c598 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800c598:	b480      	push	{r7}
 800c59a:	b083      	sub	sp, #12
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c5a0:	bf00      	nop
 800c5a2:	370c      	adds	r7, #12
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr

0800c5ac <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b084      	sub	sp, #16
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	60b9      	str	r1, [r7, #8]
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d101      	bne.n	800c5c4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c5c0:	2302      	movs	r3, #2
 800c5c2:	e029      	b.n	800c618 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	79fa      	ldrb	r2, [r7, #7]
 800c5c8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800c5dc:	68f8      	ldr	r0, [r7, #12]
 800c5de:	f000 f81f 	bl	800c620 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d003      	beq.n	800c610 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	68ba      	ldr	r2, [r7, #8]
 800c60c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800c610:	68f8      	ldr	r0, [r7, #12]
 800c612:	f001 fd17 	bl	800e044 <USBH_LL_Init>

  return USBH_OK;
 800c616:	2300      	movs	r3, #0
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3710      	adds	r7, #16
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c620:	b480      	push	{r7}
 800c622:	b085      	sub	sp, #20
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c628:	2300      	movs	r3, #0
 800c62a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c62c:	2300      	movs	r3, #0
 800c62e:	60fb      	str	r3, [r7, #12]
 800c630:	e009      	b.n	800c646 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	33e0      	adds	r3, #224	; 0xe0
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	4413      	add	r3, r2
 800c63c:	2200      	movs	r2, #0
 800c63e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	3301      	adds	r3, #1
 800c644:	60fb      	str	r3, [r7, #12]
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2b0e      	cmp	r3, #14
 800c64a:	d9f2      	bls.n	800c632 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c64c:	2300      	movs	r3, #0
 800c64e:	60fb      	str	r3, [r7, #12]
 800c650:	e009      	b.n	800c666 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	4413      	add	r3, r2
 800c658:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c65c:	2200      	movs	r2, #0
 800c65e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	3301      	adds	r3, #1
 800c664:	60fb      	str	r3, [r7, #12]
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c66c:	d3f1      	bcc.n	800c652 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2200      	movs	r2, #0
 800c672:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2200      	movs	r2, #0
 800c678:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2201      	movs	r2, #1
 800c67e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2200      	movs	r2, #0
 800c684:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2201      	movs	r2, #1
 800c68c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2240      	movs	r2, #64	; 0x40
 800c692:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2200      	movs	r2, #0
 800c698:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2200      	movs	r2, #0
 800c69e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800c6ba:	2300      	movs	r3, #0
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3714      	adds	r7, #20
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr

0800c6c8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b085      	sub	sp, #20
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d016      	beq.n	800c70a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d10e      	bne.n	800c704 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c6ec:	1c59      	adds	r1, r3, #1
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c6f4:	687a      	ldr	r2, [r7, #4]
 800c6f6:	33de      	adds	r3, #222	; 0xde
 800c6f8:	6839      	ldr	r1, [r7, #0]
 800c6fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c6fe:	2300      	movs	r3, #0
 800c700:	73fb      	strb	r3, [r7, #15]
 800c702:	e004      	b.n	800c70e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c704:	2302      	movs	r3, #2
 800c706:	73fb      	strb	r3, [r7, #15]
 800c708:	e001      	b.n	800c70e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c70a:	2302      	movs	r3, #2
 800c70c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c70e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c710:	4618      	mov	r0, r3
 800c712:	3714      	adds	r7, #20
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr

0800c71c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b085      	sub	sp, #20
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	460b      	mov	r3, r1
 800c726:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c728:	2300      	movs	r3, #0
 800c72a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c732:	78fa      	ldrb	r2, [r7, #3]
 800c734:	429a      	cmp	r2, r3
 800c736:	d204      	bcs.n	800c742 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	78fa      	ldrb	r2, [r7, #3]
 800c73c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c740:	e001      	b.n	800c746 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c742:	2302      	movs	r3, #2
 800c744:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c746:	7bfb      	ldrb	r3, [r7, #15]
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3714      	adds	r7, #20
 800c74c:	46bd      	mov	sp, r7
 800c74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c752:	4770      	bx	lr

0800c754 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c754:	b480      	push	{r7}
 800c756:	b087      	sub	sp, #28
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	4608      	mov	r0, r1
 800c75e:	4611      	mov	r1, r2
 800c760:	461a      	mov	r2, r3
 800c762:	4603      	mov	r3, r0
 800c764:	70fb      	strb	r3, [r7, #3]
 800c766:	460b      	mov	r3, r1
 800c768:	70bb      	strb	r3, [r7, #2]
 800c76a:	4613      	mov	r3, r2
 800c76c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c76e:	2300      	movs	r3, #0
 800c770:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800c772:	2300      	movs	r3, #0
 800c774:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c77c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c77e:	e025      	b.n	800c7cc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c780:	7dfb      	ldrb	r3, [r7, #23]
 800c782:	221a      	movs	r2, #26
 800c784:	fb02 f303 	mul.w	r3, r2, r3
 800c788:	3308      	adds	r3, #8
 800c78a:	68fa      	ldr	r2, [r7, #12]
 800c78c:	4413      	add	r3, r2
 800c78e:	3302      	adds	r3, #2
 800c790:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	795b      	ldrb	r3, [r3, #5]
 800c796:	78fa      	ldrb	r2, [r7, #3]
 800c798:	429a      	cmp	r2, r3
 800c79a:	d002      	beq.n	800c7a2 <USBH_FindInterface+0x4e>
 800c79c:	78fb      	ldrb	r3, [r7, #3]
 800c79e:	2bff      	cmp	r3, #255	; 0xff
 800c7a0:	d111      	bne.n	800c7c6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c7a6:	78ba      	ldrb	r2, [r7, #2]
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d002      	beq.n	800c7b2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c7ac:	78bb      	ldrb	r3, [r7, #2]
 800c7ae:	2bff      	cmp	r3, #255	; 0xff
 800c7b0:	d109      	bne.n	800c7c6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c7b6:	787a      	ldrb	r2, [r7, #1]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d002      	beq.n	800c7c2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c7bc:	787b      	ldrb	r3, [r7, #1]
 800c7be:	2bff      	cmp	r3, #255	; 0xff
 800c7c0:	d101      	bne.n	800c7c6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c7c2:	7dfb      	ldrb	r3, [r7, #23]
 800c7c4:	e006      	b.n	800c7d4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c7c6:	7dfb      	ldrb	r3, [r7, #23]
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c7cc:	7dfb      	ldrb	r3, [r7, #23]
 800c7ce:	2b01      	cmp	r3, #1
 800c7d0:	d9d6      	bls.n	800c780 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c7d2:	23ff      	movs	r3, #255	; 0xff
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	371c      	adds	r7, #28
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr

0800c7e0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b082      	sub	sp, #8
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f001 fc67 	bl	800e0bc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800c7ee:	2101      	movs	r1, #1
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f001 fd80 	bl	800e2f6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c7f6:	2300      	movs	r3, #0
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3708      	adds	r7, #8
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b088      	sub	sp, #32
 800c804:	af04      	add	r7, sp, #16
 800c806:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c808:	2302      	movs	r3, #2
 800c80a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c80c:	2300      	movs	r3, #0
 800c80e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c816:	b2db      	uxtb	r3, r3
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d102      	bne.n	800c822 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2203      	movs	r2, #3
 800c820:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	b2db      	uxtb	r3, r3
 800c828:	2b0b      	cmp	r3, #11
 800c82a:	f200 81b3 	bhi.w	800cb94 <USBH_Process+0x394>
 800c82e:	a201      	add	r2, pc, #4	; (adr r2, 800c834 <USBH_Process+0x34>)
 800c830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c834:	0800c865 	.word	0x0800c865
 800c838:	0800c897 	.word	0x0800c897
 800c83c:	0800c8ff 	.word	0x0800c8ff
 800c840:	0800cb2f 	.word	0x0800cb2f
 800c844:	0800cb95 	.word	0x0800cb95
 800c848:	0800c9a3 	.word	0x0800c9a3
 800c84c:	0800cad5 	.word	0x0800cad5
 800c850:	0800c9d9 	.word	0x0800c9d9
 800c854:	0800c9f9 	.word	0x0800c9f9
 800c858:	0800ca19 	.word	0x0800ca19
 800c85c:	0800ca47 	.word	0x0800ca47
 800c860:	0800cb17 	.word	0x0800cb17
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	f000 8193 	beq.w	800cb98 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2201      	movs	r2, #1
 800c876:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c878:	20c8      	movs	r0, #200	; 0xc8
 800c87a:	f001 fd83 	bl	800e384 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f001 fc79 	bl	800e176 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2200      	movs	r2, #0
 800c888:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2200      	movs	r2, #0
 800c890:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c894:	e180      	b.n	800cb98 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d107      	bne.n	800c8b0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2202      	movs	r2, #2
 800c8ac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c8ae:	e182      	b.n	800cbb6 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c8b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c8ba:	d914      	bls.n	800c8e6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	b2da      	uxtb	r2, r3
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c8d2:	2b03      	cmp	r3, #3
 800c8d4:	d903      	bls.n	800c8de <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	220d      	movs	r2, #13
 800c8da:	701a      	strb	r2, [r3, #0]
      break;
 800c8dc:	e16b      	b.n	800cbb6 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	701a      	strb	r2, [r3, #0]
      break;
 800c8e4:	e167      	b.n	800cbb6 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c8ec:	f103 020a 	add.w	r2, r3, #10
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800c8f6:	200a      	movs	r0, #10
 800c8f8:	f001 fd44 	bl	800e384 <USBH_Delay>
      break;
 800c8fc:	e15b      	b.n	800cbb6 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c904:	2b00      	cmp	r3, #0
 800c906:	d005      	beq.n	800c914 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c90e:	2104      	movs	r1, #4
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c914:	2064      	movs	r0, #100	; 0x64
 800c916:	f001 fd35 	bl	800e384 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f001 fc04 	bl	800e128 <USBH_LL_GetSpeed>
 800c920:	4603      	mov	r3, r0
 800c922:	461a      	mov	r2, r3
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2205      	movs	r2, #5
 800c92e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c930:	2100      	movs	r1, #0
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f001 f92f 	bl	800db96 <USBH_AllocPipe>
 800c938:	4603      	mov	r3, r0
 800c93a:	461a      	mov	r2, r3
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c940:	2180      	movs	r1, #128	; 0x80
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f001 f927 	bl	800db96 <USBH_AllocPipe>
 800c948:	4603      	mov	r3, r0
 800c94a:	461a      	mov	r2, r3
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	7919      	ldrb	r1, [r3, #4]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c960:	687a      	ldr	r2, [r7, #4]
 800c962:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c964:	b292      	uxth	r2, r2
 800c966:	9202      	str	r2, [sp, #8]
 800c968:	2200      	movs	r2, #0
 800c96a:	9201      	str	r2, [sp, #4]
 800c96c:	9300      	str	r3, [sp, #0]
 800c96e:	4603      	mov	r3, r0
 800c970:	2280      	movs	r2, #128	; 0x80
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f001 f8e0 	bl	800db38 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	7959      	ldrb	r1, [r3, #5]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c988:	687a      	ldr	r2, [r7, #4]
 800c98a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c98c:	b292      	uxth	r2, r2
 800c98e:	9202      	str	r2, [sp, #8]
 800c990:	2200      	movs	r2, #0
 800c992:	9201      	str	r2, [sp, #4]
 800c994:	9300      	str	r3, [sp, #0]
 800c996:	4603      	mov	r3, r0
 800c998:	2200      	movs	r2, #0
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f001 f8cc 	bl	800db38 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c9a0:	e109      	b.n	800cbb6 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f000 f90c 	bl	800cbc0 <USBH_HandleEnum>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c9ac:	7bbb      	ldrb	r3, [r7, #14]
 800c9ae:	b2db      	uxtb	r3, r3
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	f040 80f3 	bne.w	800cb9c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	d103      	bne.n	800c9d0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2208      	movs	r2, #8
 800c9cc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c9ce:	e0e5      	b.n	800cb9c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2207      	movs	r2, #7
 800c9d4:	701a      	strb	r2, [r3, #0]
      break;
 800c9d6:	e0e1      	b.n	800cb9c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	f000 80de 	beq.w	800cba0 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c9ea:	2101      	movs	r1, #1
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2208      	movs	r2, #8
 800c9f4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800c9f6:	e0d3      	b.n	800cba0 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	4619      	mov	r1, r3
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f000 fc20 	bl	800d248 <USBH_SetCfg>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	f040 80ca 	bne.w	800cba4 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2209      	movs	r2, #9
 800ca14:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ca16:	e0c5      	b.n	800cba4 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ca1e:	f003 0320 	and.w	r3, r3, #32
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d00b      	beq.n	800ca3e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ca26:	2101      	movs	r1, #1
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f000 fc30 	bl	800d28e <USBH_SetFeature>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	f040 80b9 	bne.w	800cba8 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	220a      	movs	r2, #10
 800ca3a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ca3c:	e0b4      	b.n	800cba8 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	220a      	movs	r2, #10
 800ca42:	701a      	strb	r2, [r3, #0]
      break;
 800ca44:	e0b0      	b.n	800cba8 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	f000 80ad 	beq.w	800cbac <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2200      	movs	r2, #0
 800ca56:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	73fb      	strb	r3, [r7, #15]
 800ca5e:	e016      	b.n	800ca8e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ca60:	7bfa      	ldrb	r2, [r7, #15]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	32de      	adds	r2, #222	; 0xde
 800ca66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca6a:	791a      	ldrb	r2, [r3, #4]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d108      	bne.n	800ca88 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800ca76:	7bfa      	ldrb	r2, [r7, #15]
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	32de      	adds	r2, #222	; 0xde
 800ca7c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800ca86:	e005      	b.n	800ca94 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ca88:	7bfb      	ldrb	r3, [r7, #15]
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	73fb      	strb	r3, [r7, #15]
 800ca8e:	7bfb      	ldrb	r3, [r7, #15]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d0e5      	beq.n	800ca60 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d016      	beq.n	800cacc <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800caa4:	689b      	ldr	r3, [r3, #8]
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	4798      	blx	r3
 800caaa:	4603      	mov	r3, r0
 800caac:	2b00      	cmp	r3, #0
 800caae:	d109      	bne.n	800cac4 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2206      	movs	r2, #6
 800cab4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cabc:	2103      	movs	r1, #3
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cac2:	e073      	b.n	800cbac <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	220d      	movs	r2, #13
 800cac8:	701a      	strb	r2, [r3, #0]
      break;
 800caca:	e06f      	b.n	800cbac <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	220d      	movs	r2, #13
 800cad0:	701a      	strb	r2, [r3, #0]
      break;
 800cad2:	e06b      	b.n	800cbac <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d017      	beq.n	800cb0e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cae4:	691b      	ldr	r3, [r3, #16]
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	4798      	blx	r3
 800caea:	4603      	mov	r3, r0
 800caec:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800caee:	7bbb      	ldrb	r3, [r7, #14]
 800caf0:	b2db      	uxtb	r3, r3
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d103      	bne.n	800cafe <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	220b      	movs	r2, #11
 800cafa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cafc:	e058      	b.n	800cbb0 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800cafe:	7bbb      	ldrb	r3, [r7, #14]
 800cb00:	b2db      	uxtb	r3, r3
 800cb02:	2b02      	cmp	r3, #2
 800cb04:	d154      	bne.n	800cbb0 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	220d      	movs	r2, #13
 800cb0a:	701a      	strb	r2, [r3, #0]
      break;
 800cb0c:	e050      	b.n	800cbb0 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	220d      	movs	r2, #13
 800cb12:	701a      	strb	r2, [r3, #0]
      break;
 800cb14:	e04c      	b.n	800cbb0 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d049      	beq.n	800cbb4 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb26:	695b      	ldr	r3, [r3, #20]
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	4798      	blx	r3
      }
      break;
 800cb2c:	e042      	b.n	800cbb4 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2200      	movs	r2, #0
 800cb32:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f7ff fd72 	bl	800c620 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d009      	beq.n	800cb5a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb4c:	68db      	ldr	r3, [r3, #12]
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2200      	movs	r2, #0
 800cb56:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d005      	beq.n	800cb70 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb6a:	2105      	movs	r1, #5
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d107      	bne.n	800cb8c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f7ff fe2b 	bl	800c7e0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cb8a:	e014      	b.n	800cbb6 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f001 fa95 	bl	800e0bc <USBH_LL_Start>
      break;
 800cb92:	e010      	b.n	800cbb6 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800cb94:	bf00      	nop
 800cb96:	e00e      	b.n	800cbb6 <USBH_Process+0x3b6>
      break;
 800cb98:	bf00      	nop
 800cb9a:	e00c      	b.n	800cbb6 <USBH_Process+0x3b6>
      break;
 800cb9c:	bf00      	nop
 800cb9e:	e00a      	b.n	800cbb6 <USBH_Process+0x3b6>
    break;
 800cba0:	bf00      	nop
 800cba2:	e008      	b.n	800cbb6 <USBH_Process+0x3b6>
      break;
 800cba4:	bf00      	nop
 800cba6:	e006      	b.n	800cbb6 <USBH_Process+0x3b6>
      break;
 800cba8:	bf00      	nop
 800cbaa:	e004      	b.n	800cbb6 <USBH_Process+0x3b6>
      break;
 800cbac:	bf00      	nop
 800cbae:	e002      	b.n	800cbb6 <USBH_Process+0x3b6>
      break;
 800cbb0:	bf00      	nop
 800cbb2:	e000      	b.n	800cbb6 <USBH_Process+0x3b6>
      break;
 800cbb4:	bf00      	nop
  }
  return USBH_OK;
 800cbb6:	2300      	movs	r3, #0
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3710      	adds	r7, #16
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}

0800cbc0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b088      	sub	sp, #32
 800cbc4:	af04      	add	r7, sp, #16
 800cbc6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800cbc8:	2301      	movs	r3, #1
 800cbca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800cbcc:	2301      	movs	r3, #1
 800cbce:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	785b      	ldrb	r3, [r3, #1]
 800cbd4:	2b07      	cmp	r3, #7
 800cbd6:	f200 81c1 	bhi.w	800cf5c <USBH_HandleEnum+0x39c>
 800cbda:	a201      	add	r2, pc, #4	; (adr r2, 800cbe0 <USBH_HandleEnum+0x20>)
 800cbdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbe0:	0800cc01 	.word	0x0800cc01
 800cbe4:	0800ccbf 	.word	0x0800ccbf
 800cbe8:	0800cd29 	.word	0x0800cd29
 800cbec:	0800cdb7 	.word	0x0800cdb7
 800cbf0:	0800ce21 	.word	0x0800ce21
 800cbf4:	0800ce91 	.word	0x0800ce91
 800cbf8:	0800ced7 	.word	0x0800ced7
 800cbfc:	0800cf1d 	.word	0x0800cf1d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800cc00:	2108      	movs	r1, #8
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f000 fa50 	bl	800d0a8 <USBH_Get_DevDesc>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cc0c:	7bbb      	ldrb	r3, [r7, #14]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d130      	bne.n	800cc74 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2201      	movs	r2, #1
 800cc20:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	7919      	ldrb	r1, [r3, #4]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cc32:	687a      	ldr	r2, [r7, #4]
 800cc34:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cc36:	b292      	uxth	r2, r2
 800cc38:	9202      	str	r2, [sp, #8]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	9201      	str	r2, [sp, #4]
 800cc3e:	9300      	str	r3, [sp, #0]
 800cc40:	4603      	mov	r3, r0
 800cc42:	2280      	movs	r2, #128	; 0x80
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 ff77 	bl	800db38 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	7959      	ldrb	r1, [r3, #5]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cc5e:	b292      	uxth	r2, r2
 800cc60:	9202      	str	r2, [sp, #8]
 800cc62:	2200      	movs	r2, #0
 800cc64:	9201      	str	r2, [sp, #4]
 800cc66:	9300      	str	r3, [sp, #0]
 800cc68:	4603      	mov	r3, r0
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f000 ff63 	bl	800db38 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cc72:	e175      	b.n	800cf60 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cc74:	7bbb      	ldrb	r3, [r7, #14]
 800cc76:	2b03      	cmp	r3, #3
 800cc78:	f040 8172 	bne.w	800cf60 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cc82:	3301      	adds	r3, #1
 800cc84:	b2da      	uxtb	r2, r3
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cc92:	2b03      	cmp	r3, #3
 800cc94:	d903      	bls.n	800cc9e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	220d      	movs	r2, #13
 800cc9a:	701a      	strb	r2, [r3, #0]
      break;
 800cc9c:	e160      	b.n	800cf60 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	795b      	ldrb	r3, [r3, #5]
 800cca2:	4619      	mov	r1, r3
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f000 ff97 	bl	800dbd8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	791b      	ldrb	r3, [r3, #4]
 800ccae:	4619      	mov	r1, r3
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f000 ff91 	bl	800dbd8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	701a      	strb	r2, [r3, #0]
      break;
 800ccbc:	e150      	b.n	800cf60 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ccbe:	2112      	movs	r1, #18
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f000 f9f1 	bl	800d0a8 <USBH_Get_DevDesc>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ccca:	7bbb      	ldrb	r3, [r7, #14]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d103      	bne.n	800ccd8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2202      	movs	r2, #2
 800ccd4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ccd6:	e145      	b.n	800cf64 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ccd8:	7bbb      	ldrb	r3, [r7, #14]
 800ccda:	2b03      	cmp	r3, #3
 800ccdc:	f040 8142 	bne.w	800cf64 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cce6:	3301      	adds	r3, #1
 800cce8:	b2da      	uxtb	r2, r3
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ccf6:	2b03      	cmp	r3, #3
 800ccf8:	d903      	bls.n	800cd02 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	220d      	movs	r2, #13
 800ccfe:	701a      	strb	r2, [r3, #0]
      break;
 800cd00:	e130      	b.n	800cf64 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	795b      	ldrb	r3, [r3, #5]
 800cd06:	4619      	mov	r1, r3
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f000 ff65 	bl	800dbd8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	791b      	ldrb	r3, [r3, #4]
 800cd12:	4619      	mov	r1, r3
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f000 ff5f 	bl	800dbd8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2200      	movs	r2, #0
 800cd24:	701a      	strb	r2, [r3, #0]
      break;
 800cd26:	e11d      	b.n	800cf64 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800cd28:	2101      	movs	r1, #1
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f000 fa68 	bl	800d200 <USBH_SetAddress>
 800cd30:	4603      	mov	r3, r0
 800cd32:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cd34:	7bbb      	ldrb	r3, [r7, #14]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d132      	bne.n	800cda0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800cd3a:	2002      	movs	r0, #2
 800cd3c:	f001 fb22 	bl	800e384 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2201      	movs	r2, #1
 800cd44:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2203      	movs	r2, #3
 800cd4c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	7919      	ldrb	r1, [r3, #4]
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cd62:	b292      	uxth	r2, r2
 800cd64:	9202      	str	r2, [sp, #8]
 800cd66:	2200      	movs	r2, #0
 800cd68:	9201      	str	r2, [sp, #4]
 800cd6a:	9300      	str	r3, [sp, #0]
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	2280      	movs	r2, #128	; 0x80
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f000 fee1 	bl	800db38 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	7959      	ldrb	r1, [r3, #5]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cd86:	687a      	ldr	r2, [r7, #4]
 800cd88:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cd8a:	b292      	uxth	r2, r2
 800cd8c:	9202      	str	r2, [sp, #8]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	9201      	str	r2, [sp, #4]
 800cd92:	9300      	str	r3, [sp, #0]
 800cd94:	4603      	mov	r3, r0
 800cd96:	2200      	movs	r2, #0
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f000 fecd 	bl	800db38 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cd9e:	e0e3      	b.n	800cf68 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cda0:	7bbb      	ldrb	r3, [r7, #14]
 800cda2:	2b03      	cmp	r3, #3
 800cda4:	f040 80e0 	bne.w	800cf68 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	220d      	movs	r2, #13
 800cdac:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	705a      	strb	r2, [r3, #1]
      break;
 800cdb4:	e0d8      	b.n	800cf68 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800cdb6:	2109      	movs	r1, #9
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f000 f99d 	bl	800d0f8 <USBH_Get_CfgDesc>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cdc2:	7bbb      	ldrb	r3, [r7, #14]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d103      	bne.n	800cdd0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2204      	movs	r2, #4
 800cdcc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cdce:	e0cd      	b.n	800cf6c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cdd0:	7bbb      	ldrb	r3, [r7, #14]
 800cdd2:	2b03      	cmp	r3, #3
 800cdd4:	f040 80ca 	bne.w	800cf6c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cdde:	3301      	adds	r3, #1
 800cde0:	b2da      	uxtb	r2, r3
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cdee:	2b03      	cmp	r3, #3
 800cdf0:	d903      	bls.n	800cdfa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	220d      	movs	r2, #13
 800cdf6:	701a      	strb	r2, [r3, #0]
      break;
 800cdf8:	e0b8      	b.n	800cf6c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	795b      	ldrb	r3, [r3, #5]
 800cdfe:	4619      	mov	r1, r3
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f000 fee9 	bl	800dbd8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	791b      	ldrb	r3, [r3, #4]
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f000 fee3 	bl	800dbd8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2200      	movs	r2, #0
 800ce16:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	701a      	strb	r2, [r3, #0]
      break;
 800ce1e:	e0a5      	b.n	800cf6c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800ce26:	4619      	mov	r1, r3
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f000 f965 	bl	800d0f8 <USBH_Get_CfgDesc>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ce32:	7bbb      	ldrb	r3, [r7, #14]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d103      	bne.n	800ce40 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2205      	movs	r2, #5
 800ce3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ce3e:	e097      	b.n	800cf70 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ce40:	7bbb      	ldrb	r3, [r7, #14]
 800ce42:	2b03      	cmp	r3, #3
 800ce44:	f040 8094 	bne.w	800cf70 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ce4e:	3301      	adds	r3, #1
 800ce50:	b2da      	uxtb	r2, r3
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ce5e:	2b03      	cmp	r3, #3
 800ce60:	d903      	bls.n	800ce6a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	220d      	movs	r2, #13
 800ce66:	701a      	strb	r2, [r3, #0]
      break;
 800ce68:	e082      	b.n	800cf70 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	795b      	ldrb	r3, [r3, #5]
 800ce6e:	4619      	mov	r1, r3
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f000 feb1 	bl	800dbd8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	791b      	ldrb	r3, [r3, #4]
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f000 feab 	bl	800dbd8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2200      	movs	r2, #0
 800ce86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	701a      	strb	r2, [r3, #0]
      break;
 800ce8e:	e06f      	b.n	800cf70 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d019      	beq.n	800cece <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cea6:	23ff      	movs	r3, #255	; 0xff
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f000 f949 	bl	800d140 <USBH_Get_StringDesc>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ceb2:	7bbb      	ldrb	r3, [r7, #14]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d103      	bne.n	800cec0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2206      	movs	r2, #6
 800cebc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800cebe:	e059      	b.n	800cf74 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cec0:	7bbb      	ldrb	r3, [r7, #14]
 800cec2:	2b03      	cmp	r3, #3
 800cec4:	d156      	bne.n	800cf74 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2206      	movs	r2, #6
 800ceca:	705a      	strb	r2, [r3, #1]
      break;
 800cecc:	e052      	b.n	800cf74 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2206      	movs	r2, #6
 800ced2:	705a      	strb	r2, [r3, #1]
      break;
 800ced4:	e04e      	b.n	800cf74 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d019      	beq.n	800cf14 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ceec:	23ff      	movs	r3, #255	; 0xff
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f000 f926 	bl	800d140 <USBH_Get_StringDesc>
 800cef4:	4603      	mov	r3, r0
 800cef6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cef8:	7bbb      	ldrb	r3, [r7, #14]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d103      	bne.n	800cf06 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2207      	movs	r2, #7
 800cf02:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800cf04:	e038      	b.n	800cf78 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf06:	7bbb      	ldrb	r3, [r7, #14]
 800cf08:	2b03      	cmp	r3, #3
 800cf0a:	d135      	bne.n	800cf78 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2207      	movs	r2, #7
 800cf10:	705a      	strb	r2, [r3, #1]
      break;
 800cf12:	e031      	b.n	800cf78 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2207      	movs	r2, #7
 800cf18:	705a      	strb	r2, [r3, #1]
      break;
 800cf1a:	e02d      	b.n	800cf78 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d017      	beq.n	800cf56 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cf32:	23ff      	movs	r3, #255	; 0xff
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f000 f903 	bl	800d140 <USBH_Get_StringDesc>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cf3e:	7bbb      	ldrb	r3, [r7, #14]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d102      	bne.n	800cf4a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800cf44:	2300      	movs	r3, #0
 800cf46:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800cf48:	e018      	b.n	800cf7c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf4a:	7bbb      	ldrb	r3, [r7, #14]
 800cf4c:	2b03      	cmp	r3, #3
 800cf4e:	d115      	bne.n	800cf7c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800cf50:	2300      	movs	r3, #0
 800cf52:	73fb      	strb	r3, [r7, #15]
      break;
 800cf54:	e012      	b.n	800cf7c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800cf56:	2300      	movs	r3, #0
 800cf58:	73fb      	strb	r3, [r7, #15]
      break;
 800cf5a:	e00f      	b.n	800cf7c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800cf5c:	bf00      	nop
 800cf5e:	e00e      	b.n	800cf7e <USBH_HandleEnum+0x3be>
      break;
 800cf60:	bf00      	nop
 800cf62:	e00c      	b.n	800cf7e <USBH_HandleEnum+0x3be>
      break;
 800cf64:	bf00      	nop
 800cf66:	e00a      	b.n	800cf7e <USBH_HandleEnum+0x3be>
      break;
 800cf68:	bf00      	nop
 800cf6a:	e008      	b.n	800cf7e <USBH_HandleEnum+0x3be>
      break;
 800cf6c:	bf00      	nop
 800cf6e:	e006      	b.n	800cf7e <USBH_HandleEnum+0x3be>
      break;
 800cf70:	bf00      	nop
 800cf72:	e004      	b.n	800cf7e <USBH_HandleEnum+0x3be>
      break;
 800cf74:	bf00      	nop
 800cf76:	e002      	b.n	800cf7e <USBH_HandleEnum+0x3be>
      break;
 800cf78:	bf00      	nop
 800cf7a:	e000      	b.n	800cf7e <USBH_HandleEnum+0x3be>
      break;
 800cf7c:	bf00      	nop
  }
  return Status;
 800cf7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3710      	adds	r7, #16
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}

0800cf88 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b083      	sub	sp, #12
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
 800cf90:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	683a      	ldr	r2, [r7, #0]
 800cf96:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800cf9a:	bf00      	nop
 800cf9c:	370c      	adds	r7, #12
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa4:	4770      	bx	lr

0800cfa6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800cfa6:	b580      	push	{r7, lr}
 800cfa8:	b082      	sub	sp, #8
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cfb4:	1c5a      	adds	r2, r3, #1
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f000 f804 	bl	800cfca <USBH_HandleSof>
}
 800cfc2:	bf00      	nop
 800cfc4:	3708      	adds	r7, #8
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}

0800cfca <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800cfca:	b580      	push	{r7, lr}
 800cfcc:	b082      	sub	sp, #8
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	b2db      	uxtb	r3, r3
 800cfd8:	2b0b      	cmp	r3, #11
 800cfda:	d10a      	bne.n	800cff2 <USBH_HandleSof+0x28>
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d005      	beq.n	800cff2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cfec:	699b      	ldr	r3, [r3, #24]
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	4798      	blx	r3
  }
}
 800cff2:	bf00      	nop
 800cff4:	3708      	adds	r7, #8
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}

0800cffa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800cffa:	b480      	push	{r7}
 800cffc:	b083      	sub	sp, #12
 800cffe:	af00      	add	r7, sp, #0
 800d000:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2201      	movs	r2, #1
 800d006:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800d00a:	bf00      	nop
}
 800d00c:	370c      	adds	r7, #12
 800d00e:	46bd      	mov	sp, r7
 800d010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d014:	4770      	bx	lr

0800d016 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d016:	b480      	push	{r7}
 800d018:	b083      	sub	sp, #12
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2200      	movs	r2, #0
 800d022:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d026:	bf00      	nop
}
 800d028:	370c      	adds	r7, #12
 800d02a:	46bd      	mov	sp, r7
 800d02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d030:	4770      	bx	lr

0800d032 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d032:	b480      	push	{r7}
 800d034:	b083      	sub	sp, #12
 800d036:	af00      	add	r7, sp, #0
 800d038:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2201      	movs	r2, #1
 800d03e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2200      	movs	r2, #0
 800d046:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2200      	movs	r2, #0
 800d04e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d052:	2300      	movs	r3, #0
}
 800d054:	4618      	mov	r0, r3
 800d056:	370c      	adds	r7, #12
 800d058:	46bd      	mov	sp, r7
 800d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05e:	4770      	bx	lr

0800d060 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b082      	sub	sp, #8
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2201      	movs	r2, #1
 800d06c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2200      	movs	r2, #0
 800d074:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2200      	movs	r2, #0
 800d07c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f001 f836 	bl	800e0f2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	791b      	ldrb	r3, [r3, #4]
 800d08a:	4619      	mov	r1, r3
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f000 fda3 	bl	800dbd8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	795b      	ldrb	r3, [r3, #5]
 800d096:	4619      	mov	r1, r3
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f000 fd9d 	bl	800dbd8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d09e:	2300      	movs	r3, #0
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3708      	adds	r7, #8
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}

0800d0a8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b086      	sub	sp, #24
 800d0ac:	af02      	add	r7, sp, #8
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	460b      	mov	r3, r1
 800d0b2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d0ba:	78fb      	ldrb	r3, [r7, #3]
 800d0bc:	b29b      	uxth	r3, r3
 800d0be:	9300      	str	r3, [sp, #0]
 800d0c0:	4613      	mov	r3, r2
 800d0c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d0c6:	2100      	movs	r1, #0
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 f864 	bl	800d196 <USBH_GetDescriptor>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	73fb      	strb	r3, [r7, #15]
 800d0d2:	7bfb      	ldrb	r3, [r7, #15]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d10a      	bne.n	800d0ee <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f203 3026 	addw	r0, r3, #806	; 0x326
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d0e4:	78fa      	ldrb	r2, [r7, #3]
 800d0e6:	b292      	uxth	r2, r2
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	f000 f918 	bl	800d31e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800d0ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3710      	adds	r7, #16
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}

0800d0f8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b086      	sub	sp, #24
 800d0fc:	af02      	add	r7, sp, #8
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	460b      	mov	r3, r1
 800d102:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	331c      	adds	r3, #28
 800d108:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d10a:	887b      	ldrh	r3, [r7, #2]
 800d10c:	9300      	str	r3, [sp, #0]
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d114:	2100      	movs	r1, #0
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f000 f83d 	bl	800d196 <USBH_GetDescriptor>
 800d11c:	4603      	mov	r3, r0
 800d11e:	72fb      	strb	r3, [r7, #11]
 800d120:	7afb      	ldrb	r3, [r7, #11]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d107      	bne.n	800d136 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d12c:	887a      	ldrh	r2, [r7, #2]
 800d12e:	68f9      	ldr	r1, [r7, #12]
 800d130:	4618      	mov	r0, r3
 800d132:	f000 f964 	bl	800d3fe <USBH_ParseCfgDesc>
  }

  return status;
 800d136:	7afb      	ldrb	r3, [r7, #11]
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3710      	adds	r7, #16
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b088      	sub	sp, #32
 800d144:	af02      	add	r7, sp, #8
 800d146:	60f8      	str	r0, [r7, #12]
 800d148:	607a      	str	r2, [r7, #4]
 800d14a:	461a      	mov	r2, r3
 800d14c:	460b      	mov	r3, r1
 800d14e:	72fb      	strb	r3, [r7, #11]
 800d150:	4613      	mov	r3, r2
 800d152:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800d154:	7afb      	ldrb	r3, [r7, #11]
 800d156:	b29b      	uxth	r3, r3
 800d158:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d15c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d164:	893b      	ldrh	r3, [r7, #8]
 800d166:	9300      	str	r3, [sp, #0]
 800d168:	460b      	mov	r3, r1
 800d16a:	2100      	movs	r1, #0
 800d16c:	68f8      	ldr	r0, [r7, #12]
 800d16e:	f000 f812 	bl	800d196 <USBH_GetDescriptor>
 800d172:	4603      	mov	r3, r0
 800d174:	75fb      	strb	r3, [r7, #23]
 800d176:	7dfb      	ldrb	r3, [r7, #23]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d107      	bne.n	800d18c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d182:	893a      	ldrh	r2, [r7, #8]
 800d184:	6879      	ldr	r1, [r7, #4]
 800d186:	4618      	mov	r0, r3
 800d188:	f000 fa37 	bl	800d5fa <USBH_ParseStringDesc>
  }

  return status;
 800d18c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3718      	adds	r7, #24
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}

0800d196 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800d196:	b580      	push	{r7, lr}
 800d198:	b084      	sub	sp, #16
 800d19a:	af00      	add	r7, sp, #0
 800d19c:	60f8      	str	r0, [r7, #12]
 800d19e:	607b      	str	r3, [r7, #4]
 800d1a0:	460b      	mov	r3, r1
 800d1a2:	72fb      	strb	r3, [r7, #11]
 800d1a4:	4613      	mov	r3, r2
 800d1a6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	789b      	ldrb	r3, [r3, #2]
 800d1ac:	2b01      	cmp	r3, #1
 800d1ae:	d11c      	bne.n	800d1ea <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d1b0:	7afb      	ldrb	r3, [r7, #11]
 800d1b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d1b6:	b2da      	uxtb	r2, r3
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	2206      	movs	r2, #6
 800d1c0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	893a      	ldrh	r2, [r7, #8]
 800d1c6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d1c8:	893b      	ldrh	r3, [r7, #8]
 800d1ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d1ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d1d2:	d104      	bne.n	800d1de <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	f240 4209 	movw	r2, #1033	; 0x409
 800d1da:	829a      	strh	r2, [r3, #20]
 800d1dc:	e002      	b.n	800d1e4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	8b3a      	ldrh	r2, [r7, #24]
 800d1e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d1ea:	8b3b      	ldrh	r3, [r7, #24]
 800d1ec:	461a      	mov	r2, r3
 800d1ee:	6879      	ldr	r1, [r7, #4]
 800d1f0:	68f8      	ldr	r0, [r7, #12]
 800d1f2:	f000 fa50 	bl	800d696 <USBH_CtlReq>
 800d1f6:	4603      	mov	r3, r0
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3710      	adds	r7, #16
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}

0800d200 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	460b      	mov	r3, r1
 800d20a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	789b      	ldrb	r3, [r3, #2]
 800d210:	2b01      	cmp	r3, #1
 800d212:	d10f      	bne.n	800d234 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2200      	movs	r2, #0
 800d218:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2205      	movs	r2, #5
 800d21e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d220:	78fb      	ldrb	r3, [r7, #3]
 800d222:	b29a      	uxth	r2, r3
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2200      	movs	r2, #0
 800d22c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2200      	movs	r2, #0
 800d232:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d234:	2200      	movs	r2, #0
 800d236:	2100      	movs	r1, #0
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f000 fa2c 	bl	800d696 <USBH_CtlReq>
 800d23e:	4603      	mov	r3, r0
}
 800d240:	4618      	mov	r0, r3
 800d242:	3708      	adds	r7, #8
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b082      	sub	sp, #8
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	460b      	mov	r3, r1
 800d252:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	789b      	ldrb	r3, [r3, #2]
 800d258:	2b01      	cmp	r3, #1
 800d25a:	d10e      	bne.n	800d27a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2200      	movs	r2, #0
 800d260:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2209      	movs	r2, #9
 800d266:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	887a      	ldrh	r2, [r7, #2]
 800d26c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2200      	movs	r2, #0
 800d278:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d27a:	2200      	movs	r2, #0
 800d27c:	2100      	movs	r1, #0
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f000 fa09 	bl	800d696 <USBH_CtlReq>
 800d284:	4603      	mov	r3, r0
}
 800d286:	4618      	mov	r0, r3
 800d288:	3708      	adds	r7, #8
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}

0800d28e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d28e:	b580      	push	{r7, lr}
 800d290:	b082      	sub	sp, #8
 800d292:	af00      	add	r7, sp, #0
 800d294:	6078      	str	r0, [r7, #4]
 800d296:	460b      	mov	r3, r1
 800d298:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	789b      	ldrb	r3, [r3, #2]
 800d29e:	2b01      	cmp	r3, #1
 800d2a0:	d10f      	bne.n	800d2c2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2203      	movs	r2, #3
 800d2ac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d2ae:	78fb      	ldrb	r3, [r7, #3]
 800d2b0:	b29a      	uxth	r2, r3
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	2100      	movs	r1, #0
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f000 f9e5 	bl	800d696 <USBH_CtlReq>
 800d2cc:	4603      	mov	r3, r0
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	3708      	adds	r7, #8
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}

0800d2d6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d2d6:	b580      	push	{r7, lr}
 800d2d8:	b082      	sub	sp, #8
 800d2da:	af00      	add	r7, sp, #0
 800d2dc:	6078      	str	r0, [r7, #4]
 800d2de:	460b      	mov	r3, r1
 800d2e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	789b      	ldrb	r3, [r3, #2]
 800d2e6:	2b01      	cmp	r3, #1
 800d2e8:	d10f      	bne.n	800d30a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2202      	movs	r2, #2
 800d2ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d2fc:	78fb      	ldrb	r3, [r7, #3]
 800d2fe:	b29a      	uxth	r2, r3
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2200      	movs	r2, #0
 800d308:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800d30a:	2200      	movs	r2, #0
 800d30c:	2100      	movs	r1, #0
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f000 f9c1 	bl	800d696 <USBH_CtlReq>
 800d314:	4603      	mov	r3, r0
}
 800d316:	4618      	mov	r0, r3
 800d318:	3708      	adds	r7, #8
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}

0800d31e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800d31e:	b480      	push	{r7}
 800d320:	b085      	sub	sp, #20
 800d322:	af00      	add	r7, sp, #0
 800d324:	60f8      	str	r0, [r7, #12]
 800d326:	60b9      	str	r1, [r7, #8]
 800d328:	4613      	mov	r3, r2
 800d32a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	781a      	ldrb	r2, [r3, #0]
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	785a      	ldrb	r2, [r3, #1]
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	3302      	adds	r3, #2
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	b29a      	uxth	r2, r3
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	3303      	adds	r3, #3
 800d348:	781b      	ldrb	r3, [r3, #0]
 800d34a:	b29b      	uxth	r3, r3
 800d34c:	021b      	lsls	r3, r3, #8
 800d34e:	b29b      	uxth	r3, r3
 800d350:	4313      	orrs	r3, r2
 800d352:	b29a      	uxth	r2, r3
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	791a      	ldrb	r2, [r3, #4]
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	795a      	ldrb	r2, [r3, #5]
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	799a      	ldrb	r2, [r3, #6]
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	79da      	ldrb	r2, [r3, #7]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800d378:	88fb      	ldrh	r3, [r7, #6]
 800d37a:	2b08      	cmp	r3, #8
 800d37c:	d939      	bls.n	800d3f2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	3308      	adds	r3, #8
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	b29a      	uxth	r2, r3
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	3309      	adds	r3, #9
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	021b      	lsls	r3, r3, #8
 800d390:	b29b      	uxth	r3, r3
 800d392:	4313      	orrs	r3, r2
 800d394:	b29a      	uxth	r2, r3
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	330a      	adds	r3, #10
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	b29a      	uxth	r2, r3
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	330b      	adds	r3, #11
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	b29b      	uxth	r3, r3
 800d3aa:	021b      	lsls	r3, r3, #8
 800d3ac:	b29b      	uxth	r3, r3
 800d3ae:	4313      	orrs	r3, r2
 800d3b0:	b29a      	uxth	r2, r3
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	330c      	adds	r3, #12
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	b29a      	uxth	r2, r3
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	330d      	adds	r3, #13
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	b29b      	uxth	r3, r3
 800d3c6:	021b      	lsls	r3, r3, #8
 800d3c8:	b29b      	uxth	r3, r3
 800d3ca:	4313      	orrs	r3, r2
 800d3cc:	b29a      	uxth	r2, r3
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	7b9a      	ldrb	r2, [r3, #14]
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	7bda      	ldrb	r2, [r3, #15]
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	7c1a      	ldrb	r2, [r3, #16]
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	7c5a      	ldrb	r2, [r3, #17]
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	745a      	strb	r2, [r3, #17]
  }
}
 800d3f2:	bf00      	nop
 800d3f4:	3714      	adds	r7, #20
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fc:	4770      	bx	lr

0800d3fe <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800d3fe:	b580      	push	{r7, lr}
 800d400:	b08a      	sub	sp, #40	; 0x28
 800d402:	af00      	add	r7, sp, #0
 800d404:	60f8      	str	r0, [r7, #12]
 800d406:	60b9      	str	r1, [r7, #8]
 800d408:	4613      	mov	r3, r2
 800d40a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d410:	2300      	movs	r3, #0
 800d412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800d416:	2300      	movs	r3, #0
 800d418:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	781a      	ldrb	r2, [r3, #0]
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	785a      	ldrb	r2, [r3, #1]
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	3302      	adds	r3, #2
 800d434:	781b      	ldrb	r3, [r3, #0]
 800d436:	b29a      	uxth	r2, r3
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	3303      	adds	r3, #3
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	b29b      	uxth	r3, r3
 800d440:	021b      	lsls	r3, r3, #8
 800d442:	b29b      	uxth	r3, r3
 800d444:	4313      	orrs	r3, r2
 800d446:	b29a      	uxth	r2, r3
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	791a      	ldrb	r2, [r3, #4]
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	795a      	ldrb	r2, [r3, #5]
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	799a      	ldrb	r2, [r3, #6]
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	79da      	ldrb	r2, [r3, #7]
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	7a1a      	ldrb	r2, [r3, #8]
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d474:	88fb      	ldrh	r3, [r7, #6]
 800d476:	2b09      	cmp	r3, #9
 800d478:	d95f      	bls.n	800d53a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800d47a:	2309      	movs	r3, #9
 800d47c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800d47e:	2300      	movs	r3, #0
 800d480:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d482:	e051      	b.n	800d528 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d484:	f107 0316 	add.w	r3, r7, #22
 800d488:	4619      	mov	r1, r3
 800d48a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d48c:	f000 f8e8 	bl	800d660 <USBH_GetNextDesc>
 800d490:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800d492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d494:	785b      	ldrb	r3, [r3, #1]
 800d496:	2b04      	cmp	r3, #4
 800d498:	d146      	bne.n	800d528 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800d49a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d49e:	221a      	movs	r2, #26
 800d4a0:	fb02 f303 	mul.w	r3, r2, r3
 800d4a4:	3308      	adds	r3, #8
 800d4a6:	68fa      	ldr	r2, [r7, #12]
 800d4a8:	4413      	add	r3, r2
 800d4aa:	3302      	adds	r3, #2
 800d4ac:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d4ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d4b0:	69f8      	ldr	r0, [r7, #28]
 800d4b2:	f000 f846 	bl	800d542 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d4c0:	e022      	b.n	800d508 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d4c2:	f107 0316 	add.w	r3, r7, #22
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d4ca:	f000 f8c9 	bl	800d660 <USBH_GetNextDesc>
 800d4ce:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800d4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d2:	785b      	ldrb	r3, [r3, #1]
 800d4d4:	2b05      	cmp	r3, #5
 800d4d6:	d117      	bne.n	800d508 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d4d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d4dc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d4e0:	3201      	adds	r2, #1
 800d4e2:	00d2      	lsls	r2, r2, #3
 800d4e4:	211a      	movs	r1, #26
 800d4e6:	fb01 f303 	mul.w	r3, r1, r3
 800d4ea:	4413      	add	r3, r2
 800d4ec:	3308      	adds	r3, #8
 800d4ee:	68fa      	ldr	r2, [r7, #12]
 800d4f0:	4413      	add	r3, r2
 800d4f2:	3304      	adds	r3, #4
 800d4f4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800d4f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d4f8:	69b8      	ldr	r0, [r7, #24]
 800d4fa:	f000 f851 	bl	800d5a0 <USBH_ParseEPDesc>
            ep_ix++;
 800d4fe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d502:	3301      	adds	r3, #1
 800d504:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d508:	69fb      	ldr	r3, [r7, #28]
 800d50a:	791b      	ldrb	r3, [r3, #4]
 800d50c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d510:	429a      	cmp	r2, r3
 800d512:	d204      	bcs.n	800d51e <USBH_ParseCfgDesc+0x120>
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	885a      	ldrh	r2, [r3, #2]
 800d518:	8afb      	ldrh	r3, [r7, #22]
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d8d1      	bhi.n	800d4c2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800d51e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d522:	3301      	adds	r3, #1
 800d524:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d528:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d804      	bhi.n	800d53a <USBH_ParseCfgDesc+0x13c>
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	885a      	ldrh	r2, [r3, #2]
 800d534:	8afb      	ldrh	r3, [r7, #22]
 800d536:	429a      	cmp	r2, r3
 800d538:	d8a4      	bhi.n	800d484 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800d53a:	bf00      	nop
 800d53c:	3728      	adds	r7, #40	; 0x28
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}

0800d542 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800d542:	b480      	push	{r7}
 800d544:	b083      	sub	sp, #12
 800d546:	af00      	add	r7, sp, #0
 800d548:	6078      	str	r0, [r7, #4]
 800d54a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	781a      	ldrb	r2, [r3, #0]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	785a      	ldrb	r2, [r3, #1]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	789a      	ldrb	r2, [r3, #2]
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	78da      	ldrb	r2, [r3, #3]
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	791a      	ldrb	r2, [r3, #4]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	795a      	ldrb	r2, [r3, #5]
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	799a      	ldrb	r2, [r3, #6]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	79da      	ldrb	r2, [r3, #7]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	7a1a      	ldrb	r2, [r3, #8]
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	721a      	strb	r2, [r3, #8]
}
 800d594:	bf00      	nop
 800d596:	370c      	adds	r7, #12
 800d598:	46bd      	mov	sp, r7
 800d59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59e:	4770      	bx	lr

0800d5a0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b083      	sub	sp, #12
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	781a      	ldrb	r2, [r3, #0]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	785a      	ldrb	r2, [r3, #1]
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	789a      	ldrb	r2, [r3, #2]
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	78da      	ldrb	r2, [r3, #3]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	3304      	adds	r3, #4
 800d5ce:	781b      	ldrb	r3, [r3, #0]
 800d5d0:	b29a      	uxth	r2, r3
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	3305      	adds	r3, #5
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	021b      	lsls	r3, r3, #8
 800d5dc:	b29b      	uxth	r3, r3
 800d5de:	4313      	orrs	r3, r2
 800d5e0:	b29a      	uxth	r2, r3
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	799a      	ldrb	r2, [r3, #6]
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	719a      	strb	r2, [r3, #6]
}
 800d5ee:	bf00      	nop
 800d5f0:	370c      	adds	r7, #12
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f8:	4770      	bx	lr

0800d5fa <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d5fa:	b480      	push	{r7}
 800d5fc:	b087      	sub	sp, #28
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	60f8      	str	r0, [r7, #12]
 800d602:	60b9      	str	r1, [r7, #8]
 800d604:	4613      	mov	r3, r2
 800d606:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	3301      	adds	r3, #1
 800d60c:	781b      	ldrb	r3, [r3, #0]
 800d60e:	2b03      	cmp	r3, #3
 800d610:	d120      	bne.n	800d654 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	1e9a      	subs	r2, r3, #2
 800d618:	88fb      	ldrh	r3, [r7, #6]
 800d61a:	4293      	cmp	r3, r2
 800d61c:	bf28      	it	cs
 800d61e:	4613      	movcs	r3, r2
 800d620:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	3302      	adds	r3, #2
 800d626:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d628:	2300      	movs	r3, #0
 800d62a:	82fb      	strh	r3, [r7, #22]
 800d62c:	e00b      	b.n	800d646 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d62e:	8afb      	ldrh	r3, [r7, #22]
 800d630:	68fa      	ldr	r2, [r7, #12]
 800d632:	4413      	add	r3, r2
 800d634:	781a      	ldrb	r2, [r3, #0]
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	3301      	adds	r3, #1
 800d63e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d640:	8afb      	ldrh	r3, [r7, #22]
 800d642:	3302      	adds	r3, #2
 800d644:	82fb      	strh	r3, [r7, #22]
 800d646:	8afa      	ldrh	r2, [r7, #22]
 800d648:	8abb      	ldrh	r3, [r7, #20]
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d3ef      	bcc.n	800d62e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	2200      	movs	r2, #0
 800d652:	701a      	strb	r2, [r3, #0]
  }
}
 800d654:	bf00      	nop
 800d656:	371c      	adds	r7, #28
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr

0800d660 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d660:	b480      	push	{r7}
 800d662:	b085      	sub	sp, #20
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	881a      	ldrh	r2, [r3, #0]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	b29b      	uxth	r3, r3
 800d674:	4413      	add	r3, r2
 800d676:	b29a      	uxth	r2, r3
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	781b      	ldrb	r3, [r3, #0]
 800d680:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	4413      	add	r3, r2
 800d686:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d688:	68fb      	ldr	r3, [r7, #12]
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3714      	adds	r7, #20
 800d68e:	46bd      	mov	sp, r7
 800d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d694:	4770      	bx	lr

0800d696 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d696:	b580      	push	{r7, lr}
 800d698:	b086      	sub	sp, #24
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	60f8      	str	r0, [r7, #12]
 800d69e:	60b9      	str	r1, [r7, #8]
 800d6a0:	4613      	mov	r3, r2
 800d6a2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	789b      	ldrb	r3, [r3, #2]
 800d6ac:	2b01      	cmp	r3, #1
 800d6ae:	d002      	beq.n	800d6b6 <USBH_CtlReq+0x20>
 800d6b0:	2b02      	cmp	r3, #2
 800d6b2:	d00f      	beq.n	800d6d4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800d6b4:	e027      	b.n	800d706 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	68ba      	ldr	r2, [r7, #8]
 800d6ba:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	88fa      	ldrh	r2, [r7, #6]
 800d6c0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	2201      	movs	r2, #1
 800d6c6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	2202      	movs	r2, #2
 800d6cc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	75fb      	strb	r3, [r7, #23]
      break;
 800d6d2:	e018      	b.n	800d706 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800d6d4:	68f8      	ldr	r0, [r7, #12]
 800d6d6:	f000 f81b 	bl	800d710 <USBH_HandleControl>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d6de:	7dfb      	ldrb	r3, [r7, #23]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d002      	beq.n	800d6ea <USBH_CtlReq+0x54>
 800d6e4:	7dfb      	ldrb	r3, [r7, #23]
 800d6e6:	2b03      	cmp	r3, #3
 800d6e8:	d106      	bne.n	800d6f8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	2201      	movs	r2, #1
 800d6ee:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	761a      	strb	r2, [r3, #24]
      break;
 800d6f6:	e005      	b.n	800d704 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800d6f8:	7dfb      	ldrb	r3, [r7, #23]
 800d6fa:	2b02      	cmp	r3, #2
 800d6fc:	d102      	bne.n	800d704 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	2201      	movs	r2, #1
 800d702:	709a      	strb	r2, [r3, #2]
      break;
 800d704:	bf00      	nop
  }
  return status;
 800d706:	7dfb      	ldrb	r3, [r7, #23]
}
 800d708:	4618      	mov	r0, r3
 800d70a:	3718      	adds	r7, #24
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b086      	sub	sp, #24
 800d714:	af02      	add	r7, sp, #8
 800d716:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d718:	2301      	movs	r3, #1
 800d71a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d71c:	2300      	movs	r3, #0
 800d71e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	7e1b      	ldrb	r3, [r3, #24]
 800d724:	3b01      	subs	r3, #1
 800d726:	2b0a      	cmp	r3, #10
 800d728:	f200 8156 	bhi.w	800d9d8 <USBH_HandleControl+0x2c8>
 800d72c:	a201      	add	r2, pc, #4	; (adr r2, 800d734 <USBH_HandleControl+0x24>)
 800d72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d732:	bf00      	nop
 800d734:	0800d761 	.word	0x0800d761
 800d738:	0800d77b 	.word	0x0800d77b
 800d73c:	0800d7e5 	.word	0x0800d7e5
 800d740:	0800d80b 	.word	0x0800d80b
 800d744:	0800d843 	.word	0x0800d843
 800d748:	0800d86d 	.word	0x0800d86d
 800d74c:	0800d8bf 	.word	0x0800d8bf
 800d750:	0800d8e1 	.word	0x0800d8e1
 800d754:	0800d91d 	.word	0x0800d91d
 800d758:	0800d943 	.word	0x0800d943
 800d75c:	0800d981 	.word	0x0800d981
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f103 0110 	add.w	r1, r3, #16
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	795b      	ldrb	r3, [r3, #5]
 800d76a:	461a      	mov	r2, r3
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f000 f943 	bl	800d9f8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2202      	movs	r2, #2
 800d776:	761a      	strb	r2, [r3, #24]
      break;
 800d778:	e139      	b.n	800d9ee <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	795b      	ldrb	r3, [r3, #5]
 800d77e:	4619      	mov	r1, r3
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f000 fda5 	bl	800e2d0 <USBH_LL_GetURBState>
 800d786:	4603      	mov	r3, r0
 800d788:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d78a:	7bbb      	ldrb	r3, [r7, #14]
 800d78c:	2b01      	cmp	r3, #1
 800d78e:	d11e      	bne.n	800d7ce <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	7c1b      	ldrb	r3, [r3, #16]
 800d794:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d798:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	8adb      	ldrh	r3, [r3, #22]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d00a      	beq.n	800d7b8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d7a2:	7b7b      	ldrb	r3, [r7, #13]
 800d7a4:	2b80      	cmp	r3, #128	; 0x80
 800d7a6:	d103      	bne.n	800d7b0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2203      	movs	r2, #3
 800d7ac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d7ae:	e115      	b.n	800d9dc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2205      	movs	r2, #5
 800d7b4:	761a      	strb	r2, [r3, #24]
      break;
 800d7b6:	e111      	b.n	800d9dc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800d7b8:	7b7b      	ldrb	r3, [r7, #13]
 800d7ba:	2b80      	cmp	r3, #128	; 0x80
 800d7bc:	d103      	bne.n	800d7c6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2209      	movs	r2, #9
 800d7c2:	761a      	strb	r2, [r3, #24]
      break;
 800d7c4:	e10a      	b.n	800d9dc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2207      	movs	r2, #7
 800d7ca:	761a      	strb	r2, [r3, #24]
      break;
 800d7cc:	e106      	b.n	800d9dc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d7ce:	7bbb      	ldrb	r3, [r7, #14]
 800d7d0:	2b04      	cmp	r3, #4
 800d7d2:	d003      	beq.n	800d7dc <USBH_HandleControl+0xcc>
 800d7d4:	7bbb      	ldrb	r3, [r7, #14]
 800d7d6:	2b02      	cmp	r3, #2
 800d7d8:	f040 8100 	bne.w	800d9dc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	220b      	movs	r2, #11
 800d7e0:	761a      	strb	r2, [r3, #24]
      break;
 800d7e2:	e0fb      	b.n	800d9dc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d7ea:	b29a      	uxth	r2, r3
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6899      	ldr	r1, [r3, #8]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	899a      	ldrh	r2, [r3, #12]
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	791b      	ldrb	r3, [r3, #4]
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f000 f93a 	bl	800da76 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2204      	movs	r2, #4
 800d806:	761a      	strb	r2, [r3, #24]
      break;
 800d808:	e0f1      	b.n	800d9ee <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	791b      	ldrb	r3, [r3, #4]
 800d80e:	4619      	mov	r1, r3
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f000 fd5d 	bl	800e2d0 <USBH_LL_GetURBState>
 800d816:	4603      	mov	r3, r0
 800d818:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d81a:	7bbb      	ldrb	r3, [r7, #14]
 800d81c:	2b01      	cmp	r3, #1
 800d81e:	d102      	bne.n	800d826 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2209      	movs	r2, #9
 800d824:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d826:	7bbb      	ldrb	r3, [r7, #14]
 800d828:	2b05      	cmp	r3, #5
 800d82a:	d102      	bne.n	800d832 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d82c:	2303      	movs	r3, #3
 800d82e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d830:	e0d6      	b.n	800d9e0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800d832:	7bbb      	ldrb	r3, [r7, #14]
 800d834:	2b04      	cmp	r3, #4
 800d836:	f040 80d3 	bne.w	800d9e0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	220b      	movs	r2, #11
 800d83e:	761a      	strb	r2, [r3, #24]
      break;
 800d840:	e0ce      	b.n	800d9e0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6899      	ldr	r1, [r3, #8]
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	899a      	ldrh	r2, [r3, #12]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	795b      	ldrb	r3, [r3, #5]
 800d84e:	2001      	movs	r0, #1
 800d850:	9000      	str	r0, [sp, #0]
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f000 f8ea 	bl	800da2c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d85e:	b29a      	uxth	r2, r3
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2206      	movs	r2, #6
 800d868:	761a      	strb	r2, [r3, #24]
      break;
 800d86a:	e0c0      	b.n	800d9ee <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	795b      	ldrb	r3, [r3, #5]
 800d870:	4619      	mov	r1, r3
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f000 fd2c 	bl	800e2d0 <USBH_LL_GetURBState>
 800d878:	4603      	mov	r3, r0
 800d87a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d87c:	7bbb      	ldrb	r3, [r7, #14]
 800d87e:	2b01      	cmp	r3, #1
 800d880:	d103      	bne.n	800d88a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2207      	movs	r2, #7
 800d886:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d888:	e0ac      	b.n	800d9e4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800d88a:	7bbb      	ldrb	r3, [r7, #14]
 800d88c:	2b05      	cmp	r3, #5
 800d88e:	d105      	bne.n	800d89c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	220c      	movs	r2, #12
 800d894:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d896:	2303      	movs	r3, #3
 800d898:	73fb      	strb	r3, [r7, #15]
      break;
 800d89a:	e0a3      	b.n	800d9e4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d89c:	7bbb      	ldrb	r3, [r7, #14]
 800d89e:	2b02      	cmp	r3, #2
 800d8a0:	d103      	bne.n	800d8aa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2205      	movs	r2, #5
 800d8a6:	761a      	strb	r2, [r3, #24]
      break;
 800d8a8:	e09c      	b.n	800d9e4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800d8aa:	7bbb      	ldrb	r3, [r7, #14]
 800d8ac:	2b04      	cmp	r3, #4
 800d8ae:	f040 8099 	bne.w	800d9e4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	220b      	movs	r2, #11
 800d8b6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d8b8:	2302      	movs	r3, #2
 800d8ba:	73fb      	strb	r3, [r7, #15]
      break;
 800d8bc:	e092      	b.n	800d9e4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	791b      	ldrb	r3, [r3, #4]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	2100      	movs	r1, #0
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f000 f8d5 	bl	800da76 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d8d2:	b29a      	uxth	r2, r3
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2208      	movs	r2, #8
 800d8dc:	761a      	strb	r2, [r3, #24]

      break;
 800d8de:	e086      	b.n	800d9ee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	791b      	ldrb	r3, [r3, #4]
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f000 fcf2 	bl	800e2d0 <USBH_LL_GetURBState>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d8f0:	7bbb      	ldrb	r3, [r7, #14]
 800d8f2:	2b01      	cmp	r3, #1
 800d8f4:	d105      	bne.n	800d902 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	220d      	movs	r2, #13
 800d8fa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d900:	e072      	b.n	800d9e8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800d902:	7bbb      	ldrb	r3, [r7, #14]
 800d904:	2b04      	cmp	r3, #4
 800d906:	d103      	bne.n	800d910 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	220b      	movs	r2, #11
 800d90c:	761a      	strb	r2, [r3, #24]
      break;
 800d90e:	e06b      	b.n	800d9e8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800d910:	7bbb      	ldrb	r3, [r7, #14]
 800d912:	2b05      	cmp	r3, #5
 800d914:	d168      	bne.n	800d9e8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800d916:	2303      	movs	r3, #3
 800d918:	73fb      	strb	r3, [r7, #15]
      break;
 800d91a:	e065      	b.n	800d9e8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	795b      	ldrb	r3, [r3, #5]
 800d920:	2201      	movs	r2, #1
 800d922:	9200      	str	r2, [sp, #0]
 800d924:	2200      	movs	r2, #0
 800d926:	2100      	movs	r1, #0
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f000 f87f 	bl	800da2c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d934:	b29a      	uxth	r2, r3
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	220a      	movs	r2, #10
 800d93e:	761a      	strb	r2, [r3, #24]
      break;
 800d940:	e055      	b.n	800d9ee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	795b      	ldrb	r3, [r3, #5]
 800d946:	4619      	mov	r1, r3
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f000 fcc1 	bl	800e2d0 <USBH_LL_GetURBState>
 800d94e:	4603      	mov	r3, r0
 800d950:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d952:	7bbb      	ldrb	r3, [r7, #14]
 800d954:	2b01      	cmp	r3, #1
 800d956:	d105      	bne.n	800d964 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800d958:	2300      	movs	r3, #0
 800d95a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	220d      	movs	r2, #13
 800d960:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d962:	e043      	b.n	800d9ec <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d964:	7bbb      	ldrb	r3, [r7, #14]
 800d966:	2b02      	cmp	r3, #2
 800d968:	d103      	bne.n	800d972 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2209      	movs	r2, #9
 800d96e:	761a      	strb	r2, [r3, #24]
      break;
 800d970:	e03c      	b.n	800d9ec <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800d972:	7bbb      	ldrb	r3, [r7, #14]
 800d974:	2b04      	cmp	r3, #4
 800d976:	d139      	bne.n	800d9ec <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	220b      	movs	r2, #11
 800d97c:	761a      	strb	r2, [r3, #24]
      break;
 800d97e:	e035      	b.n	800d9ec <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	7e5b      	ldrb	r3, [r3, #25]
 800d984:	3301      	adds	r3, #1
 800d986:	b2da      	uxtb	r2, r3
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	765a      	strb	r2, [r3, #25]
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	7e5b      	ldrb	r3, [r3, #25]
 800d990:	2b02      	cmp	r3, #2
 800d992:	d806      	bhi.n	800d9a2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2201      	movs	r2, #1
 800d998:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2201      	movs	r2, #1
 800d99e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d9a0:	e025      	b.n	800d9ee <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d9a8:	2106      	movs	r1, #6
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	795b      	ldrb	r3, [r3, #5]
 800d9b8:	4619      	mov	r1, r3
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f000 f90c 	bl	800dbd8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	791b      	ldrb	r3, [r3, #4]
 800d9c4:	4619      	mov	r1, r3
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f000 f906 	bl	800dbd8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d9d2:	2302      	movs	r3, #2
 800d9d4:	73fb      	strb	r3, [r7, #15]
      break;
 800d9d6:	e00a      	b.n	800d9ee <USBH_HandleControl+0x2de>

    default:
      break;
 800d9d8:	bf00      	nop
 800d9da:	e008      	b.n	800d9ee <USBH_HandleControl+0x2de>
      break;
 800d9dc:	bf00      	nop
 800d9de:	e006      	b.n	800d9ee <USBH_HandleControl+0x2de>
      break;
 800d9e0:	bf00      	nop
 800d9e2:	e004      	b.n	800d9ee <USBH_HandleControl+0x2de>
      break;
 800d9e4:	bf00      	nop
 800d9e6:	e002      	b.n	800d9ee <USBH_HandleControl+0x2de>
      break;
 800d9e8:	bf00      	nop
 800d9ea:	e000      	b.n	800d9ee <USBH_HandleControl+0x2de>
      break;
 800d9ec:	bf00      	nop
  }

  return status;
 800d9ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3710      	adds	r7, #16
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b088      	sub	sp, #32
 800d9fc:	af04      	add	r7, sp, #16
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	4613      	mov	r3, r2
 800da04:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800da06:	79f9      	ldrb	r1, [r7, #7]
 800da08:	2300      	movs	r3, #0
 800da0a:	9303      	str	r3, [sp, #12]
 800da0c:	2308      	movs	r3, #8
 800da0e:	9302      	str	r3, [sp, #8]
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	9301      	str	r3, [sp, #4]
 800da14:	2300      	movs	r3, #0
 800da16:	9300      	str	r3, [sp, #0]
 800da18:	2300      	movs	r3, #0
 800da1a:	2200      	movs	r2, #0
 800da1c:	68f8      	ldr	r0, [r7, #12]
 800da1e:	f000 fc26 	bl	800e26e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800da22:	2300      	movs	r3, #0
}
 800da24:	4618      	mov	r0, r3
 800da26:	3710      	adds	r7, #16
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}

0800da2c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b088      	sub	sp, #32
 800da30:	af04      	add	r7, sp, #16
 800da32:	60f8      	str	r0, [r7, #12]
 800da34:	60b9      	str	r1, [r7, #8]
 800da36:	4611      	mov	r1, r2
 800da38:	461a      	mov	r2, r3
 800da3a:	460b      	mov	r3, r1
 800da3c:	80fb      	strh	r3, [r7, #6]
 800da3e:	4613      	mov	r3, r2
 800da40:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d001      	beq.n	800da50 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800da4c:	2300      	movs	r3, #0
 800da4e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800da50:	7979      	ldrb	r1, [r7, #5]
 800da52:	7e3b      	ldrb	r3, [r7, #24]
 800da54:	9303      	str	r3, [sp, #12]
 800da56:	88fb      	ldrh	r3, [r7, #6]
 800da58:	9302      	str	r3, [sp, #8]
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	9301      	str	r3, [sp, #4]
 800da5e:	2301      	movs	r3, #1
 800da60:	9300      	str	r3, [sp, #0]
 800da62:	2300      	movs	r3, #0
 800da64:	2200      	movs	r2, #0
 800da66:	68f8      	ldr	r0, [r7, #12]
 800da68:	f000 fc01 	bl	800e26e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800da6c:	2300      	movs	r3, #0
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3710      	adds	r7, #16
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}

0800da76 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800da76:	b580      	push	{r7, lr}
 800da78:	b088      	sub	sp, #32
 800da7a:	af04      	add	r7, sp, #16
 800da7c:	60f8      	str	r0, [r7, #12]
 800da7e:	60b9      	str	r1, [r7, #8]
 800da80:	4611      	mov	r1, r2
 800da82:	461a      	mov	r2, r3
 800da84:	460b      	mov	r3, r1
 800da86:	80fb      	strh	r3, [r7, #6]
 800da88:	4613      	mov	r3, r2
 800da8a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800da8c:	7979      	ldrb	r1, [r7, #5]
 800da8e:	2300      	movs	r3, #0
 800da90:	9303      	str	r3, [sp, #12]
 800da92:	88fb      	ldrh	r3, [r7, #6]
 800da94:	9302      	str	r3, [sp, #8]
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	9301      	str	r3, [sp, #4]
 800da9a:	2301      	movs	r3, #1
 800da9c:	9300      	str	r3, [sp, #0]
 800da9e:	2300      	movs	r3, #0
 800daa0:	2201      	movs	r2, #1
 800daa2:	68f8      	ldr	r0, [r7, #12]
 800daa4:	f000 fbe3 	bl	800e26e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800daa8:	2300      	movs	r3, #0

}
 800daaa:	4618      	mov	r0, r3
 800daac:	3710      	adds	r7, #16
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}

0800dab2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800dab2:	b580      	push	{r7, lr}
 800dab4:	b088      	sub	sp, #32
 800dab6:	af04      	add	r7, sp, #16
 800dab8:	60f8      	str	r0, [r7, #12]
 800daba:	60b9      	str	r1, [r7, #8]
 800dabc:	4611      	mov	r1, r2
 800dabe:	461a      	mov	r2, r3
 800dac0:	460b      	mov	r3, r1
 800dac2:	80fb      	strh	r3, [r7, #6]
 800dac4:	4613      	mov	r3, r2
 800dac6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d001      	beq.n	800dad6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800dad2:	2300      	movs	r3, #0
 800dad4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dad6:	7979      	ldrb	r1, [r7, #5]
 800dad8:	7e3b      	ldrb	r3, [r7, #24]
 800dada:	9303      	str	r3, [sp, #12]
 800dadc:	88fb      	ldrh	r3, [r7, #6]
 800dade:	9302      	str	r3, [sp, #8]
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	9301      	str	r3, [sp, #4]
 800dae4:	2301      	movs	r3, #1
 800dae6:	9300      	str	r3, [sp, #0]
 800dae8:	2302      	movs	r3, #2
 800daea:	2200      	movs	r2, #0
 800daec:	68f8      	ldr	r0, [r7, #12]
 800daee:	f000 fbbe 	bl	800e26e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800daf2:	2300      	movs	r3, #0
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3710      	adds	r7, #16
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b088      	sub	sp, #32
 800db00:	af04      	add	r7, sp, #16
 800db02:	60f8      	str	r0, [r7, #12]
 800db04:	60b9      	str	r1, [r7, #8]
 800db06:	4611      	mov	r1, r2
 800db08:	461a      	mov	r2, r3
 800db0a:	460b      	mov	r3, r1
 800db0c:	80fb      	strh	r3, [r7, #6]
 800db0e:	4613      	mov	r3, r2
 800db10:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800db12:	7979      	ldrb	r1, [r7, #5]
 800db14:	2300      	movs	r3, #0
 800db16:	9303      	str	r3, [sp, #12]
 800db18:	88fb      	ldrh	r3, [r7, #6]
 800db1a:	9302      	str	r3, [sp, #8]
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	9301      	str	r3, [sp, #4]
 800db20:	2301      	movs	r3, #1
 800db22:	9300      	str	r3, [sp, #0]
 800db24:	2302      	movs	r3, #2
 800db26:	2201      	movs	r2, #1
 800db28:	68f8      	ldr	r0, [r7, #12]
 800db2a:	f000 fba0 	bl	800e26e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800db2e:	2300      	movs	r3, #0
}
 800db30:	4618      	mov	r0, r3
 800db32:	3710      	adds	r7, #16
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b086      	sub	sp, #24
 800db3c:	af04      	add	r7, sp, #16
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	4608      	mov	r0, r1
 800db42:	4611      	mov	r1, r2
 800db44:	461a      	mov	r2, r3
 800db46:	4603      	mov	r3, r0
 800db48:	70fb      	strb	r3, [r7, #3]
 800db4a:	460b      	mov	r3, r1
 800db4c:	70bb      	strb	r3, [r7, #2]
 800db4e:	4613      	mov	r3, r2
 800db50:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800db52:	7878      	ldrb	r0, [r7, #1]
 800db54:	78ba      	ldrb	r2, [r7, #2]
 800db56:	78f9      	ldrb	r1, [r7, #3]
 800db58:	8b3b      	ldrh	r3, [r7, #24]
 800db5a:	9302      	str	r3, [sp, #8]
 800db5c:	7d3b      	ldrb	r3, [r7, #20]
 800db5e:	9301      	str	r3, [sp, #4]
 800db60:	7c3b      	ldrb	r3, [r7, #16]
 800db62:	9300      	str	r3, [sp, #0]
 800db64:	4603      	mov	r3, r0
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f000 fb33 	bl	800e1d2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800db6c:	2300      	movs	r3, #0
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3708      	adds	r7, #8
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}

0800db76 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800db76:	b580      	push	{r7, lr}
 800db78:	b082      	sub	sp, #8
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	6078      	str	r0, [r7, #4]
 800db7e:	460b      	mov	r3, r1
 800db80:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800db82:	78fb      	ldrb	r3, [r7, #3]
 800db84:	4619      	mov	r1, r3
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f000 fb52 	bl	800e230 <USBH_LL_ClosePipe>

  return USBH_OK;
 800db8c:	2300      	movs	r3, #0
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3708      	adds	r7, #8
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}

0800db96 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800db96:	b580      	push	{r7, lr}
 800db98:	b084      	sub	sp, #16
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	6078      	str	r0, [r7, #4]
 800db9e:	460b      	mov	r3, r1
 800dba0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f000 f836 	bl	800dc14 <USBH_GetFreePipe>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800dbac:	89fb      	ldrh	r3, [r7, #14]
 800dbae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dbb2:	4293      	cmp	r3, r2
 800dbb4:	d00a      	beq.n	800dbcc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800dbb6:	78fa      	ldrb	r2, [r7, #3]
 800dbb8:	89fb      	ldrh	r3, [r7, #14]
 800dbba:	f003 030f 	and.w	r3, r3, #15
 800dbbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dbc2:	6879      	ldr	r1, [r7, #4]
 800dbc4:	33e0      	adds	r3, #224	; 0xe0
 800dbc6:	009b      	lsls	r3, r3, #2
 800dbc8:	440b      	add	r3, r1
 800dbca:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800dbcc:	89fb      	ldrh	r3, [r7, #14]
 800dbce:	b2db      	uxtb	r3, r3
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3710      	adds	r7, #16
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800dbd8:	b480      	push	{r7}
 800dbda:	b083      	sub	sp, #12
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	460b      	mov	r3, r1
 800dbe2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800dbe4:	78fb      	ldrb	r3, [r7, #3]
 800dbe6:	2b0a      	cmp	r3, #10
 800dbe8:	d80d      	bhi.n	800dc06 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800dbea:	78fb      	ldrb	r3, [r7, #3]
 800dbec:	687a      	ldr	r2, [r7, #4]
 800dbee:	33e0      	adds	r3, #224	; 0xe0
 800dbf0:	009b      	lsls	r3, r3, #2
 800dbf2:	4413      	add	r3, r2
 800dbf4:	685a      	ldr	r2, [r3, #4]
 800dbf6:	78fb      	ldrb	r3, [r7, #3]
 800dbf8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800dbfc:	6879      	ldr	r1, [r7, #4]
 800dbfe:	33e0      	adds	r3, #224	; 0xe0
 800dc00:	009b      	lsls	r3, r3, #2
 800dc02:	440b      	add	r3, r1
 800dc04:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800dc06:	2300      	movs	r3, #0
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	370c      	adds	r7, #12
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc12:	4770      	bx	lr

0800dc14 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800dc14:	b480      	push	{r7}
 800dc16:	b085      	sub	sp, #20
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800dc20:	2300      	movs	r3, #0
 800dc22:	73fb      	strb	r3, [r7, #15]
 800dc24:	e00f      	b.n	800dc46 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800dc26:	7bfb      	ldrb	r3, [r7, #15]
 800dc28:	687a      	ldr	r2, [r7, #4]
 800dc2a:	33e0      	adds	r3, #224	; 0xe0
 800dc2c:	009b      	lsls	r3, r3, #2
 800dc2e:	4413      	add	r3, r2
 800dc30:	685b      	ldr	r3, [r3, #4]
 800dc32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d102      	bne.n	800dc40 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800dc3a:	7bfb      	ldrb	r3, [r7, #15]
 800dc3c:	b29b      	uxth	r3, r3
 800dc3e:	e007      	b.n	800dc50 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800dc40:	7bfb      	ldrb	r3, [r7, #15]
 800dc42:	3301      	adds	r3, #1
 800dc44:	73fb      	strb	r3, [r7, #15]
 800dc46:	7bfb      	ldrb	r3, [r7, #15]
 800dc48:	2b0a      	cmp	r3, #10
 800dc4a:	d9ec      	bls.n	800dc26 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800dc4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3714      	adds	r7, #20
 800dc54:	46bd      	mov	sp, r7
 800dc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5a:	4770      	bx	lr

0800dc5c <USBH_CDC_TransmitCallback>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800dc5c:	b480      	push	{r7}
 800dc5e:	b083      	sub	sp, #12
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
  	if(phost == &hUsbHostFS)
  	{

  	}
}
 800dc64:	bf00      	nop
 800dc66:	370c      	adds	r7, #12
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6e:	4770      	bx	lr

0800dc70 <USBH_CDC_ReceiveCallback>:

void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b082      	sub	sp, #8
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
  	if(phost == &hUsbHostFS)
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	4a14      	ldr	r2, [pc, #80]	; (800dccc <USBH_CDC_ReceiveCallback+0x5c>)
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d120      	bne.n	800dcc2 <USBH_CDC_ReceiveCallback+0x52>
  	{
  		// Handles the data recived from the USB CDC host, here just printing it out to UART
  		rx_size = USBH_CDC_GetLastReceivedDataSize(phost);
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f7fe fb3e 	bl	800c302 <USBH_CDC_GetLastReceivedDataSize>
 800dc86:	4603      	mov	r3, r0
 800dc88:	461a      	mov	r2, r3
 800dc8a:	4b11      	ldr	r3, [pc, #68]	; (800dcd0 <USBH_CDC_ReceiveCallback+0x60>)
 800dc8c:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, CDC_RX_Buffer, rx_size, HAL_MAX_DELAY);
 800dc8e:	4b10      	ldr	r3, [pc, #64]	; (800dcd0 <USBH_CDC_ReceiveCallback+0x60>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	b29a      	uxth	r2, r3
 800dc94:	f04f 33ff 	mov.w	r3, #4294967295
 800dc98:	490e      	ldr	r1, [pc, #56]	; (800dcd4 <USBH_CDC_ReceiveCallback+0x64>)
 800dc9a:	480f      	ldr	r0, [pc, #60]	; (800dcd8 <USBH_CDC_ReceiveCallback+0x68>)
 800dc9c:	f7fa fd94 	bl	80087c8 <HAL_UART_Transmit>

		// Copy buffer to external dongle_response buffer
		strcpy((char *)dongle_response, (char *)CDC_RX_Buffer);
 800dca0:	490c      	ldr	r1, [pc, #48]	; (800dcd4 <USBH_CDC_ReceiveCallback+0x64>)
 800dca2:	480e      	ldr	r0, [pc, #56]	; (800dcdc <USBH_CDC_ReceiveCallback+0x6c>)
 800dca4:	f000 fcde 	bl	800e664 <strcpy>

		// Reset buffer and restart the callback function to receive more data
		memset(CDC_RX_Buffer,0,RX_BUFF_SIZE);
 800dca8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dcac:	2100      	movs	r1, #0
 800dcae:	4809      	ldr	r0, [pc, #36]	; (800dcd4 <USBH_CDC_ReceiveCallback+0x64>)
 800dcb0:	f000 fbf6 	bl	800e4a0 <memset>
		USBH_CDC_Receive(phost, CDC_RX_Buffer, RX_BUFF_SIZE);
 800dcb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dcb8:	4906      	ldr	r1, [pc, #24]	; (800dcd4 <USBH_CDC_ReceiveCallback+0x64>)
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f7fe fb6d 	bl	800c39a <USBH_CDC_Receive>
  	}

  	return;
 800dcc0:	bf00      	nop
 800dcc2:	bf00      	nop
}
 800dcc4:	3708      	adds	r7, #8
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}
 800dcca:	bf00      	nop
 800dccc:	24000634 	.word	0x24000634
 800dcd0:	2400028c 	.word	0x2400028c
 800dcd4:	24000a0c 	.word	0x24000a0c
 800dcd8:	24000390 	.word	0x24000390
 800dcdc:	2400029c 	.word	0x2400029c

0800dce0 <writeToDongle>:
/**
  * @brief Simple function that takes a string and transmit it to the dongle
  * @retval None
  */
void writeToDongle(uint8_t * cmd)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b082      	sub	sp, #8
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
	USBH_CDC_Transmit(&hUsbHostFS, cmd, strlen((char *)cmd));
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f7f2 faf9 	bl	80002e0 <strlen>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	461a      	mov	r2, r3
 800dcf2:	6879      	ldr	r1, [r7, #4]
 800dcf4:	4803      	ldr	r0, [pc, #12]	; (800dd04 <writeToDongle+0x24>)
 800dcf6:	f7fe fb22 	bl	800c33e <USBH_CDC_Transmit>
}
 800dcfa:	bf00      	nop
 800dcfc:	3708      	adds	r7, #8
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	bf00      	nop
 800dd04:	24000634 	.word	0x24000634

0800dd08 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800dd0c:	2201      	movs	r2, #1
 800dd0e:	490e      	ldr	r1, [pc, #56]	; (800dd48 <MX_USB_HOST_Init+0x40>)
 800dd10:	480e      	ldr	r0, [pc, #56]	; (800dd4c <MX_USB_HOST_Init+0x44>)
 800dd12:	f7fe fc4b 	bl	800c5ac <USBH_Init>
 800dd16:	4603      	mov	r3, r0
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d001      	beq.n	800dd20 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800dd1c:	f7f3 fa96 	bl	800124c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800dd20:	490b      	ldr	r1, [pc, #44]	; (800dd50 <MX_USB_HOST_Init+0x48>)
 800dd22:	480a      	ldr	r0, [pc, #40]	; (800dd4c <MX_USB_HOST_Init+0x44>)
 800dd24:	f7fe fcd0 	bl	800c6c8 <USBH_RegisterClass>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d001      	beq.n	800dd32 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800dd2e:	f7f3 fa8d 	bl	800124c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800dd32:	4806      	ldr	r0, [pc, #24]	; (800dd4c <MX_USB_HOST_Init+0x44>)
 800dd34:	f7fe fd54 	bl	800c7e0 <USBH_Start>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d001      	beq.n	800dd42 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800dd3e:	f7f3 fa85 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800dd42:	bf00      	nop
 800dd44:	bd80      	pop	{r7, pc}
 800dd46:	bf00      	nop
 800dd48:	0800dd69 	.word	0x0800dd69
 800dd4c:	24000634 	.word	0x24000634
 800dd50:	24000010 	.word	0x24000010

0800dd54 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800dd58:	4802      	ldr	r0, [pc, #8]	; (800dd64 <MX_USB_HOST_Process+0x10>)
 800dd5a:	f7fe fd51 	bl	800c800 <USBH_Process>
}
 800dd5e:	bf00      	nop
 800dd60:	bd80      	pop	{r7, pc}
 800dd62:	bf00      	nop
 800dd64:	24000634 	.word	0x24000634

0800dd68 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b082      	sub	sp, #8
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
 800dd70:	460b      	mov	r3, r1
 800dd72:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800dd74:	78fb      	ldrb	r3, [r7, #3]
 800dd76:	3b01      	subs	r3, #1
 800dd78:	2b04      	cmp	r3, #4
 800dd7a:	d866      	bhi.n	800de4a <USBH_UserProcess+0xe2>
 800dd7c:	a201      	add	r2, pc, #4	; (adr r2, 800dd84 <USBH_UserProcess+0x1c>)
 800dd7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd82:	bf00      	nop
 800dd84:	0800de4b 	.word	0x0800de4b
 800dd88:	0800ddc7 	.word	0x0800ddc7
 800dd8c:	0800de4b 	.word	0x0800de4b
 800dd90:	0800de1d 	.word	0x0800de1d
 800dd94:	0800dd99 	.word	0x0800dd99
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800dd98:	4b2f      	ldr	r3, [pc, #188]	; (800de58 <USBH_UserProcess+0xf0>)
 800dd9a:	2203      	movs	r2, #3
 800dd9c:	701a      	strb	r2, [r3, #0]
  isBleuIOReady = false;
 800dd9e:	4b2f      	ldr	r3, [pc, #188]	; (800de5c <USBH_UserProcess+0xf4>)
 800dda0:	2200      	movs	r2, #0
 800dda2:	701a      	strb	r2, [r3, #0]

  // Turn on Red LED, turn off Green and Yellow LED
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800dda4:	2200      	movs	r2, #0
 800dda6:	2101      	movs	r1, #1
 800dda8:	482d      	ldr	r0, [pc, #180]	; (800de60 <USBH_UserProcess+0xf8>)
 800ddaa:	f7f5 fa8d 	bl	80032c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800ddae:	2200      	movs	r2, #0
 800ddb0:	2102      	movs	r1, #2
 800ddb2:	482c      	ldr	r0, [pc, #176]	; (800de64 <USBH_UserProcess+0xfc>)
 800ddb4:	f7f5 fa88 	bl	80032c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800ddb8:	2201      	movs	r2, #1
 800ddba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ddbe:	4828      	ldr	r0, [pc, #160]	; (800de60 <USBH_UserProcess+0xf8>)
 800ddc0:	f7f5 fa82 	bl	80032c8 <HAL_GPIO_WritePin>
  break;
 800ddc4:	e044      	b.n	800de50 <USBH_UserProcess+0xe8>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ddc6:	4b24      	ldr	r3, [pc, #144]	; (800de58 <USBH_UserProcess+0xf0>)
 800ddc8:	2202      	movs	r2, #2
 800ddca:	701a      	strb	r2, [r3, #0]
  // Check if BleuIO firmware is running
  // (idProduct:0x6001 = bootloader, idProduct:0x6002 = bleuio fw)
  if(phost->device.DevDesc.idProduct == 0x6002)
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 800ddd2:	f246 0202 	movw	r2, #24578	; 0x6002
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d139      	bne.n	800de4e <USBH_UserProcess+0xe6>
  {
	  isBleuIOReady = true;
 800ddda:	4b20      	ldr	r3, [pc, #128]	; (800de5c <USBH_UserProcess+0xf4>)
 800dddc:	2201      	movs	r2, #1
 800ddde:	701a      	strb	r2, [r3, #0]
	  // Sends message to uart that BleuIO is connected and ready
	  HAL_UART_Transmit(&huart3, (uint8_t*)BLEUIO_READY, strlen(BLEUIO_READY), HAL_MAX_DELAY);
 800dde0:	f04f 33ff 	mov.w	r3, #4294967295
 800dde4:	2219      	movs	r2, #25
 800dde6:	4920      	ldr	r1, [pc, #128]	; (800de68 <USBH_UserProcess+0x100>)
 800dde8:	4820      	ldr	r0, [pc, #128]	; (800de6c <USBH_UserProcess+0x104>)
 800ddea:	f7fa fced 	bl	80087c8 <HAL_UART_Transmit>

	  // Turn on Green LED, turn off Yellow and Red LED
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800ddee:	2201      	movs	r2, #1
 800ddf0:	2101      	movs	r1, #1
 800ddf2:	481b      	ldr	r0, [pc, #108]	; (800de60 <USBH_UserProcess+0xf8>)
 800ddf4:	f7f5 fa68 	bl	80032c8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	2102      	movs	r1, #2
 800ddfc:	4819      	ldr	r0, [pc, #100]	; (800de64 <USBH_UserProcess+0xfc>)
 800ddfe:	f7f5 fa63 	bl	80032c8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800de02:	2200      	movs	r2, #0
 800de04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800de08:	4815      	ldr	r0, [pc, #84]	; (800de60 <USBH_UserProcess+0xf8>)
 800de0a:	f7f5 fa5d 	bl	80032c8 <HAL_GPIO_WritePin>

	  // Start receiving from usb
	  USBH_CDC_Receive(&hUsbHostFS, CDC_RX_Buffer, RX_BUFF_SIZE);
 800de0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800de12:	4917      	ldr	r1, [pc, #92]	; (800de70 <USBH_UserProcess+0x108>)
 800de14:	4817      	ldr	r0, [pc, #92]	; (800de74 <USBH_UserProcess+0x10c>)
 800de16:	f7fe fac0 	bl	800c39a <USBH_CDC_Receive>
  }
  break;
 800de1a:	e018      	b.n	800de4e <USBH_UserProcess+0xe6>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800de1c:	4b0e      	ldr	r3, [pc, #56]	; (800de58 <USBH_UserProcess+0xf0>)
 800de1e:	2201      	movs	r2, #1
 800de20:	701a      	strb	r2, [r3, #0]
  isBleuIOReady = false;
 800de22:	4b0e      	ldr	r3, [pc, #56]	; (800de5c <USBH_UserProcess+0xf4>)
 800de24:	2200      	movs	r2, #0
 800de26:	701a      	strb	r2, [r3, #0]
  // Turn on Yellow LED, turn off Green and Red LED
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800de28:	2200      	movs	r2, #0
 800de2a:	2101      	movs	r1, #1
 800de2c:	480c      	ldr	r0, [pc, #48]	; (800de60 <USBH_UserProcess+0xf8>)
 800de2e:	f7f5 fa4b 	bl	80032c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 800de32:	2201      	movs	r2, #1
 800de34:	2102      	movs	r1, #2
 800de36:	480b      	ldr	r0, [pc, #44]	; (800de64 <USBH_UserProcess+0xfc>)
 800de38:	f7f5 fa46 	bl	80032c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800de3c:	2200      	movs	r2, #0
 800de3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800de42:	4807      	ldr	r0, [pc, #28]	; (800de60 <USBH_UserProcess+0xf8>)
 800de44:	f7f5 fa40 	bl	80032c8 <HAL_GPIO_WritePin>
  break;
 800de48:	e002      	b.n	800de50 <USBH_UserProcess+0xe8>

  default:
  break;
 800de4a:	bf00      	nop
 800de4c:	e000      	b.n	800de50 <USBH_UserProcess+0xe8>
  break;
 800de4e:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800de50:	bf00      	nop
 800de52:	3708      	adds	r7, #8
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}
 800de58:	24000290 	.word	0x24000290
 800de5c:	24000424 	.word	0x24000424
 800de60:	58020400 	.word	0x58020400
 800de64:	58021000 	.word	0x58021000
 800de68:	0800ef30 	.word	0x0800ef30
 800de6c:	24000390 	.word	0x24000390
 800de70:	24000a0c 	.word	0x24000a0c
 800de74:	24000634 	.word	0x24000634

0800de78 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b0b8      	sub	sp, #224	; 0xe0
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800de80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800de84:	2200      	movs	r2, #0
 800de86:	601a      	str	r2, [r3, #0]
 800de88:	605a      	str	r2, [r3, #4]
 800de8a:	609a      	str	r2, [r3, #8]
 800de8c:	60da      	str	r2, [r3, #12]
 800de8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800de90:	f107 0310 	add.w	r3, r7, #16
 800de94:	22bc      	movs	r2, #188	; 0xbc
 800de96:	2100      	movs	r1, #0
 800de98:	4618      	mov	r0, r3
 800de9a:	f000 fb01 	bl	800e4a0 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	4a3b      	ldr	r2, [pc, #236]	; (800df90 <HAL_HCD_MspInit+0x118>)
 800dea4:	4293      	cmp	r3, r2
 800dea6:	d16e      	bne.n	800df86 <HAL_HCD_MspInit+0x10e>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800dea8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800deac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800deae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800deb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800deb6:	f107 0310 	add.w	r3, r7, #16
 800deba:	4618      	mov	r0, r3
 800debc:	f7f9 f8d2 	bl	8007064 <HAL_RCCEx_PeriphCLKConfig>
 800dec0:	4603      	mov	r3, r0
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d001      	beq.n	800deca <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 800dec6:	f7f3 f9c1 	bl	800124c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800deca:	f7f8 f903 	bl	80060d4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dece:	4b31      	ldr	r3, [pc, #196]	; (800df94 <HAL_HCD_MspInit+0x11c>)
 800ded0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ded4:	4a2f      	ldr	r2, [pc, #188]	; (800df94 <HAL_HCD_MspInit+0x11c>)
 800ded6:	f043 0301 	orr.w	r3, r3, #1
 800deda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800dede:	4b2d      	ldr	r3, [pc, #180]	; (800df94 <HAL_HCD_MspInit+0x11c>)
 800dee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dee4:	f003 0301 	and.w	r3, r3, #1
 800dee8:	60fb      	str	r3, [r7, #12]
 800deea:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800deec:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800def0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800def4:	2302      	movs	r3, #2
 800def6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800defa:	2300      	movs	r3, #0
 800defc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800df00:	2300      	movs	r3, #0
 800df02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800df06:	230a      	movs	r3, #10
 800df08:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df0c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800df10:	4619      	mov	r1, r3
 800df12:	4821      	ldr	r0, [pc, #132]	; (800df98 <HAL_HCD_MspInit+0x120>)
 800df14:	f7f5 f828 	bl	8002f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800df18:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800df20:	2300      	movs	r3, #0
 800df22:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df26:	2300      	movs	r3, #0
 800df28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800df30:	4619      	mov	r1, r3
 800df32:	4819      	ldr	r0, [pc, #100]	; (800df98 <HAL_HCD_MspInit+0x120>)
 800df34:	f7f5 f818 	bl	8002f68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800df38:	4b16      	ldr	r3, [pc, #88]	; (800df94 <HAL_HCD_MspInit+0x11c>)
 800df3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800df3e:	4a15      	ldr	r2, [pc, #84]	; (800df94 <HAL_HCD_MspInit+0x11c>)
 800df40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800df44:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800df48:	4b12      	ldr	r3, [pc, #72]	; (800df94 <HAL_HCD_MspInit+0x11c>)
 800df4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800df4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800df52:	60bb      	str	r3, [r7, #8]
 800df54:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 800df56:	2200      	movs	r2, #0
 800df58:	2100      	movs	r1, #0
 800df5a:	2062      	movs	r0, #98	; 0x62
 800df5c:	f7f3 fe49 	bl	8001bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 800df60:	2062      	movs	r0, #98	; 0x62
 800df62:	f7f3 fe60 	bl	8001c26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 0, 0);
 800df66:	2200      	movs	r2, #0
 800df68:	2100      	movs	r1, #0
 800df6a:	2063      	movs	r0, #99	; 0x63
 800df6c:	f7f3 fe41 	bl	8001bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 800df70:	2063      	movs	r0, #99	; 0x63
 800df72:	f7f3 fe58 	bl	8001c26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800df76:	2200      	movs	r2, #0
 800df78:	2100      	movs	r1, #0
 800df7a:	2065      	movs	r0, #101	; 0x65
 800df7c:	f7f3 fe39 	bl	8001bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800df80:	2065      	movs	r0, #101	; 0x65
 800df82:	f7f3 fe50 	bl	8001c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800df86:	bf00      	nop
 800df88:	37e0      	adds	r7, #224	; 0xe0
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}
 800df8e:	bf00      	nop
 800df90:	40080000 	.word	0x40080000
 800df94:	58024400 	.word	0x58024400
 800df98:	58020000 	.word	0x58020000

0800df9c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b082      	sub	sp, #8
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f7fe fffb 	bl	800cfa6 <USBH_LL_IncTimer>
}
 800dfb0:	bf00      	nop
 800dfb2:	3708      	adds	r7, #8
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}

0800dfb8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b082      	sub	sp, #8
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f7ff f833 	bl	800d032 <USBH_LL_Connect>
}
 800dfcc:	bf00      	nop
 800dfce:	3708      	adds	r7, #8
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	bd80      	pop	{r7, pc}

0800dfd4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b082      	sub	sp, #8
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f7ff f83c 	bl	800d060 <USBH_LL_Disconnect>
}
 800dfe8:	bf00      	nop
 800dfea:	3708      	adds	r7, #8
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}

0800dff0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800dff0:	b480      	push	{r7}
 800dff2:	b083      	sub	sp, #12
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
 800dff8:	460b      	mov	r3, r1
 800dffa:	70fb      	strb	r3, [r7, #3]
 800dffc:	4613      	mov	r3, r2
 800dffe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800e000:	bf00      	nop
 800e002:	370c      	adds	r7, #12
 800e004:	46bd      	mov	sp, r7
 800e006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00a:	4770      	bx	lr

0800e00c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b082      	sub	sp, #8
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e01a:	4618      	mov	r0, r3
 800e01c:	f7fe ffed 	bl	800cffa <USBH_LL_PortEnabled>
}
 800e020:	bf00      	nop
 800e022:	3708      	adds	r7, #8
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}

0800e028 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e036:	4618      	mov	r0, r3
 800e038:	f7fe ffed 	bl	800d016 <USBH_LL_PortDisabled>
}
 800e03c:	bf00      	nop
 800e03e:	3708      	adds	r7, #8
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b082      	sub	sp, #8
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e052:	2b01      	cmp	r3, #1
 800e054:	d129      	bne.n	800e0aa <USBH_LL_Init+0x66>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e056:	4a17      	ldr	r2, [pc, #92]	; (800e0b4 <USBH_LL_Init+0x70>)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	4a14      	ldr	r2, [pc, #80]	; (800e0b4 <USBH_LL_Init+0x70>)
 800e062:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e066:	4b13      	ldr	r3, [pc, #76]	; (800e0b4 <USBH_LL_Init+0x70>)
 800e068:	4a13      	ldr	r2, [pc, #76]	; (800e0b8 <USBH_LL_Init+0x74>)
 800e06a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 800e06c:	4b11      	ldr	r3, [pc, #68]	; (800e0b4 <USBH_LL_Init+0x70>)
 800e06e:	2210      	movs	r2, #16
 800e070:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e072:	4b10      	ldr	r3, [pc, #64]	; (800e0b4 <USBH_LL_Init+0x70>)
 800e074:	2201      	movs	r2, #1
 800e076:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e078:	4b0e      	ldr	r3, [pc, #56]	; (800e0b4 <USBH_LL_Init+0x70>)
 800e07a:	2200      	movs	r2, #0
 800e07c:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e07e:	4b0d      	ldr	r3, [pc, #52]	; (800e0b4 <USBH_LL_Init+0x70>)
 800e080:	2202      	movs	r2, #2
 800e082:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e084:	4b0b      	ldr	r3, [pc, #44]	; (800e0b4 <USBH_LL_Init+0x70>)
 800e086:	2200      	movs	r2, #0
 800e088:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e08a:	480a      	ldr	r0, [pc, #40]	; (800e0b4 <USBH_LL_Init+0x70>)
 800e08c:	f7f5 f935 	bl	80032fa <HAL_HCD_Init>
 800e090:	4603      	mov	r3, r0
 800e092:	2b00      	cmp	r3, #0
 800e094:	d001      	beq.n	800e09a <USBH_LL_Init+0x56>
  {
    Error_Handler( );
 800e096:	f7f3 f8d9 	bl	800124c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e09a:	4806      	ldr	r0, [pc, #24]	; (800e0b4 <USBH_LL_Init+0x70>)
 800e09c:	f7f5 fd19 	bl	8003ad2 <HAL_HCD_GetCurrentFrame>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	4619      	mov	r1, r3
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f7fe ff6f 	bl	800cf88 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e0aa:	2300      	movs	r3, #0
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3708      	adds	r7, #8
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}
 800e0b4:	24000e0c 	.word	0x24000e0c
 800e0b8:	40080000 	.word	0x40080000

0800e0bc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b084      	sub	sp, #16
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7f5 fc87 	bl	80039e6 <HAL_HCD_Start>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e0dc:	7bfb      	ldrb	r3, [r7, #15]
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f000 f95c 	bl	800e39c <USBH_Get_USB_Status>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3710      	adds	r7, #16
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}

0800e0f2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e0f2:	b580      	push	{r7, lr}
 800e0f4:	b084      	sub	sp, #16
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e0fe:	2300      	movs	r3, #0
 800e100:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e108:	4618      	mov	r0, r3
 800e10a:	f7f5 fc8f 	bl	8003a2c <HAL_HCD_Stop>
 800e10e:	4603      	mov	r3, r0
 800e110:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e112:	7bfb      	ldrb	r3, [r7, #15]
 800e114:	4618      	mov	r0, r3
 800e116:	f000 f941 	bl	800e39c <USBH_Get_USB_Status>
 800e11a:	4603      	mov	r3, r0
 800e11c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e11e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e120:	4618      	mov	r0, r3
 800e122:	3710      	adds	r7, #16
 800e124:	46bd      	mov	sp, r7
 800e126:	bd80      	pop	{r7, pc}

0800e128 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b084      	sub	sp, #16
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e130:	2301      	movs	r3, #1
 800e132:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7f5 fcd7 	bl	8003aee <HAL_HCD_GetCurrentSpeed>
 800e140:	4603      	mov	r3, r0
 800e142:	2b02      	cmp	r3, #2
 800e144:	d00c      	beq.n	800e160 <USBH_LL_GetSpeed+0x38>
 800e146:	2b02      	cmp	r3, #2
 800e148:	d80d      	bhi.n	800e166 <USBH_LL_GetSpeed+0x3e>
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d002      	beq.n	800e154 <USBH_LL_GetSpeed+0x2c>
 800e14e:	2b01      	cmp	r3, #1
 800e150:	d003      	beq.n	800e15a <USBH_LL_GetSpeed+0x32>
 800e152:	e008      	b.n	800e166 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e154:	2300      	movs	r3, #0
 800e156:	73fb      	strb	r3, [r7, #15]
    break;
 800e158:	e008      	b.n	800e16c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e15a:	2301      	movs	r3, #1
 800e15c:	73fb      	strb	r3, [r7, #15]
    break;
 800e15e:	e005      	b.n	800e16c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e160:	2302      	movs	r3, #2
 800e162:	73fb      	strb	r3, [r7, #15]
    break;
 800e164:	e002      	b.n	800e16c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e166:	2301      	movs	r3, #1
 800e168:	73fb      	strb	r3, [r7, #15]
    break;
 800e16a:	bf00      	nop
  }
  return  speed;
 800e16c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3710      	adds	r7, #16
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}

0800e176 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e176:	b580      	push	{r7, lr}
 800e178:	b084      	sub	sp, #16
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e17e:	2300      	movs	r3, #0
 800e180:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e182:	2300      	movs	r3, #0
 800e184:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e18c:	4618      	mov	r0, r3
 800e18e:	f7f5 fc6a 	bl	8003a66 <HAL_HCD_ResetPort>
 800e192:	4603      	mov	r3, r0
 800e194:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e196:	7bfb      	ldrb	r3, [r7, #15]
 800e198:	4618      	mov	r0, r3
 800e19a:	f000 f8ff 	bl	800e39c <USBH_Get_USB_Status>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3710      	adds	r7, #16
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}

0800e1ac <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b082      	sub	sp, #8
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e1be:	78fa      	ldrb	r2, [r7, #3]
 800e1c0:	4611      	mov	r1, r2
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f7f5 fc71 	bl	8003aaa <HAL_HCD_HC_GetXferCount>
 800e1c8:	4603      	mov	r3, r0
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3708      	adds	r7, #8
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}

0800e1d2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e1d2:	b590      	push	{r4, r7, lr}
 800e1d4:	b089      	sub	sp, #36	; 0x24
 800e1d6:	af04      	add	r7, sp, #16
 800e1d8:	6078      	str	r0, [r7, #4]
 800e1da:	4608      	mov	r0, r1
 800e1dc:	4611      	mov	r1, r2
 800e1de:	461a      	mov	r2, r3
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	70fb      	strb	r3, [r7, #3]
 800e1e4:	460b      	mov	r3, r1
 800e1e6:	70bb      	strb	r3, [r7, #2]
 800e1e8:	4613      	mov	r3, r2
 800e1ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e1fa:	787c      	ldrb	r4, [r7, #1]
 800e1fc:	78ba      	ldrb	r2, [r7, #2]
 800e1fe:	78f9      	ldrb	r1, [r7, #3]
 800e200:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e202:	9302      	str	r3, [sp, #8]
 800e204:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e208:	9301      	str	r3, [sp, #4]
 800e20a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e20e:	9300      	str	r3, [sp, #0]
 800e210:	4623      	mov	r3, r4
 800e212:	f7f5 f8d4 	bl	80033be <HAL_HCD_HC_Init>
 800e216:	4603      	mov	r3, r0
 800e218:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e21a:	7bfb      	ldrb	r3, [r7, #15]
 800e21c:	4618      	mov	r0, r3
 800e21e:	f000 f8bd 	bl	800e39c <USBH_Get_USB_Status>
 800e222:	4603      	mov	r3, r0
 800e224:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e226:	7bbb      	ldrb	r3, [r7, #14]
}
 800e228:	4618      	mov	r0, r3
 800e22a:	3714      	adds	r7, #20
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd90      	pop	{r4, r7, pc}

0800e230 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b084      	sub	sp, #16
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
 800e238:	460b      	mov	r3, r1
 800e23a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e23c:	2300      	movs	r3, #0
 800e23e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e240:	2300      	movs	r3, #0
 800e242:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e24a:	78fa      	ldrb	r2, [r7, #3]
 800e24c:	4611      	mov	r1, r2
 800e24e:	4618      	mov	r0, r3
 800e250:	f7f5 f944 	bl	80034dc <HAL_HCD_HC_Halt>
 800e254:	4603      	mov	r3, r0
 800e256:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e258:	7bfb      	ldrb	r3, [r7, #15]
 800e25a:	4618      	mov	r0, r3
 800e25c:	f000 f89e 	bl	800e39c <USBH_Get_USB_Status>
 800e260:	4603      	mov	r3, r0
 800e262:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e264:	7bbb      	ldrb	r3, [r7, #14]
}
 800e266:	4618      	mov	r0, r3
 800e268:	3710      	adds	r7, #16
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}

0800e26e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e26e:	b590      	push	{r4, r7, lr}
 800e270:	b089      	sub	sp, #36	; 0x24
 800e272:	af04      	add	r7, sp, #16
 800e274:	6078      	str	r0, [r7, #4]
 800e276:	4608      	mov	r0, r1
 800e278:	4611      	mov	r1, r2
 800e27a:	461a      	mov	r2, r3
 800e27c:	4603      	mov	r3, r0
 800e27e:	70fb      	strb	r3, [r7, #3]
 800e280:	460b      	mov	r3, r1
 800e282:	70bb      	strb	r3, [r7, #2]
 800e284:	4613      	mov	r3, r2
 800e286:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e288:	2300      	movs	r3, #0
 800e28a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e28c:	2300      	movs	r3, #0
 800e28e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e296:	787c      	ldrb	r4, [r7, #1]
 800e298:	78ba      	ldrb	r2, [r7, #2]
 800e29a:	78f9      	ldrb	r1, [r7, #3]
 800e29c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e2a0:	9303      	str	r3, [sp, #12]
 800e2a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e2a4:	9302      	str	r3, [sp, #8]
 800e2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a8:	9301      	str	r3, [sp, #4]
 800e2aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e2ae:	9300      	str	r3, [sp, #0]
 800e2b0:	4623      	mov	r3, r4
 800e2b2:	f7f5 f937 	bl	8003524 <HAL_HCD_HC_SubmitRequest>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e2ba:	7bfb      	ldrb	r3, [r7, #15]
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f000 f86d 	bl	800e39c <USBH_Get_USB_Status>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3714      	adds	r7, #20
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd90      	pop	{r4, r7, pc}

0800e2d0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b082      	sub	sp, #8
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
 800e2d8:	460b      	mov	r3, r1
 800e2da:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e2e2:	78fa      	ldrb	r2, [r7, #3]
 800e2e4:	4611      	mov	r1, r2
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7f5 fbcb 	bl	8003a82 <HAL_HCD_HC_GetURBState>
 800e2ec:	4603      	mov	r3, r0
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	3708      	adds	r7, #8
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}

0800e2f6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e2f6:	b580      	push	{r7, lr}
 800e2f8:	b082      	sub	sp, #8
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	6078      	str	r0, [r7, #4]
 800e2fe:	460b      	mov	r3, r1
 800e300:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e308:	2b01      	cmp	r3, #1
 800e30a:	d103      	bne.n	800e314 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800e30c:	78fb      	ldrb	r3, [r7, #3]
 800e30e:	4618      	mov	r0, r3
 800e310:	f000 f870 	bl	800e3f4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e314:	20c8      	movs	r0, #200	; 0xc8
 800e316:	f7f3 fb4d 	bl	80019b4 <HAL_Delay>
  return USBH_OK;
 800e31a:	2300      	movs	r3, #0
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	3708      	adds	r7, #8
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}

0800e324 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e324:	b480      	push	{r7}
 800e326:	b085      	sub	sp, #20
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	460b      	mov	r3, r1
 800e32e:	70fb      	strb	r3, [r7, #3]
 800e330:	4613      	mov	r3, r2
 800e332:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e33a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e33c:	78fb      	ldrb	r3, [r7, #3]
 800e33e:	68fa      	ldr	r2, [r7, #12]
 800e340:	212c      	movs	r1, #44	; 0x2c
 800e342:	fb01 f303 	mul.w	r3, r1, r3
 800e346:	4413      	add	r3, r2
 800e348:	333b      	adds	r3, #59	; 0x3b
 800e34a:	781b      	ldrb	r3, [r3, #0]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d009      	beq.n	800e364 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e350:	78fb      	ldrb	r3, [r7, #3]
 800e352:	68fa      	ldr	r2, [r7, #12]
 800e354:	212c      	movs	r1, #44	; 0x2c
 800e356:	fb01 f303 	mul.w	r3, r1, r3
 800e35a:	4413      	add	r3, r2
 800e35c:	3354      	adds	r3, #84	; 0x54
 800e35e:	78ba      	ldrb	r2, [r7, #2]
 800e360:	701a      	strb	r2, [r3, #0]
 800e362:	e008      	b.n	800e376 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e364:	78fb      	ldrb	r3, [r7, #3]
 800e366:	68fa      	ldr	r2, [r7, #12]
 800e368:	212c      	movs	r1, #44	; 0x2c
 800e36a:	fb01 f303 	mul.w	r3, r1, r3
 800e36e:	4413      	add	r3, r2
 800e370:	3355      	adds	r3, #85	; 0x55
 800e372:	78ba      	ldrb	r2, [r7, #2]
 800e374:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e376:	2300      	movs	r3, #0
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3714      	adds	r7, #20
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr

0800e384 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b082      	sub	sp, #8
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f7f3 fb11 	bl	80019b4 <HAL_Delay>
}
 800e392:	bf00      	nop
 800e394:	3708      	adds	r7, #8
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}
	...

0800e39c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e39c:	b480      	push	{r7}
 800e39e:	b085      	sub	sp, #20
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e3aa:	79fb      	ldrb	r3, [r7, #7]
 800e3ac:	2b03      	cmp	r3, #3
 800e3ae:	d817      	bhi.n	800e3e0 <USBH_Get_USB_Status+0x44>
 800e3b0:	a201      	add	r2, pc, #4	; (adr r2, 800e3b8 <USBH_Get_USB_Status+0x1c>)
 800e3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3b6:	bf00      	nop
 800e3b8:	0800e3c9 	.word	0x0800e3c9
 800e3bc:	0800e3cf 	.word	0x0800e3cf
 800e3c0:	0800e3d5 	.word	0x0800e3d5
 800e3c4:	0800e3db 	.word	0x0800e3db
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	73fb      	strb	r3, [r7, #15]
    break;
 800e3cc:	e00b      	b.n	800e3e6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e3ce:	2302      	movs	r3, #2
 800e3d0:	73fb      	strb	r3, [r7, #15]
    break;
 800e3d2:	e008      	b.n	800e3e6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	73fb      	strb	r3, [r7, #15]
    break;
 800e3d8:	e005      	b.n	800e3e6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e3da:	2302      	movs	r3, #2
 800e3dc:	73fb      	strb	r3, [r7, #15]
    break;
 800e3de:	e002      	b.n	800e3e6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e3e0:	2302      	movs	r3, #2
 800e3e2:	73fb      	strb	r3, [r7, #15]
    break;
 800e3e4:	bf00      	nop
  }
  return usb_status;
 800e3e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3714      	adds	r7, #20
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f2:	4770      	bx	lr

0800e3f4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b084      	sub	sp, #16
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e3fe:	79fb      	ldrb	r3, [r7, #7]
 800e400:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800e402:	79fb      	ldrb	r3, [r7, #7]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d102      	bne.n	800e40e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800e408:	2301      	movs	r3, #1
 800e40a:	73fb      	strb	r3, [r7, #15]
 800e40c:	e001      	b.n	800e412 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800e40e:	2300      	movs	r3, #0
 800e410:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,(GPIO_PinState)data);
 800e412:	7bfb      	ldrb	r3, [r7, #15]
 800e414:	461a      	mov	r2, r3
 800e416:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e41a:	4803      	ldr	r0, [pc, #12]	; (800e428 <MX_DriverVbusFS+0x34>)
 800e41c:	f7f4 ff54 	bl	80032c8 <HAL_GPIO_WritePin>
}
 800e420:	bf00      	nop
 800e422:	3710      	adds	r7, #16
 800e424:	46bd      	mov	sp, r7
 800e426:	bd80      	pop	{r7, pc}
 800e428:	58020c00 	.word	0x58020c00

0800e42c <__errno>:
 800e42c:	4b01      	ldr	r3, [pc, #4]	; (800e434 <__errno+0x8>)
 800e42e:	6818      	ldr	r0, [r3, #0]
 800e430:	4770      	bx	lr
 800e432:	bf00      	nop
 800e434:	24000030 	.word	0x24000030

0800e438 <__libc_init_array>:
 800e438:	b570      	push	{r4, r5, r6, lr}
 800e43a:	4d0d      	ldr	r5, [pc, #52]	; (800e470 <__libc_init_array+0x38>)
 800e43c:	4c0d      	ldr	r4, [pc, #52]	; (800e474 <__libc_init_array+0x3c>)
 800e43e:	1b64      	subs	r4, r4, r5
 800e440:	10a4      	asrs	r4, r4, #2
 800e442:	2600      	movs	r6, #0
 800e444:	42a6      	cmp	r6, r4
 800e446:	d109      	bne.n	800e45c <__libc_init_array+0x24>
 800e448:	4d0b      	ldr	r5, [pc, #44]	; (800e478 <__libc_init_array+0x40>)
 800e44a:	4c0c      	ldr	r4, [pc, #48]	; (800e47c <__libc_init_array+0x44>)
 800e44c:	f000 fc7e 	bl	800ed4c <_init>
 800e450:	1b64      	subs	r4, r4, r5
 800e452:	10a4      	asrs	r4, r4, #2
 800e454:	2600      	movs	r6, #0
 800e456:	42a6      	cmp	r6, r4
 800e458:	d105      	bne.n	800e466 <__libc_init_array+0x2e>
 800e45a:	bd70      	pop	{r4, r5, r6, pc}
 800e45c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e460:	4798      	blx	r3
 800e462:	3601      	adds	r6, #1
 800e464:	e7ee      	b.n	800e444 <__libc_init_array+0xc>
 800e466:	f855 3b04 	ldr.w	r3, [r5], #4
 800e46a:	4798      	blx	r3
 800e46c:	3601      	adds	r6, #1
 800e46e:	e7f2      	b.n	800e456 <__libc_init_array+0x1e>
 800e470:	0800efc0 	.word	0x0800efc0
 800e474:	0800efc0 	.word	0x0800efc0
 800e478:	0800efc0 	.word	0x0800efc0
 800e47c:	0800efc4 	.word	0x0800efc4

0800e480 <malloc>:
 800e480:	4b02      	ldr	r3, [pc, #8]	; (800e48c <malloc+0xc>)
 800e482:	4601      	mov	r1, r0
 800e484:	6818      	ldr	r0, [r3, #0]
 800e486:	f000 b863 	b.w	800e550 <_malloc_r>
 800e48a:	bf00      	nop
 800e48c:	24000030 	.word	0x24000030

0800e490 <free>:
 800e490:	4b02      	ldr	r3, [pc, #8]	; (800e49c <free+0xc>)
 800e492:	4601      	mov	r1, r0
 800e494:	6818      	ldr	r0, [r3, #0]
 800e496:	f000 b80b 	b.w	800e4b0 <_free_r>
 800e49a:	bf00      	nop
 800e49c:	24000030 	.word	0x24000030

0800e4a0 <memset>:
 800e4a0:	4402      	add	r2, r0
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d100      	bne.n	800e4aa <memset+0xa>
 800e4a8:	4770      	bx	lr
 800e4aa:	f803 1b01 	strb.w	r1, [r3], #1
 800e4ae:	e7f9      	b.n	800e4a4 <memset+0x4>

0800e4b0 <_free_r>:
 800e4b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e4b2:	2900      	cmp	r1, #0
 800e4b4:	d048      	beq.n	800e548 <_free_r+0x98>
 800e4b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4ba:	9001      	str	r0, [sp, #4]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	f1a1 0404 	sub.w	r4, r1, #4
 800e4c2:	bfb8      	it	lt
 800e4c4:	18e4      	addlt	r4, r4, r3
 800e4c6:	f000 f8ed 	bl	800e6a4 <__malloc_lock>
 800e4ca:	4a20      	ldr	r2, [pc, #128]	; (800e54c <_free_r+0x9c>)
 800e4cc:	9801      	ldr	r0, [sp, #4]
 800e4ce:	6813      	ldr	r3, [r2, #0]
 800e4d0:	4615      	mov	r5, r2
 800e4d2:	b933      	cbnz	r3, 800e4e2 <_free_r+0x32>
 800e4d4:	6063      	str	r3, [r4, #4]
 800e4d6:	6014      	str	r4, [r2, #0]
 800e4d8:	b003      	add	sp, #12
 800e4da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4de:	f000 b8e7 	b.w	800e6b0 <__malloc_unlock>
 800e4e2:	42a3      	cmp	r3, r4
 800e4e4:	d90b      	bls.n	800e4fe <_free_r+0x4e>
 800e4e6:	6821      	ldr	r1, [r4, #0]
 800e4e8:	1862      	adds	r2, r4, r1
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	bf04      	itt	eq
 800e4ee:	681a      	ldreq	r2, [r3, #0]
 800e4f0:	685b      	ldreq	r3, [r3, #4]
 800e4f2:	6063      	str	r3, [r4, #4]
 800e4f4:	bf04      	itt	eq
 800e4f6:	1852      	addeq	r2, r2, r1
 800e4f8:	6022      	streq	r2, [r4, #0]
 800e4fa:	602c      	str	r4, [r5, #0]
 800e4fc:	e7ec      	b.n	800e4d8 <_free_r+0x28>
 800e4fe:	461a      	mov	r2, r3
 800e500:	685b      	ldr	r3, [r3, #4]
 800e502:	b10b      	cbz	r3, 800e508 <_free_r+0x58>
 800e504:	42a3      	cmp	r3, r4
 800e506:	d9fa      	bls.n	800e4fe <_free_r+0x4e>
 800e508:	6811      	ldr	r1, [r2, #0]
 800e50a:	1855      	adds	r5, r2, r1
 800e50c:	42a5      	cmp	r5, r4
 800e50e:	d10b      	bne.n	800e528 <_free_r+0x78>
 800e510:	6824      	ldr	r4, [r4, #0]
 800e512:	4421      	add	r1, r4
 800e514:	1854      	adds	r4, r2, r1
 800e516:	42a3      	cmp	r3, r4
 800e518:	6011      	str	r1, [r2, #0]
 800e51a:	d1dd      	bne.n	800e4d8 <_free_r+0x28>
 800e51c:	681c      	ldr	r4, [r3, #0]
 800e51e:	685b      	ldr	r3, [r3, #4]
 800e520:	6053      	str	r3, [r2, #4]
 800e522:	4421      	add	r1, r4
 800e524:	6011      	str	r1, [r2, #0]
 800e526:	e7d7      	b.n	800e4d8 <_free_r+0x28>
 800e528:	d902      	bls.n	800e530 <_free_r+0x80>
 800e52a:	230c      	movs	r3, #12
 800e52c:	6003      	str	r3, [r0, #0]
 800e52e:	e7d3      	b.n	800e4d8 <_free_r+0x28>
 800e530:	6825      	ldr	r5, [r4, #0]
 800e532:	1961      	adds	r1, r4, r5
 800e534:	428b      	cmp	r3, r1
 800e536:	bf04      	itt	eq
 800e538:	6819      	ldreq	r1, [r3, #0]
 800e53a:	685b      	ldreq	r3, [r3, #4]
 800e53c:	6063      	str	r3, [r4, #4]
 800e53e:	bf04      	itt	eq
 800e540:	1949      	addeq	r1, r1, r5
 800e542:	6021      	streq	r1, [r4, #0]
 800e544:	6054      	str	r4, [r2, #4]
 800e546:	e7c7      	b.n	800e4d8 <_free_r+0x28>
 800e548:	b003      	add	sp, #12
 800e54a:	bd30      	pop	{r4, r5, pc}
 800e54c:	24000294 	.word	0x24000294

0800e550 <_malloc_r>:
 800e550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e552:	1ccd      	adds	r5, r1, #3
 800e554:	f025 0503 	bic.w	r5, r5, #3
 800e558:	3508      	adds	r5, #8
 800e55a:	2d0c      	cmp	r5, #12
 800e55c:	bf38      	it	cc
 800e55e:	250c      	movcc	r5, #12
 800e560:	2d00      	cmp	r5, #0
 800e562:	4606      	mov	r6, r0
 800e564:	db01      	blt.n	800e56a <_malloc_r+0x1a>
 800e566:	42a9      	cmp	r1, r5
 800e568:	d903      	bls.n	800e572 <_malloc_r+0x22>
 800e56a:	230c      	movs	r3, #12
 800e56c:	6033      	str	r3, [r6, #0]
 800e56e:	2000      	movs	r0, #0
 800e570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e572:	f000 f897 	bl	800e6a4 <__malloc_lock>
 800e576:	4921      	ldr	r1, [pc, #132]	; (800e5fc <_malloc_r+0xac>)
 800e578:	680a      	ldr	r2, [r1, #0]
 800e57a:	4614      	mov	r4, r2
 800e57c:	b99c      	cbnz	r4, 800e5a6 <_malloc_r+0x56>
 800e57e:	4f20      	ldr	r7, [pc, #128]	; (800e600 <_malloc_r+0xb0>)
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	b923      	cbnz	r3, 800e58e <_malloc_r+0x3e>
 800e584:	4621      	mov	r1, r4
 800e586:	4630      	mov	r0, r6
 800e588:	f000 f83c 	bl	800e604 <_sbrk_r>
 800e58c:	6038      	str	r0, [r7, #0]
 800e58e:	4629      	mov	r1, r5
 800e590:	4630      	mov	r0, r6
 800e592:	f000 f837 	bl	800e604 <_sbrk_r>
 800e596:	1c43      	adds	r3, r0, #1
 800e598:	d123      	bne.n	800e5e2 <_malloc_r+0x92>
 800e59a:	230c      	movs	r3, #12
 800e59c:	6033      	str	r3, [r6, #0]
 800e59e:	4630      	mov	r0, r6
 800e5a0:	f000 f886 	bl	800e6b0 <__malloc_unlock>
 800e5a4:	e7e3      	b.n	800e56e <_malloc_r+0x1e>
 800e5a6:	6823      	ldr	r3, [r4, #0]
 800e5a8:	1b5b      	subs	r3, r3, r5
 800e5aa:	d417      	bmi.n	800e5dc <_malloc_r+0x8c>
 800e5ac:	2b0b      	cmp	r3, #11
 800e5ae:	d903      	bls.n	800e5b8 <_malloc_r+0x68>
 800e5b0:	6023      	str	r3, [r4, #0]
 800e5b2:	441c      	add	r4, r3
 800e5b4:	6025      	str	r5, [r4, #0]
 800e5b6:	e004      	b.n	800e5c2 <_malloc_r+0x72>
 800e5b8:	6863      	ldr	r3, [r4, #4]
 800e5ba:	42a2      	cmp	r2, r4
 800e5bc:	bf0c      	ite	eq
 800e5be:	600b      	streq	r3, [r1, #0]
 800e5c0:	6053      	strne	r3, [r2, #4]
 800e5c2:	4630      	mov	r0, r6
 800e5c4:	f000 f874 	bl	800e6b0 <__malloc_unlock>
 800e5c8:	f104 000b 	add.w	r0, r4, #11
 800e5cc:	1d23      	adds	r3, r4, #4
 800e5ce:	f020 0007 	bic.w	r0, r0, #7
 800e5d2:	1ac2      	subs	r2, r0, r3
 800e5d4:	d0cc      	beq.n	800e570 <_malloc_r+0x20>
 800e5d6:	1a1b      	subs	r3, r3, r0
 800e5d8:	50a3      	str	r3, [r4, r2]
 800e5da:	e7c9      	b.n	800e570 <_malloc_r+0x20>
 800e5dc:	4622      	mov	r2, r4
 800e5de:	6864      	ldr	r4, [r4, #4]
 800e5e0:	e7cc      	b.n	800e57c <_malloc_r+0x2c>
 800e5e2:	1cc4      	adds	r4, r0, #3
 800e5e4:	f024 0403 	bic.w	r4, r4, #3
 800e5e8:	42a0      	cmp	r0, r4
 800e5ea:	d0e3      	beq.n	800e5b4 <_malloc_r+0x64>
 800e5ec:	1a21      	subs	r1, r4, r0
 800e5ee:	4630      	mov	r0, r6
 800e5f0:	f000 f808 	bl	800e604 <_sbrk_r>
 800e5f4:	3001      	adds	r0, #1
 800e5f6:	d1dd      	bne.n	800e5b4 <_malloc_r+0x64>
 800e5f8:	e7cf      	b.n	800e59a <_malloc_r+0x4a>
 800e5fa:	bf00      	nop
 800e5fc:	24000294 	.word	0x24000294
 800e600:	24000298 	.word	0x24000298

0800e604 <_sbrk_r>:
 800e604:	b538      	push	{r3, r4, r5, lr}
 800e606:	4d06      	ldr	r5, [pc, #24]	; (800e620 <_sbrk_r+0x1c>)
 800e608:	2300      	movs	r3, #0
 800e60a:	4604      	mov	r4, r0
 800e60c:	4608      	mov	r0, r1
 800e60e:	602b      	str	r3, [r5, #0]
 800e610:	f7f3 f852 	bl	80016b8 <_sbrk>
 800e614:	1c43      	adds	r3, r0, #1
 800e616:	d102      	bne.n	800e61e <_sbrk_r+0x1a>
 800e618:	682b      	ldr	r3, [r5, #0]
 800e61a:	b103      	cbz	r3, 800e61e <_sbrk_r+0x1a>
 800e61c:	6023      	str	r3, [r4, #0]
 800e61e:	bd38      	pop	{r3, r4, r5, pc}
 800e620:	24001110 	.word	0x24001110

0800e624 <siprintf>:
 800e624:	b40e      	push	{r1, r2, r3}
 800e626:	b500      	push	{lr}
 800e628:	b09c      	sub	sp, #112	; 0x70
 800e62a:	ab1d      	add	r3, sp, #116	; 0x74
 800e62c:	9002      	str	r0, [sp, #8]
 800e62e:	9006      	str	r0, [sp, #24]
 800e630:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e634:	4809      	ldr	r0, [pc, #36]	; (800e65c <siprintf+0x38>)
 800e636:	9107      	str	r1, [sp, #28]
 800e638:	9104      	str	r1, [sp, #16]
 800e63a:	4909      	ldr	r1, [pc, #36]	; (800e660 <siprintf+0x3c>)
 800e63c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e640:	9105      	str	r1, [sp, #20]
 800e642:	6800      	ldr	r0, [r0, #0]
 800e644:	9301      	str	r3, [sp, #4]
 800e646:	a902      	add	r1, sp, #8
 800e648:	f000 f894 	bl	800e774 <_svfiprintf_r>
 800e64c:	9b02      	ldr	r3, [sp, #8]
 800e64e:	2200      	movs	r2, #0
 800e650:	701a      	strb	r2, [r3, #0]
 800e652:	b01c      	add	sp, #112	; 0x70
 800e654:	f85d eb04 	ldr.w	lr, [sp], #4
 800e658:	b003      	add	sp, #12
 800e65a:	4770      	bx	lr
 800e65c:	24000030 	.word	0x24000030
 800e660:	ffff0208 	.word	0xffff0208

0800e664 <strcpy>:
 800e664:	4603      	mov	r3, r0
 800e666:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e66a:	f803 2b01 	strb.w	r2, [r3], #1
 800e66e:	2a00      	cmp	r2, #0
 800e670:	d1f9      	bne.n	800e666 <strcpy+0x2>
 800e672:	4770      	bx	lr

0800e674 <strstr>:
 800e674:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e676:	780c      	ldrb	r4, [r1, #0]
 800e678:	b164      	cbz	r4, 800e694 <strstr+0x20>
 800e67a:	4603      	mov	r3, r0
 800e67c:	781a      	ldrb	r2, [r3, #0]
 800e67e:	4618      	mov	r0, r3
 800e680:	1c5e      	adds	r6, r3, #1
 800e682:	b90a      	cbnz	r2, 800e688 <strstr+0x14>
 800e684:	4610      	mov	r0, r2
 800e686:	e005      	b.n	800e694 <strstr+0x20>
 800e688:	4294      	cmp	r4, r2
 800e68a:	d108      	bne.n	800e69e <strstr+0x2a>
 800e68c:	460d      	mov	r5, r1
 800e68e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800e692:	b902      	cbnz	r2, 800e696 <strstr+0x22>
 800e694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e696:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800e69a:	4297      	cmp	r7, r2
 800e69c:	d0f7      	beq.n	800e68e <strstr+0x1a>
 800e69e:	4633      	mov	r3, r6
 800e6a0:	e7ec      	b.n	800e67c <strstr+0x8>
	...

0800e6a4 <__malloc_lock>:
 800e6a4:	4801      	ldr	r0, [pc, #4]	; (800e6ac <__malloc_lock+0x8>)
 800e6a6:	f000 baf9 	b.w	800ec9c <__retarget_lock_acquire_recursive>
 800e6aa:	bf00      	nop
 800e6ac:	24001118 	.word	0x24001118

0800e6b0 <__malloc_unlock>:
 800e6b0:	4801      	ldr	r0, [pc, #4]	; (800e6b8 <__malloc_unlock+0x8>)
 800e6b2:	f000 baf4 	b.w	800ec9e <__retarget_lock_release_recursive>
 800e6b6:	bf00      	nop
 800e6b8:	24001118 	.word	0x24001118

0800e6bc <__ssputs_r>:
 800e6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6c0:	688e      	ldr	r6, [r1, #8]
 800e6c2:	429e      	cmp	r6, r3
 800e6c4:	4682      	mov	sl, r0
 800e6c6:	460c      	mov	r4, r1
 800e6c8:	4690      	mov	r8, r2
 800e6ca:	461f      	mov	r7, r3
 800e6cc:	d838      	bhi.n	800e740 <__ssputs_r+0x84>
 800e6ce:	898a      	ldrh	r2, [r1, #12]
 800e6d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e6d4:	d032      	beq.n	800e73c <__ssputs_r+0x80>
 800e6d6:	6825      	ldr	r5, [r4, #0]
 800e6d8:	6909      	ldr	r1, [r1, #16]
 800e6da:	eba5 0901 	sub.w	r9, r5, r1
 800e6de:	6965      	ldr	r5, [r4, #20]
 800e6e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e6e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	444b      	add	r3, r9
 800e6ec:	106d      	asrs	r5, r5, #1
 800e6ee:	429d      	cmp	r5, r3
 800e6f0:	bf38      	it	cc
 800e6f2:	461d      	movcc	r5, r3
 800e6f4:	0553      	lsls	r3, r2, #21
 800e6f6:	d531      	bpl.n	800e75c <__ssputs_r+0xa0>
 800e6f8:	4629      	mov	r1, r5
 800e6fa:	f7ff ff29 	bl	800e550 <_malloc_r>
 800e6fe:	4606      	mov	r6, r0
 800e700:	b950      	cbnz	r0, 800e718 <__ssputs_r+0x5c>
 800e702:	230c      	movs	r3, #12
 800e704:	f8ca 3000 	str.w	r3, [sl]
 800e708:	89a3      	ldrh	r3, [r4, #12]
 800e70a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e70e:	81a3      	strh	r3, [r4, #12]
 800e710:	f04f 30ff 	mov.w	r0, #4294967295
 800e714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e718:	6921      	ldr	r1, [r4, #16]
 800e71a:	464a      	mov	r2, r9
 800e71c:	f000 fac0 	bl	800eca0 <memcpy>
 800e720:	89a3      	ldrh	r3, [r4, #12]
 800e722:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e72a:	81a3      	strh	r3, [r4, #12]
 800e72c:	6126      	str	r6, [r4, #16]
 800e72e:	6165      	str	r5, [r4, #20]
 800e730:	444e      	add	r6, r9
 800e732:	eba5 0509 	sub.w	r5, r5, r9
 800e736:	6026      	str	r6, [r4, #0]
 800e738:	60a5      	str	r5, [r4, #8]
 800e73a:	463e      	mov	r6, r7
 800e73c:	42be      	cmp	r6, r7
 800e73e:	d900      	bls.n	800e742 <__ssputs_r+0x86>
 800e740:	463e      	mov	r6, r7
 800e742:	4632      	mov	r2, r6
 800e744:	6820      	ldr	r0, [r4, #0]
 800e746:	4641      	mov	r1, r8
 800e748:	f000 fab8 	bl	800ecbc <memmove>
 800e74c:	68a3      	ldr	r3, [r4, #8]
 800e74e:	6822      	ldr	r2, [r4, #0]
 800e750:	1b9b      	subs	r3, r3, r6
 800e752:	4432      	add	r2, r6
 800e754:	60a3      	str	r3, [r4, #8]
 800e756:	6022      	str	r2, [r4, #0]
 800e758:	2000      	movs	r0, #0
 800e75a:	e7db      	b.n	800e714 <__ssputs_r+0x58>
 800e75c:	462a      	mov	r2, r5
 800e75e:	f000 fac7 	bl	800ecf0 <_realloc_r>
 800e762:	4606      	mov	r6, r0
 800e764:	2800      	cmp	r0, #0
 800e766:	d1e1      	bne.n	800e72c <__ssputs_r+0x70>
 800e768:	6921      	ldr	r1, [r4, #16]
 800e76a:	4650      	mov	r0, sl
 800e76c:	f7ff fea0 	bl	800e4b0 <_free_r>
 800e770:	e7c7      	b.n	800e702 <__ssputs_r+0x46>
	...

0800e774 <_svfiprintf_r>:
 800e774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e778:	4698      	mov	r8, r3
 800e77a:	898b      	ldrh	r3, [r1, #12]
 800e77c:	061b      	lsls	r3, r3, #24
 800e77e:	b09d      	sub	sp, #116	; 0x74
 800e780:	4607      	mov	r7, r0
 800e782:	460d      	mov	r5, r1
 800e784:	4614      	mov	r4, r2
 800e786:	d50e      	bpl.n	800e7a6 <_svfiprintf_r+0x32>
 800e788:	690b      	ldr	r3, [r1, #16]
 800e78a:	b963      	cbnz	r3, 800e7a6 <_svfiprintf_r+0x32>
 800e78c:	2140      	movs	r1, #64	; 0x40
 800e78e:	f7ff fedf 	bl	800e550 <_malloc_r>
 800e792:	6028      	str	r0, [r5, #0]
 800e794:	6128      	str	r0, [r5, #16]
 800e796:	b920      	cbnz	r0, 800e7a2 <_svfiprintf_r+0x2e>
 800e798:	230c      	movs	r3, #12
 800e79a:	603b      	str	r3, [r7, #0]
 800e79c:	f04f 30ff 	mov.w	r0, #4294967295
 800e7a0:	e0d1      	b.n	800e946 <_svfiprintf_r+0x1d2>
 800e7a2:	2340      	movs	r3, #64	; 0x40
 800e7a4:	616b      	str	r3, [r5, #20]
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	9309      	str	r3, [sp, #36]	; 0x24
 800e7aa:	2320      	movs	r3, #32
 800e7ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e7b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7b4:	2330      	movs	r3, #48	; 0x30
 800e7b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e960 <_svfiprintf_r+0x1ec>
 800e7ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e7be:	f04f 0901 	mov.w	r9, #1
 800e7c2:	4623      	mov	r3, r4
 800e7c4:	469a      	mov	sl, r3
 800e7c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7ca:	b10a      	cbz	r2, 800e7d0 <_svfiprintf_r+0x5c>
 800e7cc:	2a25      	cmp	r2, #37	; 0x25
 800e7ce:	d1f9      	bne.n	800e7c4 <_svfiprintf_r+0x50>
 800e7d0:	ebba 0b04 	subs.w	fp, sl, r4
 800e7d4:	d00b      	beq.n	800e7ee <_svfiprintf_r+0x7a>
 800e7d6:	465b      	mov	r3, fp
 800e7d8:	4622      	mov	r2, r4
 800e7da:	4629      	mov	r1, r5
 800e7dc:	4638      	mov	r0, r7
 800e7de:	f7ff ff6d 	bl	800e6bc <__ssputs_r>
 800e7e2:	3001      	adds	r0, #1
 800e7e4:	f000 80aa 	beq.w	800e93c <_svfiprintf_r+0x1c8>
 800e7e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7ea:	445a      	add	r2, fp
 800e7ec:	9209      	str	r2, [sp, #36]	; 0x24
 800e7ee:	f89a 3000 	ldrb.w	r3, [sl]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	f000 80a2 	beq.w	800e93c <_svfiprintf_r+0x1c8>
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e7fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e802:	f10a 0a01 	add.w	sl, sl, #1
 800e806:	9304      	str	r3, [sp, #16]
 800e808:	9307      	str	r3, [sp, #28]
 800e80a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e80e:	931a      	str	r3, [sp, #104]	; 0x68
 800e810:	4654      	mov	r4, sl
 800e812:	2205      	movs	r2, #5
 800e814:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e818:	4851      	ldr	r0, [pc, #324]	; (800e960 <_svfiprintf_r+0x1ec>)
 800e81a:	f7f1 fd69 	bl	80002f0 <memchr>
 800e81e:	9a04      	ldr	r2, [sp, #16]
 800e820:	b9d8      	cbnz	r0, 800e85a <_svfiprintf_r+0xe6>
 800e822:	06d0      	lsls	r0, r2, #27
 800e824:	bf44      	itt	mi
 800e826:	2320      	movmi	r3, #32
 800e828:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e82c:	0711      	lsls	r1, r2, #28
 800e82e:	bf44      	itt	mi
 800e830:	232b      	movmi	r3, #43	; 0x2b
 800e832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e836:	f89a 3000 	ldrb.w	r3, [sl]
 800e83a:	2b2a      	cmp	r3, #42	; 0x2a
 800e83c:	d015      	beq.n	800e86a <_svfiprintf_r+0xf6>
 800e83e:	9a07      	ldr	r2, [sp, #28]
 800e840:	4654      	mov	r4, sl
 800e842:	2000      	movs	r0, #0
 800e844:	f04f 0c0a 	mov.w	ip, #10
 800e848:	4621      	mov	r1, r4
 800e84a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e84e:	3b30      	subs	r3, #48	; 0x30
 800e850:	2b09      	cmp	r3, #9
 800e852:	d94e      	bls.n	800e8f2 <_svfiprintf_r+0x17e>
 800e854:	b1b0      	cbz	r0, 800e884 <_svfiprintf_r+0x110>
 800e856:	9207      	str	r2, [sp, #28]
 800e858:	e014      	b.n	800e884 <_svfiprintf_r+0x110>
 800e85a:	eba0 0308 	sub.w	r3, r0, r8
 800e85e:	fa09 f303 	lsl.w	r3, r9, r3
 800e862:	4313      	orrs	r3, r2
 800e864:	9304      	str	r3, [sp, #16]
 800e866:	46a2      	mov	sl, r4
 800e868:	e7d2      	b.n	800e810 <_svfiprintf_r+0x9c>
 800e86a:	9b03      	ldr	r3, [sp, #12]
 800e86c:	1d19      	adds	r1, r3, #4
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	9103      	str	r1, [sp, #12]
 800e872:	2b00      	cmp	r3, #0
 800e874:	bfbb      	ittet	lt
 800e876:	425b      	neglt	r3, r3
 800e878:	f042 0202 	orrlt.w	r2, r2, #2
 800e87c:	9307      	strge	r3, [sp, #28]
 800e87e:	9307      	strlt	r3, [sp, #28]
 800e880:	bfb8      	it	lt
 800e882:	9204      	strlt	r2, [sp, #16]
 800e884:	7823      	ldrb	r3, [r4, #0]
 800e886:	2b2e      	cmp	r3, #46	; 0x2e
 800e888:	d10c      	bne.n	800e8a4 <_svfiprintf_r+0x130>
 800e88a:	7863      	ldrb	r3, [r4, #1]
 800e88c:	2b2a      	cmp	r3, #42	; 0x2a
 800e88e:	d135      	bne.n	800e8fc <_svfiprintf_r+0x188>
 800e890:	9b03      	ldr	r3, [sp, #12]
 800e892:	1d1a      	adds	r2, r3, #4
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	9203      	str	r2, [sp, #12]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	bfb8      	it	lt
 800e89c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e8a0:	3402      	adds	r4, #2
 800e8a2:	9305      	str	r3, [sp, #20]
 800e8a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e970 <_svfiprintf_r+0x1fc>
 800e8a8:	7821      	ldrb	r1, [r4, #0]
 800e8aa:	2203      	movs	r2, #3
 800e8ac:	4650      	mov	r0, sl
 800e8ae:	f7f1 fd1f 	bl	80002f0 <memchr>
 800e8b2:	b140      	cbz	r0, 800e8c6 <_svfiprintf_r+0x152>
 800e8b4:	2340      	movs	r3, #64	; 0x40
 800e8b6:	eba0 000a 	sub.w	r0, r0, sl
 800e8ba:	fa03 f000 	lsl.w	r0, r3, r0
 800e8be:	9b04      	ldr	r3, [sp, #16]
 800e8c0:	4303      	orrs	r3, r0
 800e8c2:	3401      	adds	r4, #1
 800e8c4:	9304      	str	r3, [sp, #16]
 800e8c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8ca:	4826      	ldr	r0, [pc, #152]	; (800e964 <_svfiprintf_r+0x1f0>)
 800e8cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e8d0:	2206      	movs	r2, #6
 800e8d2:	f7f1 fd0d 	bl	80002f0 <memchr>
 800e8d6:	2800      	cmp	r0, #0
 800e8d8:	d038      	beq.n	800e94c <_svfiprintf_r+0x1d8>
 800e8da:	4b23      	ldr	r3, [pc, #140]	; (800e968 <_svfiprintf_r+0x1f4>)
 800e8dc:	bb1b      	cbnz	r3, 800e926 <_svfiprintf_r+0x1b2>
 800e8de:	9b03      	ldr	r3, [sp, #12]
 800e8e0:	3307      	adds	r3, #7
 800e8e2:	f023 0307 	bic.w	r3, r3, #7
 800e8e6:	3308      	adds	r3, #8
 800e8e8:	9303      	str	r3, [sp, #12]
 800e8ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8ec:	4433      	add	r3, r6
 800e8ee:	9309      	str	r3, [sp, #36]	; 0x24
 800e8f0:	e767      	b.n	800e7c2 <_svfiprintf_r+0x4e>
 800e8f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8f6:	460c      	mov	r4, r1
 800e8f8:	2001      	movs	r0, #1
 800e8fa:	e7a5      	b.n	800e848 <_svfiprintf_r+0xd4>
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	3401      	adds	r4, #1
 800e900:	9305      	str	r3, [sp, #20]
 800e902:	4619      	mov	r1, r3
 800e904:	f04f 0c0a 	mov.w	ip, #10
 800e908:	4620      	mov	r0, r4
 800e90a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e90e:	3a30      	subs	r2, #48	; 0x30
 800e910:	2a09      	cmp	r2, #9
 800e912:	d903      	bls.n	800e91c <_svfiprintf_r+0x1a8>
 800e914:	2b00      	cmp	r3, #0
 800e916:	d0c5      	beq.n	800e8a4 <_svfiprintf_r+0x130>
 800e918:	9105      	str	r1, [sp, #20]
 800e91a:	e7c3      	b.n	800e8a4 <_svfiprintf_r+0x130>
 800e91c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e920:	4604      	mov	r4, r0
 800e922:	2301      	movs	r3, #1
 800e924:	e7f0      	b.n	800e908 <_svfiprintf_r+0x194>
 800e926:	ab03      	add	r3, sp, #12
 800e928:	9300      	str	r3, [sp, #0]
 800e92a:	462a      	mov	r2, r5
 800e92c:	4b0f      	ldr	r3, [pc, #60]	; (800e96c <_svfiprintf_r+0x1f8>)
 800e92e:	a904      	add	r1, sp, #16
 800e930:	4638      	mov	r0, r7
 800e932:	f3af 8000 	nop.w
 800e936:	1c42      	adds	r2, r0, #1
 800e938:	4606      	mov	r6, r0
 800e93a:	d1d6      	bne.n	800e8ea <_svfiprintf_r+0x176>
 800e93c:	89ab      	ldrh	r3, [r5, #12]
 800e93e:	065b      	lsls	r3, r3, #25
 800e940:	f53f af2c 	bmi.w	800e79c <_svfiprintf_r+0x28>
 800e944:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e946:	b01d      	add	sp, #116	; 0x74
 800e948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e94c:	ab03      	add	r3, sp, #12
 800e94e:	9300      	str	r3, [sp, #0]
 800e950:	462a      	mov	r2, r5
 800e952:	4b06      	ldr	r3, [pc, #24]	; (800e96c <_svfiprintf_r+0x1f8>)
 800e954:	a904      	add	r1, sp, #16
 800e956:	4638      	mov	r0, r7
 800e958:	f000 f87a 	bl	800ea50 <_printf_i>
 800e95c:	e7eb      	b.n	800e936 <_svfiprintf_r+0x1c2>
 800e95e:	bf00      	nop
 800e960:	0800ef84 	.word	0x0800ef84
 800e964:	0800ef8e 	.word	0x0800ef8e
 800e968:	00000000 	.word	0x00000000
 800e96c:	0800e6bd 	.word	0x0800e6bd
 800e970:	0800ef8a 	.word	0x0800ef8a

0800e974 <_printf_common>:
 800e974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e978:	4616      	mov	r6, r2
 800e97a:	4699      	mov	r9, r3
 800e97c:	688a      	ldr	r2, [r1, #8]
 800e97e:	690b      	ldr	r3, [r1, #16]
 800e980:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e984:	4293      	cmp	r3, r2
 800e986:	bfb8      	it	lt
 800e988:	4613      	movlt	r3, r2
 800e98a:	6033      	str	r3, [r6, #0]
 800e98c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e990:	4607      	mov	r7, r0
 800e992:	460c      	mov	r4, r1
 800e994:	b10a      	cbz	r2, 800e99a <_printf_common+0x26>
 800e996:	3301      	adds	r3, #1
 800e998:	6033      	str	r3, [r6, #0]
 800e99a:	6823      	ldr	r3, [r4, #0]
 800e99c:	0699      	lsls	r1, r3, #26
 800e99e:	bf42      	ittt	mi
 800e9a0:	6833      	ldrmi	r3, [r6, #0]
 800e9a2:	3302      	addmi	r3, #2
 800e9a4:	6033      	strmi	r3, [r6, #0]
 800e9a6:	6825      	ldr	r5, [r4, #0]
 800e9a8:	f015 0506 	ands.w	r5, r5, #6
 800e9ac:	d106      	bne.n	800e9bc <_printf_common+0x48>
 800e9ae:	f104 0a19 	add.w	sl, r4, #25
 800e9b2:	68e3      	ldr	r3, [r4, #12]
 800e9b4:	6832      	ldr	r2, [r6, #0]
 800e9b6:	1a9b      	subs	r3, r3, r2
 800e9b8:	42ab      	cmp	r3, r5
 800e9ba:	dc26      	bgt.n	800ea0a <_printf_common+0x96>
 800e9bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e9c0:	1e13      	subs	r3, r2, #0
 800e9c2:	6822      	ldr	r2, [r4, #0]
 800e9c4:	bf18      	it	ne
 800e9c6:	2301      	movne	r3, #1
 800e9c8:	0692      	lsls	r2, r2, #26
 800e9ca:	d42b      	bmi.n	800ea24 <_printf_common+0xb0>
 800e9cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e9d0:	4649      	mov	r1, r9
 800e9d2:	4638      	mov	r0, r7
 800e9d4:	47c0      	blx	r8
 800e9d6:	3001      	adds	r0, #1
 800e9d8:	d01e      	beq.n	800ea18 <_printf_common+0xa4>
 800e9da:	6823      	ldr	r3, [r4, #0]
 800e9dc:	68e5      	ldr	r5, [r4, #12]
 800e9de:	6832      	ldr	r2, [r6, #0]
 800e9e0:	f003 0306 	and.w	r3, r3, #6
 800e9e4:	2b04      	cmp	r3, #4
 800e9e6:	bf08      	it	eq
 800e9e8:	1aad      	subeq	r5, r5, r2
 800e9ea:	68a3      	ldr	r3, [r4, #8]
 800e9ec:	6922      	ldr	r2, [r4, #16]
 800e9ee:	bf0c      	ite	eq
 800e9f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e9f4:	2500      	movne	r5, #0
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	bfc4      	itt	gt
 800e9fa:	1a9b      	subgt	r3, r3, r2
 800e9fc:	18ed      	addgt	r5, r5, r3
 800e9fe:	2600      	movs	r6, #0
 800ea00:	341a      	adds	r4, #26
 800ea02:	42b5      	cmp	r5, r6
 800ea04:	d11a      	bne.n	800ea3c <_printf_common+0xc8>
 800ea06:	2000      	movs	r0, #0
 800ea08:	e008      	b.n	800ea1c <_printf_common+0xa8>
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	4652      	mov	r2, sl
 800ea0e:	4649      	mov	r1, r9
 800ea10:	4638      	mov	r0, r7
 800ea12:	47c0      	blx	r8
 800ea14:	3001      	adds	r0, #1
 800ea16:	d103      	bne.n	800ea20 <_printf_common+0xac>
 800ea18:	f04f 30ff 	mov.w	r0, #4294967295
 800ea1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea20:	3501      	adds	r5, #1
 800ea22:	e7c6      	b.n	800e9b2 <_printf_common+0x3e>
 800ea24:	18e1      	adds	r1, r4, r3
 800ea26:	1c5a      	adds	r2, r3, #1
 800ea28:	2030      	movs	r0, #48	; 0x30
 800ea2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ea2e:	4422      	add	r2, r4
 800ea30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ea34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ea38:	3302      	adds	r3, #2
 800ea3a:	e7c7      	b.n	800e9cc <_printf_common+0x58>
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	4622      	mov	r2, r4
 800ea40:	4649      	mov	r1, r9
 800ea42:	4638      	mov	r0, r7
 800ea44:	47c0      	blx	r8
 800ea46:	3001      	adds	r0, #1
 800ea48:	d0e6      	beq.n	800ea18 <_printf_common+0xa4>
 800ea4a:	3601      	adds	r6, #1
 800ea4c:	e7d9      	b.n	800ea02 <_printf_common+0x8e>
	...

0800ea50 <_printf_i>:
 800ea50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea54:	460c      	mov	r4, r1
 800ea56:	4691      	mov	r9, r2
 800ea58:	7e27      	ldrb	r7, [r4, #24]
 800ea5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ea5c:	2f78      	cmp	r7, #120	; 0x78
 800ea5e:	4680      	mov	r8, r0
 800ea60:	469a      	mov	sl, r3
 800ea62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ea66:	d807      	bhi.n	800ea78 <_printf_i+0x28>
 800ea68:	2f62      	cmp	r7, #98	; 0x62
 800ea6a:	d80a      	bhi.n	800ea82 <_printf_i+0x32>
 800ea6c:	2f00      	cmp	r7, #0
 800ea6e:	f000 80d8 	beq.w	800ec22 <_printf_i+0x1d2>
 800ea72:	2f58      	cmp	r7, #88	; 0x58
 800ea74:	f000 80a3 	beq.w	800ebbe <_printf_i+0x16e>
 800ea78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ea7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ea80:	e03a      	b.n	800eaf8 <_printf_i+0xa8>
 800ea82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ea86:	2b15      	cmp	r3, #21
 800ea88:	d8f6      	bhi.n	800ea78 <_printf_i+0x28>
 800ea8a:	a001      	add	r0, pc, #4	; (adr r0, 800ea90 <_printf_i+0x40>)
 800ea8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ea90:	0800eae9 	.word	0x0800eae9
 800ea94:	0800eafd 	.word	0x0800eafd
 800ea98:	0800ea79 	.word	0x0800ea79
 800ea9c:	0800ea79 	.word	0x0800ea79
 800eaa0:	0800ea79 	.word	0x0800ea79
 800eaa4:	0800ea79 	.word	0x0800ea79
 800eaa8:	0800eafd 	.word	0x0800eafd
 800eaac:	0800ea79 	.word	0x0800ea79
 800eab0:	0800ea79 	.word	0x0800ea79
 800eab4:	0800ea79 	.word	0x0800ea79
 800eab8:	0800ea79 	.word	0x0800ea79
 800eabc:	0800ec09 	.word	0x0800ec09
 800eac0:	0800eb2d 	.word	0x0800eb2d
 800eac4:	0800ebeb 	.word	0x0800ebeb
 800eac8:	0800ea79 	.word	0x0800ea79
 800eacc:	0800ea79 	.word	0x0800ea79
 800ead0:	0800ec2b 	.word	0x0800ec2b
 800ead4:	0800ea79 	.word	0x0800ea79
 800ead8:	0800eb2d 	.word	0x0800eb2d
 800eadc:	0800ea79 	.word	0x0800ea79
 800eae0:	0800ea79 	.word	0x0800ea79
 800eae4:	0800ebf3 	.word	0x0800ebf3
 800eae8:	680b      	ldr	r3, [r1, #0]
 800eaea:	1d1a      	adds	r2, r3, #4
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	600a      	str	r2, [r1, #0]
 800eaf0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800eaf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eaf8:	2301      	movs	r3, #1
 800eafa:	e0a3      	b.n	800ec44 <_printf_i+0x1f4>
 800eafc:	6825      	ldr	r5, [r4, #0]
 800eafe:	6808      	ldr	r0, [r1, #0]
 800eb00:	062e      	lsls	r6, r5, #24
 800eb02:	f100 0304 	add.w	r3, r0, #4
 800eb06:	d50a      	bpl.n	800eb1e <_printf_i+0xce>
 800eb08:	6805      	ldr	r5, [r0, #0]
 800eb0a:	600b      	str	r3, [r1, #0]
 800eb0c:	2d00      	cmp	r5, #0
 800eb0e:	da03      	bge.n	800eb18 <_printf_i+0xc8>
 800eb10:	232d      	movs	r3, #45	; 0x2d
 800eb12:	426d      	negs	r5, r5
 800eb14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb18:	485e      	ldr	r0, [pc, #376]	; (800ec94 <_printf_i+0x244>)
 800eb1a:	230a      	movs	r3, #10
 800eb1c:	e019      	b.n	800eb52 <_printf_i+0x102>
 800eb1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800eb22:	6805      	ldr	r5, [r0, #0]
 800eb24:	600b      	str	r3, [r1, #0]
 800eb26:	bf18      	it	ne
 800eb28:	b22d      	sxthne	r5, r5
 800eb2a:	e7ef      	b.n	800eb0c <_printf_i+0xbc>
 800eb2c:	680b      	ldr	r3, [r1, #0]
 800eb2e:	6825      	ldr	r5, [r4, #0]
 800eb30:	1d18      	adds	r0, r3, #4
 800eb32:	6008      	str	r0, [r1, #0]
 800eb34:	0628      	lsls	r0, r5, #24
 800eb36:	d501      	bpl.n	800eb3c <_printf_i+0xec>
 800eb38:	681d      	ldr	r5, [r3, #0]
 800eb3a:	e002      	b.n	800eb42 <_printf_i+0xf2>
 800eb3c:	0669      	lsls	r1, r5, #25
 800eb3e:	d5fb      	bpl.n	800eb38 <_printf_i+0xe8>
 800eb40:	881d      	ldrh	r5, [r3, #0]
 800eb42:	4854      	ldr	r0, [pc, #336]	; (800ec94 <_printf_i+0x244>)
 800eb44:	2f6f      	cmp	r7, #111	; 0x6f
 800eb46:	bf0c      	ite	eq
 800eb48:	2308      	moveq	r3, #8
 800eb4a:	230a      	movne	r3, #10
 800eb4c:	2100      	movs	r1, #0
 800eb4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eb52:	6866      	ldr	r6, [r4, #4]
 800eb54:	60a6      	str	r6, [r4, #8]
 800eb56:	2e00      	cmp	r6, #0
 800eb58:	bfa2      	ittt	ge
 800eb5a:	6821      	ldrge	r1, [r4, #0]
 800eb5c:	f021 0104 	bicge.w	r1, r1, #4
 800eb60:	6021      	strge	r1, [r4, #0]
 800eb62:	b90d      	cbnz	r5, 800eb68 <_printf_i+0x118>
 800eb64:	2e00      	cmp	r6, #0
 800eb66:	d04d      	beq.n	800ec04 <_printf_i+0x1b4>
 800eb68:	4616      	mov	r6, r2
 800eb6a:	fbb5 f1f3 	udiv	r1, r5, r3
 800eb6e:	fb03 5711 	mls	r7, r3, r1, r5
 800eb72:	5dc7      	ldrb	r7, [r0, r7]
 800eb74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eb78:	462f      	mov	r7, r5
 800eb7a:	42bb      	cmp	r3, r7
 800eb7c:	460d      	mov	r5, r1
 800eb7e:	d9f4      	bls.n	800eb6a <_printf_i+0x11a>
 800eb80:	2b08      	cmp	r3, #8
 800eb82:	d10b      	bne.n	800eb9c <_printf_i+0x14c>
 800eb84:	6823      	ldr	r3, [r4, #0]
 800eb86:	07df      	lsls	r7, r3, #31
 800eb88:	d508      	bpl.n	800eb9c <_printf_i+0x14c>
 800eb8a:	6923      	ldr	r3, [r4, #16]
 800eb8c:	6861      	ldr	r1, [r4, #4]
 800eb8e:	4299      	cmp	r1, r3
 800eb90:	bfde      	ittt	le
 800eb92:	2330      	movle	r3, #48	; 0x30
 800eb94:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eb98:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eb9c:	1b92      	subs	r2, r2, r6
 800eb9e:	6122      	str	r2, [r4, #16]
 800eba0:	f8cd a000 	str.w	sl, [sp]
 800eba4:	464b      	mov	r3, r9
 800eba6:	aa03      	add	r2, sp, #12
 800eba8:	4621      	mov	r1, r4
 800ebaa:	4640      	mov	r0, r8
 800ebac:	f7ff fee2 	bl	800e974 <_printf_common>
 800ebb0:	3001      	adds	r0, #1
 800ebb2:	d14c      	bne.n	800ec4e <_printf_i+0x1fe>
 800ebb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ebb8:	b004      	add	sp, #16
 800ebba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebbe:	4835      	ldr	r0, [pc, #212]	; (800ec94 <_printf_i+0x244>)
 800ebc0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ebc4:	6823      	ldr	r3, [r4, #0]
 800ebc6:	680e      	ldr	r6, [r1, #0]
 800ebc8:	061f      	lsls	r7, r3, #24
 800ebca:	f856 5b04 	ldr.w	r5, [r6], #4
 800ebce:	600e      	str	r6, [r1, #0]
 800ebd0:	d514      	bpl.n	800ebfc <_printf_i+0x1ac>
 800ebd2:	07d9      	lsls	r1, r3, #31
 800ebd4:	bf44      	itt	mi
 800ebd6:	f043 0320 	orrmi.w	r3, r3, #32
 800ebda:	6023      	strmi	r3, [r4, #0]
 800ebdc:	b91d      	cbnz	r5, 800ebe6 <_printf_i+0x196>
 800ebde:	6823      	ldr	r3, [r4, #0]
 800ebe0:	f023 0320 	bic.w	r3, r3, #32
 800ebe4:	6023      	str	r3, [r4, #0]
 800ebe6:	2310      	movs	r3, #16
 800ebe8:	e7b0      	b.n	800eb4c <_printf_i+0xfc>
 800ebea:	6823      	ldr	r3, [r4, #0]
 800ebec:	f043 0320 	orr.w	r3, r3, #32
 800ebf0:	6023      	str	r3, [r4, #0]
 800ebf2:	2378      	movs	r3, #120	; 0x78
 800ebf4:	4828      	ldr	r0, [pc, #160]	; (800ec98 <_printf_i+0x248>)
 800ebf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ebfa:	e7e3      	b.n	800ebc4 <_printf_i+0x174>
 800ebfc:	065e      	lsls	r6, r3, #25
 800ebfe:	bf48      	it	mi
 800ec00:	b2ad      	uxthmi	r5, r5
 800ec02:	e7e6      	b.n	800ebd2 <_printf_i+0x182>
 800ec04:	4616      	mov	r6, r2
 800ec06:	e7bb      	b.n	800eb80 <_printf_i+0x130>
 800ec08:	680b      	ldr	r3, [r1, #0]
 800ec0a:	6826      	ldr	r6, [r4, #0]
 800ec0c:	6960      	ldr	r0, [r4, #20]
 800ec0e:	1d1d      	adds	r5, r3, #4
 800ec10:	600d      	str	r5, [r1, #0]
 800ec12:	0635      	lsls	r5, r6, #24
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	d501      	bpl.n	800ec1c <_printf_i+0x1cc>
 800ec18:	6018      	str	r0, [r3, #0]
 800ec1a:	e002      	b.n	800ec22 <_printf_i+0x1d2>
 800ec1c:	0671      	lsls	r1, r6, #25
 800ec1e:	d5fb      	bpl.n	800ec18 <_printf_i+0x1c8>
 800ec20:	8018      	strh	r0, [r3, #0]
 800ec22:	2300      	movs	r3, #0
 800ec24:	6123      	str	r3, [r4, #16]
 800ec26:	4616      	mov	r6, r2
 800ec28:	e7ba      	b.n	800eba0 <_printf_i+0x150>
 800ec2a:	680b      	ldr	r3, [r1, #0]
 800ec2c:	1d1a      	adds	r2, r3, #4
 800ec2e:	600a      	str	r2, [r1, #0]
 800ec30:	681e      	ldr	r6, [r3, #0]
 800ec32:	6862      	ldr	r2, [r4, #4]
 800ec34:	2100      	movs	r1, #0
 800ec36:	4630      	mov	r0, r6
 800ec38:	f7f1 fb5a 	bl	80002f0 <memchr>
 800ec3c:	b108      	cbz	r0, 800ec42 <_printf_i+0x1f2>
 800ec3e:	1b80      	subs	r0, r0, r6
 800ec40:	6060      	str	r0, [r4, #4]
 800ec42:	6863      	ldr	r3, [r4, #4]
 800ec44:	6123      	str	r3, [r4, #16]
 800ec46:	2300      	movs	r3, #0
 800ec48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec4c:	e7a8      	b.n	800eba0 <_printf_i+0x150>
 800ec4e:	6923      	ldr	r3, [r4, #16]
 800ec50:	4632      	mov	r2, r6
 800ec52:	4649      	mov	r1, r9
 800ec54:	4640      	mov	r0, r8
 800ec56:	47d0      	blx	sl
 800ec58:	3001      	adds	r0, #1
 800ec5a:	d0ab      	beq.n	800ebb4 <_printf_i+0x164>
 800ec5c:	6823      	ldr	r3, [r4, #0]
 800ec5e:	079b      	lsls	r3, r3, #30
 800ec60:	d413      	bmi.n	800ec8a <_printf_i+0x23a>
 800ec62:	68e0      	ldr	r0, [r4, #12]
 800ec64:	9b03      	ldr	r3, [sp, #12]
 800ec66:	4298      	cmp	r0, r3
 800ec68:	bfb8      	it	lt
 800ec6a:	4618      	movlt	r0, r3
 800ec6c:	e7a4      	b.n	800ebb8 <_printf_i+0x168>
 800ec6e:	2301      	movs	r3, #1
 800ec70:	4632      	mov	r2, r6
 800ec72:	4649      	mov	r1, r9
 800ec74:	4640      	mov	r0, r8
 800ec76:	47d0      	blx	sl
 800ec78:	3001      	adds	r0, #1
 800ec7a:	d09b      	beq.n	800ebb4 <_printf_i+0x164>
 800ec7c:	3501      	adds	r5, #1
 800ec7e:	68e3      	ldr	r3, [r4, #12]
 800ec80:	9903      	ldr	r1, [sp, #12]
 800ec82:	1a5b      	subs	r3, r3, r1
 800ec84:	42ab      	cmp	r3, r5
 800ec86:	dcf2      	bgt.n	800ec6e <_printf_i+0x21e>
 800ec88:	e7eb      	b.n	800ec62 <_printf_i+0x212>
 800ec8a:	2500      	movs	r5, #0
 800ec8c:	f104 0619 	add.w	r6, r4, #25
 800ec90:	e7f5      	b.n	800ec7e <_printf_i+0x22e>
 800ec92:	bf00      	nop
 800ec94:	0800ef95 	.word	0x0800ef95
 800ec98:	0800efa6 	.word	0x0800efa6

0800ec9c <__retarget_lock_acquire_recursive>:
 800ec9c:	4770      	bx	lr

0800ec9e <__retarget_lock_release_recursive>:
 800ec9e:	4770      	bx	lr

0800eca0 <memcpy>:
 800eca0:	440a      	add	r2, r1
 800eca2:	4291      	cmp	r1, r2
 800eca4:	f100 33ff 	add.w	r3, r0, #4294967295
 800eca8:	d100      	bne.n	800ecac <memcpy+0xc>
 800ecaa:	4770      	bx	lr
 800ecac:	b510      	push	{r4, lr}
 800ecae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ecb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ecb6:	4291      	cmp	r1, r2
 800ecb8:	d1f9      	bne.n	800ecae <memcpy+0xe>
 800ecba:	bd10      	pop	{r4, pc}

0800ecbc <memmove>:
 800ecbc:	4288      	cmp	r0, r1
 800ecbe:	b510      	push	{r4, lr}
 800ecc0:	eb01 0402 	add.w	r4, r1, r2
 800ecc4:	d902      	bls.n	800eccc <memmove+0x10>
 800ecc6:	4284      	cmp	r4, r0
 800ecc8:	4623      	mov	r3, r4
 800ecca:	d807      	bhi.n	800ecdc <memmove+0x20>
 800eccc:	1e43      	subs	r3, r0, #1
 800ecce:	42a1      	cmp	r1, r4
 800ecd0:	d008      	beq.n	800ece4 <memmove+0x28>
 800ecd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ecd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ecda:	e7f8      	b.n	800ecce <memmove+0x12>
 800ecdc:	4402      	add	r2, r0
 800ecde:	4601      	mov	r1, r0
 800ece0:	428a      	cmp	r2, r1
 800ece2:	d100      	bne.n	800ece6 <memmove+0x2a>
 800ece4:	bd10      	pop	{r4, pc}
 800ece6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ecea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ecee:	e7f7      	b.n	800ece0 <memmove+0x24>

0800ecf0 <_realloc_r>:
 800ecf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecf2:	4607      	mov	r7, r0
 800ecf4:	4614      	mov	r4, r2
 800ecf6:	460e      	mov	r6, r1
 800ecf8:	b921      	cbnz	r1, 800ed04 <_realloc_r+0x14>
 800ecfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ecfe:	4611      	mov	r1, r2
 800ed00:	f7ff bc26 	b.w	800e550 <_malloc_r>
 800ed04:	b922      	cbnz	r2, 800ed10 <_realloc_r+0x20>
 800ed06:	f7ff fbd3 	bl	800e4b0 <_free_r>
 800ed0a:	4625      	mov	r5, r4
 800ed0c:	4628      	mov	r0, r5
 800ed0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed10:	f000 f814 	bl	800ed3c <_malloc_usable_size_r>
 800ed14:	42a0      	cmp	r0, r4
 800ed16:	d20f      	bcs.n	800ed38 <_realloc_r+0x48>
 800ed18:	4621      	mov	r1, r4
 800ed1a:	4638      	mov	r0, r7
 800ed1c:	f7ff fc18 	bl	800e550 <_malloc_r>
 800ed20:	4605      	mov	r5, r0
 800ed22:	2800      	cmp	r0, #0
 800ed24:	d0f2      	beq.n	800ed0c <_realloc_r+0x1c>
 800ed26:	4631      	mov	r1, r6
 800ed28:	4622      	mov	r2, r4
 800ed2a:	f7ff ffb9 	bl	800eca0 <memcpy>
 800ed2e:	4631      	mov	r1, r6
 800ed30:	4638      	mov	r0, r7
 800ed32:	f7ff fbbd 	bl	800e4b0 <_free_r>
 800ed36:	e7e9      	b.n	800ed0c <_realloc_r+0x1c>
 800ed38:	4635      	mov	r5, r6
 800ed3a:	e7e7      	b.n	800ed0c <_realloc_r+0x1c>

0800ed3c <_malloc_usable_size_r>:
 800ed3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed40:	1f18      	subs	r0, r3, #4
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	bfbc      	itt	lt
 800ed46:	580b      	ldrlt	r3, [r1, r0]
 800ed48:	18c0      	addlt	r0, r0, r3
 800ed4a:	4770      	bx	lr

0800ed4c <_init>:
 800ed4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed4e:	bf00      	nop
 800ed50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed52:	bc08      	pop	{r3}
 800ed54:	469e      	mov	lr, r3
 800ed56:	4770      	bx	lr

0800ed58 <_fini>:
 800ed58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed5a:	bf00      	nop
 800ed5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed5e:	bc08      	pop	{r3}
 800ed60:	469e      	mov	lr, r3
 800ed62:	4770      	bx	lr
